DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00000000000000000000000000000000; -- nop

0001 : 00000000000000000000000000000000; -- nop

0002 : 00000000000000000000000000000000; -- nop

0003 : 00000000000000000000000000000000; -- nop

0004 : 00000000000000000000000000000000; -- nop

0005 : 00000000000000000000000000000000; -- nop

0006 : 00000000000000000000000000000000; -- nop

0007 : 00000000000000000000000000000000; -- nop

0008 : 00000000000000000000000000000000; -- nop

0009 : 01000000010000000000000001000000; -- lw $1, 64($0)

0010 : 01000000100000000000000001000001; -- lw $2, 65($0)

0011 : 00101010100000011111111111111111; -- addi $10 $0, -1

0012 : 00010000100101000000000000000001; -- bne $2, $10, 1

0013 : 00010010100000000000000000000001; -- bne $10, $0, 1

0014 : 00101010100000011111111111111111; -- addi $10 $0 -1

0015 : 00010010100000100000000000000100; -- bne $10, $1, 4

0016 : 00101010100000011111111111111111; -- addi $10, $0, -1

0017 : 00111010100000000000000001000000; -- sw $10, 64($0)

0018 : 00111010100000000000000001000001; -- sw $10, 65($0)

0019 : 00001000000000000000000000000000; -- j 0

0020 : 00010000100101000000000000000010; -- bne $2, $10, 2

0021 : 00101101000000000000000000000001; -- addi $20, $0, 1

0022 : 00010000001010000000000000000001; -- bne $0, $20, 1

0023 : 00101101000000000000000000000000; -- addi $20, $0, 0

0024 : 01000111100000000000000001000010; -- lw $30, 66($0)

0025 : 01000000110000100000000000000000; -- lw $3, 0($1)

0026 : 00101010100000000000000000001110; -- addi $10 $0 14

0027 : 00000010110101000011000000001000; -- and $11, $10, $3

0028 : 00010010110000000000000000000100; -- bne $11, $0, 4

0029 : 00101010100000011111111111111111; -- addi $10, $0, -1

0030 : 00111010100000000000000001000000; -- sw $10, 64($0)

0031 : 00111010100000000000000001000001; -- sw $10, 65($0)

0032 : 00001000000000000000000000000000; -- j 0

0033 : 00101010100000000000000000000001; -- addi $10 $0 1

0034 : 00000011000101000011000000001000; -- and $12, $10, $3

0035 : 00000011010101011110000000001000; -- and $13, $10, $30

0036 : 00010011000110100000000000000001; -- bne $12, $13, 1

0037 : 00010010100000000000000000000100; -- bne $10, $0, 4

0038 : 00101010100000011111111111111111; -- addi $10, $0, -1

0039 : 00111010100000000000000001000000; -- sw $10, 64($0)

0040 : 00111010100000000000000001000001; -- sw $10, 65($0)

0041 : 00001000000000000000000000000000; -- j 0

0042 : 00010101000000000000000000000001; -- bne $20 $0 1

0043 : 00001000000000000000000000111010; -- j handle2Valid

0044 : 00001000000000000000000000111100; -- j handle2InValid

0045 : 00001000000000000000000000000000; -- j 0

0046 : 00101100100000000000000001001001; --     addi $18, $0, 73

0047 : 00101100010000000000000000100100; --     addi $17, $0, 36

0048 : 00111100101000100000000000000000; --     sw $18, 0($17)

0049 : 00100111110000000000000000000000; --     jr $31

0050 : 00101100100000000000000001001001; --     addi $18, $0, 73

0051 : 00101100010000000000000000100101; --     addi $17, $0, 37

0052 : 00111100101000100000000000000000; --     sw $18, 0($17)

0053 : 00100111110000000000000000000000; --     jr $31

0054 : 00101100100000000000000001001001; --     addi $18, $0, 73

0055 : 00101100010000000000000000100110; --     addi $17, $0, 38

0056 : 00111100101000100000000000000000; --     sw $18, 0($17)

0057 : 00100111110000000000000000000000; --     jr $31

0058 : 01000001000001000000000000000000; --     lw $4, 0($2)

0059 : 00001000000000000000001100000011; --     j move

0060 : 00101010100000000000000000001110; --     addi $10 $0 14

0061 : 00000010110101000011000000001000; --     and $11, $10, $3

0062 : 00000010110101100000000010010100; --     sra $11, $11, 1

0063 : 00101010100000011111111111111111; --     addi $10, $0, -1

0064 : 00111010100000000000000001100100; --     sw $10, 100($0)

0065 : 00111010100000000000000001100101; --     sw $10, 101($0)

0066 : 00111010100000000000000001100110; --     sw $10, 102($0)

0067 : 00111010100000000000000001100111; --     sw $10, 103($0)

0068 : 00111010100000000000000001101000; --     sw $10, 104($0)

0069 : 00111010100000000000000001101001; --     sw $10, 105($0)

0070 : 00111010100000000000000001101010; --     sw $10, 106($0)

0071 : 00111010100000000000000001101011; --     sw $10, 107($0)

0072 : 00111010100000000000000001101100; --     sw $10, 108($0)

0073 : 00111010100000000000000001101101; --     sw $10, 109($0)

0074 : 00111010100000000000000001101110; --     sw $10, 110($0)

0075 : 00111010100000000000000001101111; --     sw $10, 111($0)

0076 : 00111010100000000000000001110000; --     sw $10, 112($0)

0077 : 00111010100000000000000001110001; --     sw $10, 113($0)

0078 : 00111010100000000000000001110010; --     sw $10, 114($0)

0079 : 00111010100000000000000001110011; --     sw $10, 115($0)

0080 : 00111010100000000000000001110100; --     sw $10, 116($0)

0081 : 00111010100000000000000001110101; --     sw $10, 117($0)

0082 : 00111010100000000000000001110110; --     sw $10, 118($0)

0083 : 00111010100000000000000001110111; --     sw $10, 119($0)

0084 : 00111010100000000000000001111000; --     sw $10, 120($0)

0085 : 00111010100000000000000001111001; --     sw $10, 121($0)

0086 : 00111010100000000000000001111010; --     sw $10, 122($0)

0087 : 00111010100000000000000001111011; --     sw $10, 123($0)

0088 : 00111010100000000000000001111100; --     sw $10, 124($0)

0089 : 00111010100000000000000001111101; --     sw $10, 125($0)

0090 : 00111010100000000000000001111110; --     sw $10, 126($0)

0091 : 00111010100000000000000001111111; --     sw $10, 127($0)

0092 : 00111010100000000000000010000000; --     sw $10, 128($0)

0093 : 00111010100000000000000010000001; --     sw $10, 129($0)

0094 : 00111010100000000000000010000010; --     sw $10, 130($0)

0095 : 00111010100000000000000010000011; --     sw $10, 131($0)

0096 : 00101010100000000000000000000001; --     addi $10 $0 1

0097 : 00010010110101000000000000000001; --     bne $11 $10 1

0098 : 00001000000000000000001001100000; --     j handleKnight

0099 : 00101010100000000000000000000010; --     addi $10 $0 2

0100 : 00010010110101000000000000000001; --     bne $11 $10 1

0101 : 00001000000000000000000100101111; --     j handleKing

0102 : 00101010100000000000000000000100; --     addi $10 $0 4

0103 : 00010010110101000000000000000001; --     bne $11 $10 1

0104 : 00001000000000000000000110100100; --     j handleBishop

0105 : 00101010100000000000000000000101; --     addi $10 $0 5

0106 : 00010010110101000000000000000001; --     bne $11 $10 1

0107 : 00001000000000000000001000000110; --     j handleRook

0108 : 00101010100000000000000000000110; --     addi $10 $0 6

0109 : 00010010110101000000000000000001; --     bne $11 $10 1

0110 : 00001000000000000000000001110000; --     j handlePawn

0111 : 00001000000000000000000000000000; --     j 0

0112 : 00101010100000000000000000000001; --     addi $10, $0, 1

0113 : 00000010110101011110000000001000; --     and $11, $10, $30

0114 : 00010010110000000000000000000010; --     bne $11, $0, 2

0115 : 00011000000000000000000011010011; --     jal whitePawnCheck

0116 : 00001000000000000000000000000000; --     j 0

0117 : 00011000000000000000000001110111; --     jal blackPawnCheck

0118 : 00001000000000000000000000000000; --     j 0

0119 : 00001000000000000000000001111000; --     j blackPawnCheckSub1

0120 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0121 : 00101010000100011111111111111111; --     addi $8, $8, -1

0122 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0123 : 00010010010000000000000000000001; --     bne $9, $0, 1

0124 : 00001000000000000000000010100111; --     j blackPawnLeftDiagCheck

0125 : 00000010100100000000000110010000; --     sll $10, $8, 3

0126 : 00000010100101000111000000000000; --     add $10, $10, $7

0127 : 01000010110101000000000000000000; --     lw $11, 0($10)

0128 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0129 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0130 : 00010011000000000000000000000001; --     bne $12, $0, 1

0131 : 00010010100000000000000000000001; --     bne $10, $0, 1

0132 : 00001000000000000000000010100111; --     j blackPawnLeftDiagCheck

0133 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0134 : 00000011010101101100000000001000; --     and $13, $11, $12

0135 : 00000010110101101101000000000100; --     sub $11, $11, $13

0136 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0137 : 00000010100100000000000110010000; --     sll $10, $8, 3

0138 : 00000010100101000111000000000000; --     add $10, $10, $7

0139 : 00111010110101000000000000000000; --     sw $11, 0($10)

0140 : 00111010100000000000000001100100; --     sw $10, 100($0)

0141 : 00101010100000000000000000000101; --     addi $10, $0, 5

0142 : 00010010100100000000000000000001; --     bne $10, $8, 1

0143 : 00001000000000000000000010010001; --     j blackPawnYSub2Check

0144 : 00001000000000000000000010100111; --     j blackPawnLeftDiagCheck

0145 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0146 : 00101010000100011111111111111110; --     addi $8, $8, -2

0147 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0148 : 00010010010000000000000000000001; --     bne $9, $0, 1

0149 : 00001000000000000000000010100111; --     j blackPawnLeftDiagCheck

0150 : 00000010100100000000000110010000; --     sll $10, $8, 3

0151 : 00000010100101000111000000000000; --     add $10, $10, $7

0152 : 01000010110101000000000000000000; --     lw $11, 0($10)

0153 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0154 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0155 : 00010011000000000000000000000001; --     bne $12, $0, 1

0156 : 00010010100000000000000000000001; --     bne $10, $0, 1

0157 : 00001000000000000000000010100111; --     j blackPawnLeftDiagCheck

0158 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0159 : 00000011010101101100000000001000; --     and $13, $11, $12

0160 : 00000010110101101101000000000100; --     sub $11, $11, $13

0161 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0162 : 00000010100100000000000110010000; --     sll $10, $8, 3

0163 : 00000010100101000111000000000000; --     add $10, $10, $7

0164 : 00111010110101000000000000000000; --     sw $11, 0($10)

0165 : 00111010100000000000000001100101; --     sw $10, 101($0)

0166 : 00001000000000000000000010100111; --     j blackPawnLeftDiagCheck

0167 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0168 : 00101010000100011111111111111111; --     addi $8, $8, -1

0169 : 00101001110011111111111111111111; --     addi $7, $7, -1

0170 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0171 : 00010010010000000000000000000001; --     bne $9, $0, 1

0172 : 00001000000000000000000010111101; --     j blackPawnRightDiagCheck

0173 : 00000010100100000000000110010000; --     sll $10, $8, 3

0174 : 00000010100101000111000000000000; --     add $10, $10, $7

0175 : 01000010110101000000000000000000; --     lw $11, 0($10)

0176 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0177 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0178 : 00010011000000000000000000000001; --     bne $12, $0, 1

0179 : 00001000000000000000000010111101; --     j blackPawnRightDiagCheck

0180 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0181 : 00000011010101101100000000001000; --     and $13, $11, $12

0182 : 00000010110101101101000000000100; --     sub $11, $11, $13

0183 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0184 : 00000010100100000000000110010000; --     sll $10, $8, 3

0185 : 00000010100101000111000000000000; --     add $10, $10, $7

0186 : 00111010110101000000000000000000; --     sw $11, 0($10)

0187 : 00111010100000000000000001100110; --     sw $10, 102($0)

0188 : 00001000000000000000000010111101; --     j blackPawnRightDiagCheck

0189 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0190 : 00101010000100011111111111111111; --     addi $8, $8, -1

0191 : 00101001110011100000000000000001; --     addi $7, $7, 1

0192 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0193 : 00010010010000000000000000000001; --     bne $9, $0, 1

0194 : 00001000000000000000000000000000; --     j 0

0195 : 00000010100100000000000110010000; --     sll $10, $8, 3

0196 : 00000010100101000111000000000000; --     add $10, $10, $7

0197 : 01000010110101000000000000000000; --     lw $11, 0($10)

0198 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0199 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0200 : 00010011000000000000000000000001; --     bne $12, $0, 1

0201 : 00001000000000000000000000000000; --     j 0

0202 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0203 : 00000011010101101100000000001000; --     and $13, $11, $12

0204 : 00000010110101101101000000000100; --     sub $11, $11, $13

0205 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0206 : 00000010100100000000000110010000; --     sll $10, $8, 3

0207 : 00000010100101000111000000000000; --     add $10, $10, $7

0208 : 00111010110101000000000000000000; --     sw $11, 0($10)

0209 : 00111010100000000000000001100111; --     sw $10, 103($0)

0210 : 00001000000000000000000000000000; --     j 0

0211 : 00001000000000000000000011010100; --     j whitePawnYAdd1Check

0212 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0213 : 00101010000100000000000000000001; --     addi $8, $8, 1

0214 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0215 : 00010010010000000000000000000001; --     bne $9, $0, 1

0216 : 00001000000000000000000100000011; --     j whitePawnLeftDiagCheck

0217 : 00000010100100000000000110010000; --     sll $10, $8, 3

0218 : 00000010100101000111000000000000; --     add $10, $10, $7

0219 : 01000010110101000000000000000000; --     lw $11, 0($10)

0220 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0221 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0222 : 00010011000000000000000000000001; --     bne $12, $0, 1

0223 : 00010010100000000000000000000001; --     bne $10, $0, 1

0224 : 00001000000000000000000100000011; --     j whitePawnLeftDiagCheck

0225 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0226 : 00000011010101101100000000001000; --     and $13, $11, $12

0227 : 00000010110101101101000000000100; --     sub $11, $11, $13

0228 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0229 : 00000010100100000000000110010000; --     sll $10, $8, 3

0230 : 00000010100101000111000000000000; --     add $10, $10, $7

0231 : 00111010110101000000000000000000; --     sw $11, 0($10)

0232 : 00111010100000000000000001100100; --     sw $10, 100($0)

0233 : 00101010100000000000000000000010; --     addi $10, $0, 2

0234 : 00010010100100000000000000000001; --     bne $10, $8, 1

0235 : 00001000000000000000000011101101; --     j whitePawnYAdd2Check

0236 : 00001000000000000000000100000011; --     j whitePawnLeftDiagCheck

0237 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0238 : 00101010000100000000000000000010; --     addi $8, $8, 2

0239 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0240 : 00010010010000000000000000000001; --     bne $9, $0, 1

0241 : 00001000000000000000000100000011; --     j whitePawnLeftDiagCheck

0242 : 00000010100100000000000110010000; --     sll $10, $8, 3

0243 : 00000010100101000111000000000000; --     add $10, $10, $7

0244 : 01000010110101000000000000000000; --     lw $11, 0($10)

0245 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0246 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0247 : 00010011000000000000000000000001; --     bne $12, $0, 1

0248 : 00010010100000000000000000000001; --     bne $10, $0, 1

0249 : 00001000000000000000000100000011; --     j whitePawnLeftDiagCheck

0250 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0251 : 00000011010101101100000000001000; --     and $13, $11, $12

0252 : 00000010110101101101000000000100; --     sub $11, $11, $13

0253 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0254 : 00000010100100000000000110010000; --     sll $10, $8, 3

0255 : 00000010100101000111000000000000; --     add $10, $10, $7

0256 : 00111010110101000000000000000000; --     sw $11, 0($10)

0257 : 00111010100000000000000001100101; --     sw $10, 101($0)

0258 : 00001000000000000000000100000011; --     j whitePawnLeftDiagCheck

0259 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0260 : 00101010000100000000000000000001; --     addi $8, $8, 1

0261 : 00101001110011111111111111111111; --     addi $7, $7, -1

0262 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0263 : 00010010010000000000000000000001; --     bne $9, $0, 1

0264 : 00001000000000000000000100011001; --     j whitePawnRightDiagCheck

0265 : 00000010100100000000000110010000; --     sll $10, $8, 3

0266 : 00000010100101000111000000000000; --     add $10, $10, $7

0267 : 01000010110101000000000000000000; --     lw $11, 0($10)

0268 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0269 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0270 : 00010011000000000000000000000001; --     bne $12, $0, 1

0271 : 00001000000000000000000100011001; --     j whitePawnRightDiagCheck

0272 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0273 : 00000011010101101100000000001000; --     and $13, $11, $12

0274 : 00000010110101101101000000000100; --     sub $11, $11, $13

0275 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0276 : 00000010100100000000000110010000; --     sll $10, $8, 3

0277 : 00000010100101000111000000000000; --     add $10, $10, $7

0278 : 00111010110101000000000000000000; --     sw $11, 0($10)

0279 : 00111010100000000000000001100110; --     sw $10, 102($0)

0280 : 00001000000000000000000100011001; --     j whitePawnRightDiagCheck

0281 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0282 : 00101010000100000000000000000001; --     addi $8, $8, 1

0283 : 00101001110011100000000000000001; --     addi $7, $7, 1

0284 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0285 : 00010010010000000000000000000001; --     bne $9, $0, 1

0286 : 00001000000000000000000000000000; --     j 0

0287 : 00000010100100000000000110010000; --     sll $10, $8, 3

0288 : 00000010100101000111000000000000; --     add $10, $10, $7

0289 : 01000010110101000000000000000000; --     lw $11, 0($10)

0290 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0291 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0292 : 00010011000000000000000000000001; --     bne $12, $0, 1

0293 : 00001000000000000000000000000000; --     j 0

0294 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0295 : 00000011010101101100000000001000; --     and $13, $11, $12

0296 : 00000010110101101101000000000100; --     sub $11, $11, $13

0297 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0298 : 00000010100100000000000110010000; --     sll $10, $8, 3

0299 : 00000010100101000111000000000000; --     add $10, $10, $7

0300 : 00111010110101000000000000000000; --     sw $11, 0($10)

0301 : 00111010100000000000000001100111; --     sw $10, 103($0)

0302 : 00001000000000000000000000000000; --     j 0

0303 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0304 : 00101001110011100000000000000001; --     addi $7, $7, 1

0305 : 00101010000100011111111111111111; --     addi $8, $8, -1

0306 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0307 : 00101100110000000000000000000001; --     addi $19, $0, 1

0308 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0309 : 00000010100100000000000110010000; --     sll $10, $8, 3

0310 : 00000010100101000111000000000000; --     add $10, $10, $7

0311 : 01000010110101000000000000000000; --     lw $11, 0($10)

0312 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0313 : 00000011010101101100000000001000; --     and $13, $11, $12

0314 : 00000010110101101101000000000100; --     sub $11, $11, $13

0315 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0316 : 00111010110101000000000000000000; --     sw $11, 0($10)

0317 : 00111010100000000000000001100100; --     sw $10, 100($0)

0318 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0319 : 00101001110011100000000000000001; --     addi $7, $7, 1

0320 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0321 : 00101100110000000000000000000001; --     addi $19, $0, 1

0322 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0323 : 00000010100100000000000110010000; --     sll $10, $8, 3

0324 : 00000010100101000111000000000000; --     add $10, $10, $7

0325 : 01000010110101000000000000000000; --     lw $11, 0($10)

0326 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0327 : 00000011010101101100000000001000; --     and $13, $11, $12

0328 : 00000010110101101101000000000100; --     sub $11, $11, $13

0329 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0330 : 00111010110101000000000000000000; --     sw $11, 0($10)

0331 : 00111010100000000000000001100101; --     sw $10, 101($0)

0332 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0333 : 00101001110011100000000000000001; --     addi $7, $7, 1

0334 : 00101010000100000000000000000001; --     addi $8, $8, 1

0335 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0336 : 00101100110000000000000000000001; --     addi $19, $0, 1

0337 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0338 : 00000010100100000000000110010000; --     sll $10, $8, 3

0339 : 00000010100101000111000000000000; --     add $10, $10, $7

0340 : 01000010110101000000000000000000; --     lw $11, 0($10)

0341 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0342 : 00000011010101101100000000001000; --     and $13, $11, $12

0343 : 00000010110101101101000000000100; --     sub $11, $11, $13

0344 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0345 : 00111010110101000000000000000000; --     sw $11, 0($10)

0346 : 00111010100000000000000001100110; --     sw $10, 102($0)

0347 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0348 : 00101010000100011111111111111111; --     addi $8, $8, -1

0349 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0350 : 00101100110000000000000000000001; --     addi $19, $0, 1

0351 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0352 : 00000010100100000000000110010000; --     sll $10, $8, 3

0353 : 00000010100101000111000000000000; --     add $10, $10, $7

0354 : 01000010110101000000000000000000; --     lw $11, 0($10)

0355 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0356 : 00000011010101101100000000001000; --     and $13, $11, $12

0357 : 00000010110101101101000000000100; --     sub $11, $11, $13

0358 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0359 : 00111010110101000000000000000000; --     sw $11, 0($10)

0360 : 00111010100000000000000001100111; --     sw $10, 103($0)

0361 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0362 : 00101010000100000000000000000001; --     addi $8, $8, 1

0363 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0364 : 00101100110000000000000000000001; --     addi $19, $0, 1

0365 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0366 : 00000010100100000000000110010000; --     sll $10, $8, 3

0367 : 00000010100101000111000000000000; --     add $10, $10, $7

0368 : 01000010110101000000000000000000; --     lw $11, 0($10)

0369 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0370 : 00000011010101101100000000001000; --     and $13, $11, $12

0371 : 00000010110101101101000000000100; --     sub $11, $11, $13

0372 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0373 : 00111010110101000000000000000000; --     sw $11, 0($10)

0374 : 00111010100000000000000001101000; --     sw $10, 104($0)

0375 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0376 : 00101001110011111111111111111111; --     addi $7, $7, -1

0377 : 00101010000100011111111111111111; --     addi $8, $8, -1

0378 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0379 : 00101100110000000000000000000001; --     addi $19, $0, 1

0380 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0381 : 00000010100100000000000110010000; --     sll $10, $8, 3

0382 : 00000010100101000111000000000000; --     add $10, $10, $7

0383 : 01000010110101000000000000000000; --     lw $11, 0($10)

0384 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0385 : 00000011010101101100000000001000; --     and $13, $11, $12

0386 : 00000010110101101101000000000100; --     sub $11, $11, $13

0387 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0388 : 00111010110101000000000000000000; --     sw $11, 0($10)

0389 : 00111010100000000000000001101001; --     sw $10, 105($0)

0390 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0391 : 00101001110011111111111111111111; --     addi $7, $7, -1

0392 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0393 : 00101100110000000000000000000001; --     addi $19, $0, 1

0394 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0395 : 00000010100100000000000110010000; --     sll $10, $8, 3

0396 : 00000010100101000111000000000000; --     add $10, $10, $7

0397 : 01000010110101000000000000000000; --     lw $11, 0($10)

0398 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0399 : 00000011010101101100000000001000; --     and $13, $11, $12

0400 : 00000010110101101101000000000100; --     sub $11, $11, $13

0401 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0402 : 00111010110101000000000000000000; --     sw $11, 0($10)

0403 : 00111010100000000000000001101010; --     sw $10, 106($0)

0404 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0405 : 00101001110011111111111111111111; --     addi $7, $7, -1

0406 : 00101010000100000000000000000001; --     addi $8, $8, 1

0407 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0408 : 00101100110000000000000000000001; --     addi $19, $0, 1

0409 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0410 : 00000010100100000000000110010000; --     sll $10, $8, 3

0411 : 00000010100101000111000000000000; --     add $10, $10, $7

0412 : 01000010110101000000000000000000; --     lw $11, 0($10)

0413 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0414 : 00000011010101101100000000001000; --     and $13, $11, $12

0415 : 00000010110101101101000000000100; --     sub $11, $11, $13

0416 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0417 : 00111010110101000000000000000000; --     sw $11, 0($10)

0418 : 00111010100000000000000001101011; --     sw $10, 107($0)

0419 : 00001000000000000000000000000000; --     j 0

0420 : 00101001100000000000000001100100; --     addi $6, $0, 100

0421 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0422 : 00101001110011100000000000000001; --     addi $7, $7, 1

0423 : 00101010000100000000000000000001; --     addi $8, $8, 1

0424 : 00001000000000000000000110101001; --     j startLoopBishopXAdd1YAdd1

0425 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0426 : 00010010010000000000000000000001; --     bne $9, $0, 1

0427 : 00001000000000000000000110111101; --     j endLoopBishopXAdd1YAdd1

0428 : 00000010100100000000000110010000; --     sll $10, $8, 3

0429 : 00000010100101000111000000000000; --     add $10, $10, $7

0430 : 01000010110101000000000000000000; --     lw $11, 0($10)

0431 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0432 : 00000011010101101100000000001000; --     and $13, $11, $12

0433 : 00000010110101101101000000000100; --     sub $11, $11, $13

0434 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0435 : 00111010110101000000000000000000; --     sw $11, 0($10)

0436 : 00111010100011000000000000000000; --     sw $10, 0($6)

0437 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0438 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0439 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0440 : 00010011000000000000000000000011; --     bne $12, $0, 3

0441 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0442 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0443 : 00001000000000000000000110101001; --     j startLoopBishopXAdd1YAdd1 #end loooooop

0444 : 00001000000000000000000110111101; --     j endLoopBishopXAdd1YAdd1

0445 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0446 : 00101001110011100000000000000001; --     addi $7, $7, 1

0447 : 00101010000100011111111111111111; --     addi $8, $8, -1

0448 : 00001000000000000000000111000001; --     j startLoopBishopXAdd1YSub1

0449 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0450 : 00010010010000000000000000000001; --     bne $9, $0, 1

0451 : 00001000000000000000000111010101; --     j endLoopBishopXAdd1YSub1

0452 : 00000010100100000000000110010000; --     sll $10, $8, 3

0453 : 00000010100101000111000000000000; --     add $10, $10, $7

0454 : 01000010110101000000000000000000; --     lw $11, 0($10)

0455 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0456 : 00000011010101101100000000001000; --     and $13, $11, $12

0457 : 00000010110101101101000000000100; --     sub $11, $11, $13

0458 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0459 : 00111010110101000000000000000000; --     sw $11, 0($10)

0460 : 00111010100011000000000000000000; --     sw $10, 0($6)

0461 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0462 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0463 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0464 : 00010011000000000000000000000011; --     bne $12, $0, 3

0465 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0466 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0467 : 00001000000000000000000111000001; --     j startLoopBishopXAdd1YSub1 #end loooooop

0468 : 00001000000000000000000111010101; --     j endLoopBishopXAdd1YSub1

0469 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0470 : 00101001110011111111111111111111; --     addi $7, $7, -1

0471 : 00101010000100000000000000000001; --     addi $8, $8, 1

0472 : 00001000000000000000000111011001; --     j startLoopBishopXSub1YAdd1

0473 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0474 : 00010010010000000000000000000001; --     bne $9, $0, 1

0475 : 00001000000000000000000111101101; --     j endLoopBishopXSub1YAdd1

0476 : 00000010100100000000000110010000; --     sll $10, $8, 3

0477 : 00000010100101000111000000000000; --     add $10, $10, $7

0478 : 01000010110101000000000000000000; --     lw $11, 0($10)

0479 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0480 : 00000011010101101100000000001000; --     and $13, $11, $12

0481 : 00000010110101101101000000000100; --     sub $11, $11, $13

0482 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0483 : 00111010110101000000000000000000; --     sw $11, 0($10)

0484 : 00111010100011000000000000000000; --     sw $10, 0($6)

0485 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0486 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0487 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0488 : 00010011000000000000000000000011; --     bne $12, $0, 3

0489 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0490 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0491 : 00001000000000000000000111011001; --     j startLoopBishopXSub1YAdd1 #end loooooop

0492 : 00001000000000000000000111101101; --     j endLoopBishopXSub1YAdd1

0493 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0494 : 00101001110011111111111111111111; --     addi $7, $7, -1

0495 : 00101010000100011111111111111111; --     addi $8, $8, -1

0496 : 00001000000000000000000111110001; --     j startLoopBishopXSub1YSub1

0497 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0498 : 00010010010000000000000000000001; --     bne $9, $0, 1

0499 : 00001000000000000000001000000101; --     j endLoopBishopXSub1YSub1

0500 : 00000010100100000000000110010000; --     sll $10, $8, 3

0501 : 00000010100101000111000000000000; --     add $10, $10, $7

0502 : 01000010110101000000000000000000; --     lw $11, 0($10)

0503 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0504 : 00000011010101101100000000001000; --     and $13, $11, $12

0505 : 00000010110101101101000000000100; --     sub $11, $11, $13

0506 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0507 : 00111010110101000000000000000000; --     sw $11, 0($10)

0508 : 00111010100011000000000000000000; --     sw $10, 0($6)

0509 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0510 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0511 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0512 : 00010011000000000000000000000011; --     bne $12, $0, 3

0513 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0514 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0515 : 00001000000000000000000111110001; --     j startLoopBishopXSub1YSub1 #end loooooop

0516 : 00001000000000000000001000000101; --     j endLoopBishopXSub1YSub1

0517 : 00001000000000000000000000000000; --     j 0

0518 : 00101001100000000000000001100100; --     addi $6, $0, 100

0519 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0520 : 00101001110011100000000000000001; --     addi $7, $7, 1

0521 : 00001000000000000000001000001010; --     j startLoopRookXAdd1

0522 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0523 : 00010010010000000000000000000001; --     bne $9, $0, 1

0524 : 00001000000000000000001000011101; --     j endLoopRookXAdd1

0525 : 00000010100100000000000110010000; --     sll $10, $8, 3

0526 : 00000010100101000111000000000000; --     add $10, $10, $7

0527 : 01000010110101000000000000000000; --     lw $11, 0($10)

0528 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0529 : 00000011010101101100000000001000; --     and $13, $11, $12

0530 : 00000010110101101101000000000100; --     sub $11, $11, $13

0531 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0532 : 00111010110101000000000000000000; --     sw $11, 0($10)

0533 : 00111010100011000000000000000000; --     sw $10, 0($6)

0534 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0535 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0536 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0537 : 00010011000000000000000000000010; --     bne $12, $0, 2

0538 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0539 : 00001000000000000000001000001010; --     j startLoopRookXAdd1 #end loooooop

0540 : 00001000000000000000001000011101; --     j endLoopRookXAdd1

0541 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0542 : 00101001110011111111111111111111; --     addi $7, $7, -1

0543 : 00001000000000000000001000100000; --     j startLoopRookXSub1

0544 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0545 : 00010010010000000000000000000001; --     bne $9, $0, 1

0546 : 00001000000000000000001000110011; --     j endLoopRookXSub1

0547 : 00000010100100000000000110010000; --     sll $10, $8, 3

0548 : 00000010100101000111000000000000; --     add $10, $10, $7

0549 : 01000010110101000000000000000000; --     lw $11, 0($10)

0550 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0551 : 00000011010101101100000000001000; --     and $13, $11, $12

0552 : 00000010110101101101000000000100; --     sub $11, $11, $13

0553 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0554 : 00111010110101000000000000000000; --     sw $11, 0($10)

0555 : 00111010100011000000000000000000; --     sw $10, 0($6)

0556 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0557 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0558 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0559 : 00010011000000000000000000000010; --     bne $12, $0, 2

0560 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0561 : 00001000000000000000001000100000; --     j startLoopRookXSub1 #end loooooop

0562 : 00001000000000000000001000110011; --     j endLoopRookXSub1

0563 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0564 : 00101010000100000000000000000001; --     addi $8, $8, 1

0565 : 00001000000000000000001000110110; --     j startLoopRookYAdd1

0566 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0567 : 00010010010000000000000000000001; --     bne $9, $0, 1

0568 : 00001000000000000000001001001001; --     j endLoopRookYAdd1

0569 : 00000010100100000000000110010000; --     sll $10, $8, 3

0570 : 00000010100101000111000000000000; --     add $10, $10, $7

0571 : 01000010110101000000000000000000; --     lw $11, 0($10)

0572 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0573 : 00000011010101101100000000001000; --     and $13, $11, $12

0574 : 00000010110101101101000000000100; --     sub $11, $11, $13

0575 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0576 : 00111010110101000000000000000000; --     sw $11, 0($10)

0577 : 00111010100011000000000000000000; --     sw $10, 0($6)

0578 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0579 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0580 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0581 : 00010011000000000000000000000010; --     bne $12, $0, 2

0582 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0583 : 00001000000000000000001000110110; --     j startLoopRookYAdd1 #end loooooop

0584 : 00001000000000000000001001001001; --     j endLoopRookYAdd1

0585 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0586 : 00101010000100011111111111111111; --     addi $8, $8, -1

0587 : 00001000000000000000001001001100; --     j startLoopRookYSub1

0588 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0589 : 00010010010000000000000000000001; --     bne $9, $0, 1

0590 : 00001000000000000000001001011111; --     j endLoopRookYSub1

0591 : 00000010100100000000000110010000; --     sll $10, $8, 3

0592 : 00000010100101000111000000000000; --     add $10, $10, $7

0593 : 01000010110101000000000000000000; --     lw $11, 0($10)

0594 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0595 : 00000011010101101100000000001000; --     and $13, $11, $12

0596 : 00000010110101101101000000000100; --     sub $11, $11, $13

0597 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0598 : 00111010110101000000000000000000; --     sw $11, 0($10)

0599 : 00111010100011000000000000000000; --     sw $10, 0($6)

0600 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0601 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0602 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0603 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0604 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0605 : 00001000000000000000001001001100; --     j startLoopRookYSub1 #end loooooop

0606 : 00001000000000000000001001011111; --     j endLoopRookYSub1

0607 : 00001000000000000000000000000000; --     j 0

0608 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0609 : 00101001110011100000000000000001; --     addi $7, $7, 1

0610 : 00101010000100000000000000000010; --     addi $8, $8, 2

0611 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0612 : 00101100110000000000000000000001; --     addi $19, $0, 1

0613 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0614 : 00000010100100000000000110010000; --     sll $10, $8, 3

0615 : 00000010100101000111000000000000; --     add $10, $10, $7

0616 : 01000010110101000000000000000000; --     lw $11, 0($10)

0617 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0618 : 00000011010101101100000000001000; --     and $13, $11, $12

0619 : 00000010110101101101000000000100; --     sub $11, $11, $13

0620 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0621 : 00111010110101000000000000000000; --     sw $11, 0($10)

0622 : 00111010100000000000000001100100; --     sw $10, 100($0)

0623 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0624 : 00101001110011100000000000000001; --     addi $7, $7, 1

0625 : 00101010000100011111111111111110; --     addi $8, $8, -2

0626 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0627 : 00101100110000000000000000000001; --     addi $19, $0, 1

0628 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0629 : 00000010100100000000000110010000; --     sll $10, $8, 3

0630 : 00000010100101000111000000000000; --     add $10, $10, $7

0631 : 01000010110101000000000000000000; --     lw $11, 0($10)

0632 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0633 : 00000011010101101100000000001000; --     and $13, $11, $12

0634 : 00000010110101101101000000000100; --     sub $11, $11, $13

0635 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0636 : 00111010110101000000000000000000; --     sw $11, 0($10)

0637 : 00111010100000000000000001100101; --     sw $10, 101($0)

0638 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0639 : 00101001110011111111111111111111; --     addi $7, $7, -1

0640 : 00101010000100000000000000000010; --     addi $8, $8, 2

0641 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0642 : 00101100110000000000000000000001; --     addi $19, $0, 1

0643 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0644 : 00000010100100000000000110010000; --     sll $10, $8, 3

0645 : 00000010100101000111000000000000; --     add $10, $10, $7

0646 : 01000010110101000000000000000000; --     lw $11, 0($10)

0647 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0648 : 00000011010101101100000000001000; --     and $13, $11, $12

0649 : 00000010110101101101000000000100; --     sub $11, $11, $13

0650 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0651 : 00111010110101000000000000000000; --     sw $11, 0($10)

0652 : 00111010100000000000000001100110; --     sw $10, 102($0)

0653 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0654 : 00101001110011111111111111111111; --     addi $7, $7, -1

0655 : 00101010000100011111111111111110; --     addi $8, $8, -2

0656 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0657 : 00101100110000000000000000000001; --     addi $19, $0, 1

0658 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0659 : 00000010100100000000000110010000; --     sll $10, $8, 3

0660 : 00000010100101000111000000000000; --     add $10, $10, $7

0661 : 01000010110101000000000000000000; --     lw $11, 0($10)

0662 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0663 : 00000011010101101100000000001000; --     and $13, $11, $12

0664 : 00000010110101101101000000000100; --     sub $11, $11, $13

0665 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0666 : 00111010110101000000000000000000; --     sw $11, 0($10)

0667 : 00111010100000000000000001100111; --     sw $10, 103($0)

0668 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0669 : 00101001110011100000000000000010; --     addi $7, $7, 2

0670 : 00101010000100000000000000000001; --     addi $8, $8, 1

0671 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0672 : 00101100110000000000000000000001; --     addi $19, $0, 1

0673 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0674 : 00000010100100000000000110010000; --     sll $10, $8, 3

0675 : 00000010100101000111000000000000; --     add $10, $10, $7

0676 : 01000010110101000000000000000000; --     lw $11, 0($10)

0677 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0678 : 00000011010101101100000000001000; --     and $13, $11, $12

0679 : 00000010110101101101000000000100; --     sub $11, $11, $13

0680 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0681 : 00111010110101000000000000000000; --     sw $11, 0($10)

0682 : 00111010100000000000000001101000; --     sw $10, 104($0)

0683 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0684 : 00101001110011100000000000000010; --     addi $7, $7, 2

0685 : 00101010000100011111111111111111; --     addi $8, $8, -1

0686 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0687 : 00101100110000000000000000000001; --     addi $19, $0, 1

0688 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0689 : 00000010100100000000000110010000; --     sll $10, $8, 3

0690 : 00000010100101000111000000000000; --     add $10, $10, $7

0691 : 01000010110101000000000000000000; --     lw $11, 0($10)

0692 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0693 : 00000011010101101100000000001000; --     and $13, $11, $12

0694 : 00000010110101101101000000000100; --     sub $11, $11, $13

0695 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0696 : 00111010110101000000000000000000; --     sw $11, 0($10)

0697 : 00111010100000000000000001101001; --     sw $10, 105($0)

0698 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0699 : 00101001110011111111111111111110; --     addi $7, $7, -2

0700 : 00101010000100000000000000000001; --     addi $8, $8, 1

0701 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0702 : 00101100110000000000000000000001; --     addi $19, $0, 1

0703 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0704 : 00000010100100000000000110010000; --     sll $10, $8, 3

0705 : 00000010100101000111000000000000; --     add $10, $10, $7

0706 : 01000010110101000000000000000000; --     lw $11, 0($10)

0707 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0708 : 00000011010101101100000000001000; --     and $13, $11, $12

0709 : 00000010110101101101000000000100; --     sub $11, $11, $13

0710 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0711 : 00111010110101000000000000000000; --     sw $11, 0($10)

0712 : 00111010100000000000000001101010; --     sw $10, 106($0)

0713 : 00011000000000000000001011011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0714 : 00101001110011111111111111111110; --     addi $7, $7, -2

0715 : 00101010000100011111111111111111; --     addi $8, $8, -1

0716 : 00011000000000000000001011011111; --     jal validateDestination #writes to $9 if valid move

0717 : 00101100110000000000000000000001; --     addi $19, $0, 1

0718 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0719 : 00000010100100000000000110010000; --     sll $10, $8, 3

0720 : 00000010100101000111000000000000; --     add $10, $10, $7

0721 : 01000010110101000000000000000000; --     lw $11, 0($10)

0722 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0723 : 00000011010101101100000000001000; --     and $13, $11, $12

0724 : 00000010110101101101000000000100; --     sub $11, $11, $13

0725 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0726 : 00111010110101000000000000000000; --     sw $11, 0($10)

0727 : 00111010100000000000000001101011; --     sw $10, 107($0)

0728 : 00001000000000000000000000000000; --     j 0

0729 : 00101011000000000000000000000111; --     addi $12, $0, 7 #lsb x mask 000111

0730 : 00101011010000000000000000111000; --     addi $13, $0, 56 #lsb y mask 111000

0731 : 00000001110000101100000000001000; --     and $7, $1, $12

0732 : 00000010000000101101000000001000; --     and $8, $1, $13

0733 : 00000010000100000000000110010100; --     sra $8, $8, 3

0734 : 00100111110000000000000000000000; --     jr $31

0735 : 00101010100000000000000000000001; --     addi $10 $0 1

0736 : 00110001110000000000000000000001; --     blt $7 $0 1

0737 : 00010000000101000000000000000010; --     bne $0 $10 2

0738 : 00101010010000000000000000000000; --     addi $9 $0 0

0739 : 00100111110000000000000000000000; --     jr $31

0740 : 00101010100000000000000000000111; --     addi $10 $0 7

0741 : 00110010100011100000000000000001; --     blt $10 $7 1

0742 : 00010000000101000000000000000010; --     bne $0 $10 2

0743 : 00101010010000000000000000000000; --     addi $9 $0 0

0744 : 00100111110000000000000000000000; --     jr $31

0745 : 00101010100000000000000000000001; --     addi $10 $0 1

0746 : 00110010000000000000000000000001; --     blt $8 $0 1

0747 : 00010000000101000000000000000010; --     bne $0 $10 2

0748 : 00101010010000000000000000000000; --     addi $9 $0 0

0749 : 00100111110000000000000000000000; --     jr $31

0750 : 00101010100000000000000000000111; --     addi $10 $0 7

0751 : 00110010100100000000000000000001; --     blt $10 $8 1

0752 : 00010000000101000000000000000010; --     bne $0 $10 2

0753 : 00101010010000000000000000000000; --     addi $9 $0 0

0754 : 00100111110000000000000000000000; --     jr $31

0755 : 00101010100000000000000000000001; --     addi $10, $0, 1

0756 : 00000010110101011110000000001000; --     and $11, $10, $30

0757 : 00000011000100000000000110010000; --     sll $12 $8 3

0758 : 00000011000110000111000000000000; --     add $12 $12 $7

0759 : 01000011010110000000000000000000; --     lw $13 0($12)

0760 : 00101011110000000000000000001110; --     addi $15 $0 14 #piece mask

0761 : 00000011100110101111000000001000; --     and $14 $13 $15

0762 : 00010011100000000000000000000010; --     bne $14 $0 2

0763 : 00101010010000000000000000000001; --     addi $9 $0 1

0764 : 00100111110000000000000000000000; --     jr $31

0765 : 00000011100110101010000000001000; --     and $14 $13 $10

0766 : 00010011100101100000000000000010; --     bne $14, $11, 2

0767 : 00101010010000000000000000000000; --     addi $9 $0 0

0768 : 00100111110000000000000000000000; --     jr $31

0769 : 00101010010000000000000000000001; --     addi $9 $0 1

0770 : 00100111110000000000000000000000; --     jr $31

0771 : 01000010100000000000000001100100; --     lw $10 100($0)

0772 : 00010010100001000000000000000001; --     bne $10, $2, 1

0773 : 00001000000000000000001110110001; --     j handle_valid

0774 : 01000010100000000000000001100101; --     lw $10 101($0)

0775 : 00010010100001000000000000000001; --     bne $10, $2, 1

0776 : 00001000000000000000001110110001; --     j handle_valid

0777 : 01000010100000000000000001100110; --     lw $10 102($0)

0778 : 00010010100001000000000000000001; --     bne $10, $2, 1

0779 : 00001000000000000000001110110001; --     j handle_valid

0780 : 01000010100000000000000001100111; --     lw $10 103($0)

0781 : 00010010100001000000000000000001; --     bne $10, $2, 1

0782 : 00001000000000000000001110110001; --     j handle_valid

0783 : 01000010100000000000000001101000; --     lw $10 104($0)

0784 : 00010010100001000000000000000001; --     bne $10, $2, 1

0785 : 00001000000000000000001110110001; --     j handle_valid

0786 : 01000010100000000000000001101001; --     lw $10 105($0)

0787 : 00010010100001000000000000000001; --     bne $10, $2, 1

0788 : 00001000000000000000001110110001; --     j handle_valid

0789 : 01000010100000000000000001101010; --     lw $10 106($0)

0790 : 00010010100001000000000000000001; --     bne $10, $2, 1

0791 : 00001000000000000000001110110001; --     j handle_valid

0792 : 01000010100000000000000001101011; --     lw $10 107($0)

0793 : 00010010100001000000000000000001; --     bne $10, $2, 1

0794 : 00001000000000000000001110110001; --     j handle_valid

0795 : 01000010100000000000000001101100; --     lw $10 108($0)

0796 : 00010010100001000000000000000001; --     bne $10, $2, 1

0797 : 00001000000000000000001110110001; --     j handle_valid

0798 : 01000010100000000000000001101101; --     lw $10 109($0)

0799 : 00010010100001000000000000000001; --     bne $10, $2, 1

0800 : 00001000000000000000001110110001; --     j handle_valid

0801 : 01000010100000000000000001101110; --     lw $10 110($0)

0802 : 00010010100001000000000000000001; --     bne $10, $2, 1

0803 : 00001000000000000000001110110001; --     j handle_valid

0804 : 01000010100000000000000001101111; --     lw $10 111($0)

0805 : 00010010100001000000000000000001; --     bne $10, $2, 1

0806 : 00001000000000000000001110110001; --     j handle_valid

0807 : 01000010100000000000000001110000; --     lw $10 112($0)

0808 : 00010010100001000000000000000001; --     bne $10, $2, 1

0809 : 00001000000000000000001110110001; --     j handle_valid

0810 : 01000010100000000000000001110001; --     lw $10 113($0)

0811 : 00010010100001000000000000000001; --     bne $10, $2, 1

0812 : 00001000000000000000001110110001; --     j handle_valid

0813 : 01000010100000000000000001110010; --     lw $10 114($0)

0814 : 00010010100001000000000000000001; --     bne $10, $2, 1

0815 : 00001000000000000000001110110001; --     j handle_valid

0816 : 01000010100000000000000001110011; --     lw $10 115($0)

0817 : 00010010100001000000000000000001; --     bne $10, $2, 1

0818 : 00001000000000000000001110110001; --     j handle_valid

0819 : 01000010100000000000000001110100; --     lw $10 116($0)

0820 : 00010010100001000000000000000001; --     bne $10, $2, 1

0821 : 00001000000000000000001110110001; --     j handle_valid

0822 : 01000010100000000000000001110101; --     lw $10 117($0)

0823 : 00010010100001000000000000000001; --     bne $10, $2, 1

0824 : 00001000000000000000001110110001; --     j handle_valid

0825 : 01000010100000000000000001110110; --     lw $10 118($0)

0826 : 00010010100001000000000000000001; --     bne $10, $2, 1

0827 : 00001000000000000000001110110001; --     j handle_valid

0828 : 01000010100000000000000001110111; --     lw $10 119($0)

0829 : 00010010100001000000000000000001; --     bne $10, $2, 1

0830 : 00001000000000000000001110110001; --     j handle_valid

0831 : 01000010100000000000000001111000; --     lw $10 120($0)

0832 : 00010010100001000000000000000001; --     bne $10, $2, 1

0833 : 00001000000000000000001110110001; --     j handle_valid

0834 : 01000010100000000000000001111001; --     lw $10 121($0)

0835 : 00010010100001000000000000000001; --     bne $10, $2, 1

0836 : 00001000000000000000001110110001; --     j handle_valid

0837 : 01000010100000000000000001111010; --     lw $10 122($0)

0838 : 00010010100001000000000000000001; --     bne $10, $2, 1

0839 : 00001000000000000000001110110001; --     j handle_valid

0840 : 01000010100000000000000001111011; --     lw $10 123($0)

0841 : 00010010100001000000000000000001; --     bne $10, $2, 1

0842 : 00001000000000000000001110110001; --     j handle_valid

0843 : 01000010100000000000000001111100; --     lw $10 124($0)

0844 : 00010010100001000000000000000001; --     bne $10, $2, 1

0845 : 00001000000000000000001110110001; --     j handle_valid

0846 : 01000010100000000000000001111101; --     lw $10 125($0)

0847 : 00010010100001000000000000000001; --     bne $10, $2, 1

0848 : 00001000000000000000001110110001; --     j handle_valid

0849 : 01000010100000000000000001111110; --     lw $10 126($0)

0850 : 00010010100001000000000000000001; --     bne $10, $2, 1

0851 : 00001000000000000000001110110001; --     j handle_valid

0852 : 01000010100000000000000001111111; --     lw $10 127($0)

0853 : 00010010100001000000000000000001; --     bne $10, $2, 1

0854 : 00001000000000000000001110110001; --     j handle_valid

0855 : 00001000000000000000001101011000; --     j restoreColors

0856 : 00101010100000000000000000000000; --     addi $10, $0, 0 #iterator i

0857 : 00101010110000000000000001000000; --     addi $11, $0, 64 #upper loop bound

0858 : 00101011000000000000000000000001; --     addi $12, $0, 1 #lsb x mask 0001

0859 : 00101011010000000000000000001000; --     addi $13, $0, 8 #lsb y mask 1000

0860 : 00101011100000000000000011110000; --     addi $14, $0, 240 #square color mask 11110000

0861 : 00001000000000000000001101011110; --     j startLoopRestoreColors

0862 : 00010010100101100000000000000001; --     bne $10, $11, 1

0863 : 00001000000000000000001101101110; --     j endLoopRestoreColors

0864 : 01000011110101000000000000000000; --     lw $15, 0($10)

0865 : 00000100000111001111000000001000; --     and $16, $14, $15

0866 : 00000011110111110000000000000100; --     sub $15, $15, $16

0867 : 00000100010101001100000000001000; --     and $17, $10, $12

0868 : 00000100100101001101000000001000; --     and $18, $10, $13

0869 : 00000100101001000000000110010100; --     sra $18, $18, 3

0870 : 00000100111000110010000000000100; --     sub $19, $17, $18

0871 : 00010100110000000000000000000010; --     bne $19, $0, 2

0872 : 00101011110111100000000010000000; --     addi $15, $15, 128 #10000000

0873 : 00010011000000000000000000000001; --     bne $12, $0, 1 #just to skip running the write white sq part

0874 : 00101011110111100000000001000000; --     addi $15, $15, 64 #01000000

0875 : 00111011110101000000000000000000; --     sw $15, 0($10)

0876 : 00101010100101000000000000000001; --     addi $10, $10, 1 #i = i + 1

0877 : 00001000000000000000001101011110; --     j startLoopRestoreColors #end loooooop

0878 : 00101000010000000000000000000000; --     addi $1, $0, 0

0879 : 00101000100000000000000000000000; --     addi $2, $0, 0

0880 : 00101000110000000000000000000000; --     addi $3, $0, 0

0881 : 00101001000000000000000000000000; --     addi $4, $0, 0

0882 : 00101001010000000000000000000000; --     addi $5, $0, 0

0883 : 00101001100000000000000000000000; --     addi $6, $0, 0

0884 : 00101001110000000000000000000000; --     addi $7, $0, 0

0885 : 00101010000000000000000000000000; --     addi $8, $0, 0

0886 : 00101010010000000000000000000000; --     addi $9, $0, 0

0887 : 00101010100000000000000000000000; --     addi $10, $0, 0

0888 : 00101010110000000000000000000000; --     addi $11, $0, 0

0889 : 00101011000000000000000000000000; --     addi $12, $0, 0

0890 : 00101011010000000000000000000000; --     addi $13, $0, 0

0891 : 00101011100000000000000000000000; --     addi $14, $0, 0

0892 : 00101011110000000000000000000000; --     addi $15, $0, 0

0893 : 00101100000000000000000000000000; --     addi $16, $0, 0

0894 : 00101100010000000000000000000000; --     addi $17, $0, 0

0895 : 00101100100000000000000000000000; --     addi $18, $0, 0

0896 : 00101100110000000000000000000000; --     addi $19, $0, 0

0897 : 00101101000000000000000000000000; --     addi $20, $0, 0

0898 : 00101101010000000000000000000000; --     addi $21, $0, 0

0899 : 00101101100000000000000000000000; --     addi $22, $0, 0

0900 : 00101101110000000000000000000000; --     addi $23, $0, 0

0901 : 00101110000000000000000000000000; --     addi $24, $0, 0

0902 : 00101110010000000000000000000000; --     addi $25, $0, 0

0903 : 00101110100000000000000000000000; --     addi $26, $0, 0

0904 : 00101110110000000000000000000000; --     addi $27, $0, 0

0905 : 00101111000000000000000000000000; --     addi $28, $0, 0

0906 : 00101111010000000000000000000000; --     addi $29, $0, 0

0907 : 00101111100000000000000000000000; --     addi $30, $0, 0

0908 : 00101010100000011111111111111111; --     addi $10, $0, -1

0909 : 00111010100000000000000001000000; --     sw $10, 64($0)

0910 : 00111010100000000000000001000001; --     sw $10, 65($0)

0911 : 00101010100000011111111111111111; --     addi $10, $0, -1

0912 : 00111010100000000000000001100100; --     sw $10, 100($0)

0913 : 00111010100000000000000001100101; --     sw $10, 101($0)

0914 : 00111010100000000000000001100110; --     sw $10, 102($0)

0915 : 00111010100000000000000001100111; --     sw $10, 103($0)

0916 : 00111010100000000000000001101000; --     sw $10, 104($0)

0917 : 00111010100000000000000001101001; --     sw $10, 105($0)

0918 : 00111010100000000000000001101010; --     sw $10, 106($0)

0919 : 00111010100000000000000001101011; --     sw $10, 107($0)

0920 : 00111010100000000000000001101100; --     sw $10, 108($0)

0921 : 00111010100000000000000001101101; --     sw $10, 109($0)

0922 : 00111010100000000000000001101110; --     sw $10, 110($0)

0923 : 00111010100000000000000001101111; --     sw $10, 111($0)

0924 : 00111010100000000000000001110000; --     sw $10, 112($0)

0925 : 00111010100000000000000001110001; --     sw $10, 113($0)

0926 : 00111010100000000000000001110010; --     sw $10, 114($0)

0927 : 00111010100000000000000001110011; --     sw $10, 115($0)

0928 : 00111010100000000000000001110100; --     sw $10, 116($0)

0929 : 00111010100000000000000001110101; --     sw $10, 117($0)

0930 : 00111010100000000000000001110110; --     sw $10, 118($0)

0931 : 00111010100000000000000001110111; --     sw $10, 119($0)

0932 : 00111010100000000000000001111000; --     sw $10, 120($0)

0933 : 00111010100000000000000001111001; --     sw $10, 121($0)

0934 : 00111010100000000000000001111010; --     sw $10, 122($0)

0935 : 00111010100000000000000001111011; --     sw $10, 123($0)

0936 : 00111010100000000000000001111100; --     sw $10, 124($0)

0937 : 00111010100000000000000001111101; --     sw $10, 125($0)

0938 : 00111010100000000000000001111110; --     sw $10, 126($0)

0939 : 00111010100000000000000001111111; --     sw $10, 127($0)

0940 : 00111010100000000000000010000000; --     sw $10, 128($0)

0941 : 00111010100000000000000010000001; --     sw $10, 129($0)

0942 : 00111010100000000000000010000010; --     sw $10, 130($0)

0943 : 00111010100000000000000010000011; --     sw $10, 131($0)

0944 : 00001000000000000000000000000000; --     j 0

0945 : 00111000110001000000000000000000; --     sw $3, 0($2)

0946 : 00111000000000100000000000000000; --     sw $0, 0($1)

0947 : 00101010100000000000000000000001; --     addi $10 $0 1

0948 : 00000010110101011110000000001000; --     and $11, $10, $30

0949 : 00010010110000000000000000000010; --     bne $11, $0, 2

0950 : 00111010100000000000000001000010; --     sw $10, 66($0)

0951 : 00010010100000000000000000000001; --     bne $10, $0, 1

0952 : 00111000000000000000000001000010; --     sw $0, 66($0)

0953 : 00001000000000000000001101011000; --     j restoreColors

0954 : 00100111110000000000000000000000; --     jr $31

[0955..4095] : 00000000000000000000000000000000;
END;
