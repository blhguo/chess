DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00000000000000000000000000000000; -- nop

0001 : 00000000000000000000000000000000; -- nop

0002 : 00000000000000000000000000000000; -- nop

0003 : 00000000000000000000000000000000; -- nop

0004 : 00000000000000000000000000000000; -- nop

0005 : 00000000000000000000000000000000; -- nop

0006 : 00000000000000000000000000000000; -- nop

0007 : 00000000000000000000000000000000; -- nop

0008 : 00000000000000000000000000000000; -- nop

0009 : 01000000010000000000000001000000; -- lw $1, 64($0)

0010 : 01000000100000000000000001000001; -- lw $2, 65($0)

0011 : 00101010100000011111111111111111; -- addi $10 $0, -1

0012 : 00010000100101000000000000000001; -- bne $2, $10, 1

0013 : 00010010100000000000000000000001; -- bne $10, $0, 1

0014 : 00101010100000011111111111111111; -- addi $10 $0 -1

0015 : 00010010100000100000000000000100; -- bne $10, $1, 4

0016 : 00101010100000011111111111111111; -- addi $10, $0, -1

0017 : 00111010100000000000000001000000; -- sw $10, 64($0)

0018 : 00111010100000000000000001000001; -- sw $10, 65($0)

0019 : 00001000000000000000000000000000; -- j 0

0020 : 00010000100101000000000000000010; -- bne $2, $10, 2

0021 : 00101101000000000000000000000001; -- addi $20, $0, 1

0022 : 00010000001010000000000000000001; -- bne $0, $20, 1

0023 : 00101101000000000000000000000000; -- addi $20, $0, 0

0024 : 01000111100000000000000001000010; -- lw $30, 66($0)

0025 : 01000000110000100000000000000000; -- lw $3, 0($1)

0026 : 00101010100000000000000000001110; -- addi $10 $0 14

0027 : 00000010110101000011000000001000; -- and $11, $10, $3

0028 : 00010010110000000000000000000100; -- bne $11, $0, 4

0029 : 00101010100000011111111111111111; -- addi $10, $0, -1

0030 : 00111010100000000000000001000000; -- sw $10, 64($0)

0031 : 00111010100000000000000001000001; -- sw $10, 65($0)

0032 : 00001000000000000000000000000000; -- j 0

0033 : 00101010100000000000000000000001; -- addi $10 $0 1

0034 : 00000011000101000011000000001000; -- and $12, $10, $3

0035 : 00000011010101011110000000001000; -- and $13, $10, $30

0036 : 00010011000110100000000000000001; -- bne $12, $13, 1

0037 : 00010010100000000000000000000100; -- bne $10, $0, 4

0038 : 00101010100000011111111111111111; -- addi $10, $0, -1

0039 : 00111010100000000000000001000000; -- sw $10, 64($0)

0040 : 00111010100000000000000001000001; -- sw $10, 65($0)

0041 : 00001000000000000000000000000000; -- j 0

0042 : 00010101000000000000000000000001; -- bne $20 $0 1

0043 : 00001000000000000000000000111010; -- j handle2Valid

0044 : 00001000000000000000000000111100; -- j handle2InValid

0045 : 00001000000000000000000000000000; -- j 0

0046 : 00101100100000000000000001001001; --     addi $18, $0, 73

0047 : 00101100010000000000000000100100; --     addi $17, $0, 36

0048 : 00111100101000100000000000000000; --     sw $18, 0($17)

0049 : 00100111110000000000000000000000; --     jr $31

0050 : 00101100100000000000000001001001; --     addi $18, $0, 73

0051 : 00101100010000000000000000100101; --     addi $17, $0, 37

0052 : 00111100101000100000000000000000; --     sw $18, 0($17)

0053 : 00100111110000000000000000000000; --     jr $31

0054 : 00101100100000000000000001001001; --     addi $18, $0, 73

0055 : 00101100010000000000000000100110; --     addi $17, $0, 38

0056 : 00111100101000100000000000000000; --     sw $18, 0($17)

0057 : 00100111110000000000000000000000; --     jr $31

0058 : 01000001000001000000000000000000; --     lw $4, 0($2)

0059 : 00001000000000000000001111000011; --     j move

0060 : 00101010100000000000000000001110; --     addi $10 $0 14

0061 : 00000010110101000011000000001000; --     and $11, $10, $3

0062 : 00000010110101100000000010010100; --     sra $11, $11, 1

0063 : 00101010100000011111111111111111; --     addi $10, $0, -1

0064 : 00111010100000000000000001100100; --     sw $10, 100($0)

0065 : 00111010100000000000000001100101; --     sw $10, 101($0)

0066 : 00111010100000000000000001100110; --     sw $10, 102($0)

0067 : 00111010100000000000000001100111; --     sw $10, 103($0)

0068 : 00111010100000000000000001101000; --     sw $10, 104($0)

0069 : 00111010100000000000000001101001; --     sw $10, 105($0)

0070 : 00111010100000000000000001101010; --     sw $10, 106($0)

0071 : 00111010100000000000000001101011; --     sw $10, 107($0)

0072 : 00111010100000000000000001101100; --     sw $10, 108($0)

0073 : 00111010100000000000000001101101; --     sw $10, 109($0)

0074 : 00111010100000000000000001101110; --     sw $10, 110($0)

0075 : 00111010100000000000000001101111; --     sw $10, 111($0)

0076 : 00111010100000000000000001110000; --     sw $10, 112($0)

0077 : 00111010100000000000000001110001; --     sw $10, 113($0)

0078 : 00111010100000000000000001110010; --     sw $10, 114($0)

0079 : 00111010100000000000000001110011; --     sw $10, 115($0)

0080 : 00111010100000000000000001110100; --     sw $10, 116($0)

0081 : 00111010100000000000000001110101; --     sw $10, 117($0)

0082 : 00111010100000000000000001110110; --     sw $10, 118($0)

0083 : 00111010100000000000000001110111; --     sw $10, 119($0)

0084 : 00111010100000000000000001111000; --     sw $10, 120($0)

0085 : 00111010100000000000000001111001; --     sw $10, 121($0)

0086 : 00111010100000000000000001111010; --     sw $10, 122($0)

0087 : 00111010100000000000000001111011; --     sw $10, 123($0)

0088 : 00111010100000000000000001111100; --     sw $10, 124($0)

0089 : 00111010100000000000000001111101; --     sw $10, 125($0)

0090 : 00111010100000000000000001111110; --     sw $10, 126($0)

0091 : 00111010100000000000000001111111; --     sw $10, 127($0)

0092 : 00111010100000000000000010000000; --     sw $10, 128($0)

0093 : 00111010100000000000000010000001; --     sw $10, 129($0)

0094 : 00111010100000000000000010000010; --     sw $10, 130($0)

0095 : 00111010100000000000000010000011; --     sw $10, 131($0)

0096 : 00101010100000000000000000000001; --     addi $10 $0 1

0097 : 00010010110101000000000000000001; --     bne $11 $10 1

0098 : 00001000000000000000001100100000; --     j handleKnight

0099 : 00101010100000000000000000000010; --     addi $10 $0 2

0100 : 00010010110101000000000000000001; --     bne $11 $10 1

0101 : 00001000000000000000000111101111; --     j handleKing

0102 : 00101010100000000000000000000011; --     addi $10 $0 3

0103 : 00010010110101000000000000000001; --     bne $11 $10 1

0104 : 00001000000000000000000001110011; --     j handleQueen

0105 : 00101010100000000000000000000100; --     addi $10 $0 4

0106 : 00010010110101000000000000000001; --     bne $11 $10 1

0107 : 00001000000000000000001001100100; --     j handleBishop

0108 : 00101010100000000000000000000101; --     addi $10 $0 5

0109 : 00010010110101000000000000000001; --     bne $11 $10 1

0110 : 00001000000000000000001011000110; --     j handleRook

0111 : 00101010100000000000000000000110; --     addi $10 $0 6

0112 : 00010010110101000000000000000001; --     bne $11 $10 1

0113 : 00001000000000000000000100110000; --     j handlePawn

0114 : 00001000000000000000000000000000; --     j 0

0115 : 00001000000000000000000001110100; --     j handleQueenDiag

0116 : 00101001100000000000000001100100; --     addi $6, $0, 100

0117 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0118 : 00101001110011100000000000000001; --     addi $7, $7, 1

0119 : 00101010000100000000000000000001; --     addi $8, $8, 1

0120 : 00001000000000000000000001111001; --     j startLoopQueenXAdd1YAdd1

0121 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0122 : 00010010010000000000000000000001; --     bne $9, $0, 1

0123 : 00001000000000000000000010001101; --     j endLoopQueenXAdd1YAdd1

0124 : 00000010100100000000000110010000; --     sll $10, $8, 3

0125 : 00000010100101000111000000000000; --     add $10, $10, $7

0126 : 01000010110101000000000000000000; --     lw $11, 0($10)

0127 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0128 : 00000011010101101100000000001000; --     and $13, $11, $12

0129 : 00000010110101101101000000000100; --     sub $11, $11, $13

0130 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0131 : 00111010110101000000000000000000; --     sw $11, 0($10)

0132 : 00111010100011000000000000000000; --     sw $10, 0($6)

0133 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0134 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0135 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0136 : 00010011000000000000000000000011; --     bne $12, $0, 3

0137 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0138 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0139 : 00001000000000000000000001111001; --     j startLoopQueenXAdd1YAdd1 #end loooooop

0140 : 00001000000000000000000010001101; --     j endLoopQueenXAdd1YAdd1

0141 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0142 : 00101001110011100000000000000001; --     addi $7, $7, 1

0143 : 00101010000100011111111111111111; --     addi $8, $8, -1

0144 : 00001000000000000000000010010001; --     j startLoopQueenXAdd1YSub1

0145 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0146 : 00010010010000000000000000000001; --     bne $9, $0, 1

0147 : 00001000000000000000000010100101; --     j endLoopQueenXAdd1YSub1

0148 : 00000010100100000000000110010000; --     sll $10, $8, 3

0149 : 00000010100101000111000000000000; --     add $10, $10, $7

0150 : 01000010110101000000000000000000; --     lw $11, 0($10)

0151 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0152 : 00000011010101101100000000001000; --     and $13, $11, $12

0153 : 00000010110101101101000000000100; --     sub $11, $11, $13

0154 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0155 : 00111010110101000000000000000000; --     sw $11, 0($10)

0156 : 00111010100011000000000000000000; --     sw $10, 0($6)

0157 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0158 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0159 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0160 : 00010011000000000000000000000011; --     bne $12, $0, 3

0161 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0162 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0163 : 00001000000000000000000010010001; --     j startLoopQueenXAdd1YSub1 #end loooooop

0164 : 00001000000000000000000010100101; --     j endLoopQueenXAdd1YSub1

0165 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0166 : 00101001110011111111111111111111; --     addi $7, $7, -1

0167 : 00101010000100000000000000000001; --     addi $8, $8, 1

0168 : 00001000000000000000000010101001; --     j startLoopQueenXSub1YAdd1

0169 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0170 : 00010010010000000000000000000001; --     bne $9, $0, 1

0171 : 00001000000000000000000010111101; --     j endLoopQueenXSub1YAdd1

0172 : 00000010100100000000000110010000; --     sll $10, $8, 3

0173 : 00000010100101000111000000000000; --     add $10, $10, $7

0174 : 01000010110101000000000000000000; --     lw $11, 0($10)

0175 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0176 : 00000011010101101100000000001000; --     and $13, $11, $12

0177 : 00000010110101101101000000000100; --     sub $11, $11, $13

0178 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0179 : 00111010110101000000000000000000; --     sw $11, 0($10)

0180 : 00111010100011000000000000000000; --     sw $10, 0($6)

0181 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0182 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0183 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0184 : 00010011000000000000000000000011; --     bne $12, $0, 3

0185 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0186 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0187 : 00001000000000000000000010101001; --     j startLoopQueenXSub1YAdd1 #end loooooop

0188 : 00001000000000000000000010111101; --     j endLoopQueenXSub1YAdd1

0189 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0190 : 00101001110011111111111111111111; --     addi $7, $7, -1

0191 : 00101010000100011111111111111111; --     addi $8, $8, -1

0192 : 00001000000000000000000011000001; --     j startLoopQueenXSub1YSub1

0193 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0194 : 00010010010000000000000000000001; --     bne $9, $0, 1

0195 : 00001000000000000000000011010101; --     j endLoopQueenXSub1YSub1

0196 : 00000010100100000000000110010000; --     sll $10, $8, 3

0197 : 00000010100101000111000000000000; --     add $10, $10, $7

0198 : 01000010110101000000000000000000; --     lw $11, 0($10)

0199 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0200 : 00000011010101101100000000001000; --     and $13, $11, $12

0201 : 00000010110101101101000000000100; --     sub $11, $11, $13

0202 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0203 : 00111010110101000000000000000000; --     sw $11, 0($10)

0204 : 00111010100011000000000000000000; --     sw $10, 0($6)

0205 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0206 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0207 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0208 : 00010011000000000000000000000011; --     bne $12, $0, 3

0209 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0210 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0211 : 00001000000000000000000011000001; --     j startLoopQueenXSub1YSub1 #end loooooop

0212 : 00001000000000000000000011010101; --     j endLoopQueenXSub1YSub1

0213 : 00001000000000000000000011010110; --     j handleQueenStraight

0214 : 00101001100000000000000001110010; --     addi $6, $0, 114

0215 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0216 : 00101001110011100000000000000001; --     addi $7, $7, 1

0217 : 00001000000000000000000011011010; --     j startLoopQueenXAdd1

0218 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0219 : 00010010010000000000000000000001; --     bne $9, $0, 1

0220 : 00001000000000000000000011101101; --     j endLoopQueenXAdd1

0221 : 00000010100100000000000110010000; --     sll $10, $8, 3

0222 : 00000010100101000111000000000000; --     add $10, $10, $7

0223 : 01000010110101000000000000000000; --     lw $11, 0($10)

0224 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0225 : 00000011010101101100000000001000; --     and $13, $11, $12

0226 : 00000010110101101101000000000100; --     sub $11, $11, $13

0227 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0228 : 00111010110101000000000000000000; --     sw $11, 0($10)

0229 : 00111010100011000000000000000000; --     sw $10, 0($6)

0230 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0231 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0232 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0233 : 00010011000000000000000000000010; --     bne $12, $0, 2

0234 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0235 : 00001000000000000000000011011010; --     j startLoopQueenXAdd1 #end loooooop

0236 : 00001000000000000000000011101101; --     j endLoopQueenXAdd1

0237 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0238 : 00101001110011111111111111111111; --     addi $7, $7, -1

0239 : 00001000000000000000000011110000; --     j startLoopQueenXSub1

0240 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0241 : 00010010010000000000000000000001; --     bne $9, $0, 1

0242 : 00001000000000000000000100000011; --     j endLoopQueenXSub1

0243 : 00000010100100000000000110010000; --     sll $10, $8, 3

0244 : 00000010100101000111000000000000; --     add $10, $10, $7

0245 : 01000010110101000000000000000000; --     lw $11, 0($10)

0246 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0247 : 00000011010101101100000000001000; --     and $13, $11, $12

0248 : 00000010110101101101000000000100; --     sub $11, $11, $13

0249 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0250 : 00111010110101000000000000000000; --     sw $11, 0($10)

0251 : 00111010100011000000000000000000; --     sw $10, 0($6)

0252 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0253 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0254 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0255 : 00010011000000000000000000000010; --     bne $12, $0, 2

0256 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0257 : 00001000000000000000000011110000; --     j startLoopQueenXSub1 #end loooooop

0258 : 00001000000000000000000100000011; --     j endLoopQueenXSub1

0259 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0260 : 00101010000100000000000000000001; --     addi $8, $8, 1

0261 : 00001000000000000000000100000110; --     j startLoopQueenYAdd1

0262 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0263 : 00010010010000000000000000000001; --     bne $9, $0, 1

0264 : 00001000000000000000000100011001; --     j endLoopQueenYAdd1

0265 : 00000010100100000000000110010000; --     sll $10, $8, 3

0266 : 00000010100101000111000000000000; --     add $10, $10, $7

0267 : 01000010110101000000000000000000; --     lw $11, 0($10)

0268 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0269 : 00000011010101101100000000001000; --     and $13, $11, $12

0270 : 00000010110101101101000000000100; --     sub $11, $11, $13

0271 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0272 : 00111010110101000000000000000000; --     sw $11, 0($10)

0273 : 00111010100011000000000000000000; --     sw $10, 0($6)

0274 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0275 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0276 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0277 : 00010011000000000000000000000010; --     bne $12, $0, 2

0278 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0279 : 00001000000000000000000100000110; --     j startLoopQueenYAdd1 #end loooooop

0280 : 00001000000000000000000100011001; --     j endLoopQueenYAdd1

0281 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0282 : 00101010000100011111111111111111; --     addi $8, $8, -1

0283 : 00001000000000000000000100011100; --     j startLoopQueenYSub1

0284 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0285 : 00010010010000000000000000000001; --     bne $9, $0, 1

0286 : 00001000000000000000000100101111; --     j endLoopQueenYSub1

0287 : 00000010100100000000000110010000; --     sll $10, $8, 3

0288 : 00000010100101000111000000000000; --     add $10, $10, $7

0289 : 01000010110101000000000000000000; --     lw $11, 0($10)

0290 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0291 : 00000011010101101100000000001000; --     and $13, $11, $12

0292 : 00000010110101101101000000000100; --     sub $11, $11, $13

0293 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0294 : 00111010110101000000000000000000; --     sw $11, 0($10)

0295 : 00111010100011000000000000000000; --     sw $10, 0($6)

0296 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0297 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0298 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0299 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0300 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0301 : 00001000000000000000000100011100; --     j startLoopQueenYSub1 #end loooooop

0302 : 00001000000000000000000100101111; --     j endLoopQueenYSub1

0303 : 00001000000000000000000000000000; --     j 0

0304 : 00101010100000000000000000000001; --     addi $10, $0, 1

0305 : 00000010110101011110000000001000; --     and $11, $10, $30

0306 : 00010010110000000000000000000010; --     bne $11, $0, 2

0307 : 00011000000000000000000110010011; --     jal whitePawnCheck

0308 : 00001000000000000000000000000000; --     j 0

0309 : 00011000000000000000000100110111; --     jal blackPawnCheck

0310 : 00001000000000000000000000000000; --     j 0

0311 : 00001000000000000000000100111000; --     j blackPawnCheckSub1

0312 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0313 : 00101010000100011111111111111111; --     addi $8, $8, -1

0314 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0315 : 00010010010000000000000000000001; --     bne $9, $0, 1

0316 : 00001000000000000000000101100111; --     j blackPawnLeftDiagCheck

0317 : 00000010100100000000000110010000; --     sll $10, $8, 3

0318 : 00000010100101000111000000000000; --     add $10, $10, $7

0319 : 01000010110101000000000000000000; --     lw $11, 0($10)

0320 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0321 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0322 : 00010011000000000000000000000001; --     bne $12, $0, 1

0323 : 00010010100000000000000000000001; --     bne $10, $0, 1

0324 : 00001000000000000000000101100111; --     j blackPawnLeftDiagCheck

0325 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0326 : 00000011010101101100000000001000; --     and $13, $11, $12

0327 : 00000010110101101101000000000100; --     sub $11, $11, $13

0328 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0329 : 00000010100100000000000110010000; --     sll $10, $8, 3

0330 : 00000010100101000111000000000000; --     add $10, $10, $7

0331 : 00111010110101000000000000000000; --     sw $11, 0($10)

0332 : 00111010100000000000000001100100; --     sw $10, 100($0)

0333 : 00101010100000000000000000000101; --     addi $10, $0, 5

0334 : 00010010100100000000000000000001; --     bne $10, $8, 1

0335 : 00001000000000000000000101010001; --     j blackPawnYSub2Check

0336 : 00001000000000000000000101100111; --     j blackPawnLeftDiagCheck

0337 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0338 : 00101010000100011111111111111110; --     addi $8, $8, -2

0339 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0340 : 00010010010000000000000000000001; --     bne $9, $0, 1

0341 : 00001000000000000000000101100111; --     j blackPawnLeftDiagCheck

0342 : 00000010100100000000000110010000; --     sll $10, $8, 3

0343 : 00000010100101000111000000000000; --     add $10, $10, $7

0344 : 01000010110101000000000000000000; --     lw $11, 0($10)

0345 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0346 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0347 : 00010011000000000000000000000001; --     bne $12, $0, 1

0348 : 00010010100000000000000000000001; --     bne $10, $0, 1

0349 : 00001000000000000000000101100111; --     j blackPawnLeftDiagCheck

0350 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0351 : 00000011010101101100000000001000; --     and $13, $11, $12

0352 : 00000010110101101101000000000100; --     sub $11, $11, $13

0353 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0354 : 00000010100100000000000110010000; --     sll $10, $8, 3

0355 : 00000010100101000111000000000000; --     add $10, $10, $7

0356 : 00111010110101000000000000000000; --     sw $11, 0($10)

0357 : 00111010100000000000000001100101; --     sw $10, 101($0)

0358 : 00001000000000000000000101100111; --     j blackPawnLeftDiagCheck

0359 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0360 : 00101010000100011111111111111111; --     addi $8, $8, -1

0361 : 00101001110011111111111111111111; --     addi $7, $7, -1

0362 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0363 : 00010010010000000000000000000001; --     bne $9, $0, 1

0364 : 00001000000000000000000101111101; --     j blackPawnRightDiagCheck

0365 : 00000010100100000000000110010000; --     sll $10, $8, 3

0366 : 00000010100101000111000000000000; --     add $10, $10, $7

0367 : 01000010110101000000000000000000; --     lw $11, 0($10)

0368 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0369 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0370 : 00010011000000000000000000000001; --     bne $12, $0, 1

0371 : 00001000000000000000000101111101; --     j blackPawnRightDiagCheck

0372 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0373 : 00000011010101101100000000001000; --     and $13, $11, $12

0374 : 00000010110101101101000000000100; --     sub $11, $11, $13

0375 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0376 : 00000010100100000000000110010000; --     sll $10, $8, 3

0377 : 00000010100101000111000000000000; --     add $10, $10, $7

0378 : 00111010110101000000000000000000; --     sw $11, 0($10)

0379 : 00111010100000000000000001100110; --     sw $10, 102($0)

0380 : 00001000000000000000000101111101; --     j blackPawnRightDiagCheck

0381 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0382 : 00101010000100011111111111111111; --     addi $8, $8, -1

0383 : 00101001110011100000000000000001; --     addi $7, $7, 1

0384 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0385 : 00010010010000000000000000000001; --     bne $9, $0, 1

0386 : 00001000000000000000000000000000; --     j 0

0387 : 00000010100100000000000110010000; --     sll $10, $8, 3

0388 : 00000010100101000111000000000000; --     add $10, $10, $7

0389 : 01000010110101000000000000000000; --     lw $11, 0($10)

0390 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0391 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0392 : 00010011000000000000000000000001; --     bne $12, $0, 1

0393 : 00001000000000000000000000000000; --     j 0

0394 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0395 : 00000011010101101100000000001000; --     and $13, $11, $12

0396 : 00000010110101101101000000000100; --     sub $11, $11, $13

0397 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0398 : 00000010100100000000000110010000; --     sll $10, $8, 3

0399 : 00000010100101000111000000000000; --     add $10, $10, $7

0400 : 00111010110101000000000000000000; --     sw $11, 0($10)

0401 : 00111010100000000000000001100111; --     sw $10, 103($0)

0402 : 00001000000000000000000000000000; --     j 0

0403 : 00001000000000000000000110010100; --     j whitePawnYAdd1Check

0404 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0405 : 00101010000100000000000000000001; --     addi $8, $8, 1

0406 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0407 : 00010010010000000000000000000001; --     bne $9, $0, 1

0408 : 00001000000000000000000111000011; --     j whitePawnLeftDiagCheck

0409 : 00000010100100000000000110010000; --     sll $10, $8, 3

0410 : 00000010100101000111000000000000; --     add $10, $10, $7

0411 : 01000010110101000000000000000000; --     lw $11, 0($10)

0412 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0413 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0414 : 00010011000000000000000000000001; --     bne $12, $0, 1

0415 : 00010010100000000000000000000001; --     bne $10, $0, 1

0416 : 00001000000000000000000111000011; --     j whitePawnLeftDiagCheck

0417 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0418 : 00000011010101101100000000001000; --     and $13, $11, $12

0419 : 00000010110101101101000000000100; --     sub $11, $11, $13

0420 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0421 : 00000010100100000000000110010000; --     sll $10, $8, 3

0422 : 00000010100101000111000000000000; --     add $10, $10, $7

0423 : 00111010110101000000000000000000; --     sw $11, 0($10)

0424 : 00111010100000000000000001100100; --     sw $10, 100($0)

0425 : 00101010100000000000000000000010; --     addi $10, $0, 2

0426 : 00010010100100000000000000000001; --     bne $10, $8, 1

0427 : 00001000000000000000000110101101; --     j whitePawnYAdd2Check

0428 : 00001000000000000000000111000011; --     j whitePawnLeftDiagCheck

0429 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0430 : 00101010000100000000000000000010; --     addi $8, $8, 2

0431 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0432 : 00010010010000000000000000000001; --     bne $9, $0, 1

0433 : 00001000000000000000000111000011; --     j whitePawnLeftDiagCheck

0434 : 00000010100100000000000110010000; --     sll $10, $8, 3

0435 : 00000010100101000111000000000000; --     add $10, $10, $7

0436 : 01000010110101000000000000000000; --     lw $11, 0($10)

0437 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0438 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0439 : 00010011000000000000000000000001; --     bne $12, $0, 1

0440 : 00010010100000000000000000000001; --     bne $10, $0, 1

0441 : 00001000000000000000000111000011; --     j whitePawnLeftDiagCheck

0442 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0443 : 00000011010101101100000000001000; --     and $13, $11, $12

0444 : 00000010110101101101000000000100; --     sub $11, $11, $13

0445 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0446 : 00000010100100000000000110010000; --     sll $10, $8, 3

0447 : 00000010100101000111000000000000; --     add $10, $10, $7

0448 : 00111010110101000000000000000000; --     sw $11, 0($10)

0449 : 00111010100000000000000001100101; --     sw $10, 101($0)

0450 : 00001000000000000000000111000011; --     j whitePawnLeftDiagCheck

0451 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0452 : 00101010000100000000000000000001; --     addi $8, $8, 1

0453 : 00101001110011111111111111111111; --     addi $7, $7, -1

0454 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0455 : 00010010010000000000000000000001; --     bne $9, $0, 1

0456 : 00001000000000000000000111011001; --     j whitePawnRightDiagCheck

0457 : 00000010100100000000000110010000; --     sll $10, $8, 3

0458 : 00000010100101000111000000000000; --     add $10, $10, $7

0459 : 01000010110101000000000000000000; --     lw $11, 0($10)

0460 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0461 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0462 : 00010011000000000000000000000001; --     bne $12, $0, 1

0463 : 00001000000000000000000111011001; --     j whitePawnRightDiagCheck

0464 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0465 : 00000011010101101100000000001000; --     and $13, $11, $12

0466 : 00000010110101101101000000000100; --     sub $11, $11, $13

0467 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0468 : 00000010100100000000000110010000; --     sll $10, $8, 3

0469 : 00000010100101000111000000000000; --     add $10, $10, $7

0470 : 00111010110101000000000000000000; --     sw $11, 0($10)

0471 : 00111010100000000000000001100110; --     sw $10, 102($0)

0472 : 00001000000000000000000111011001; --     j whitePawnRightDiagCheck

0473 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0474 : 00101010000100000000000000000001; --     addi $8, $8, 1

0475 : 00101001110011100000000000000001; --     addi $7, $7, 1

0476 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0477 : 00010010010000000000000000000001; --     bne $9, $0, 1

0478 : 00001000000000000000000000000000; --     j 0

0479 : 00000010100100000000000110010000; --     sll $10, $8, 3

0480 : 00000010100101000111000000000000; --     add $10, $10, $7

0481 : 01000010110101000000000000000000; --     lw $11, 0($10)

0482 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0483 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0484 : 00010011000000000000000000000001; --     bne $12, $0, 1

0485 : 00001000000000000000000000000000; --     j 0

0486 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0487 : 00000011010101101100000000001000; --     and $13, $11, $12

0488 : 00000010110101101101000000000100; --     sub $11, $11, $13

0489 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0490 : 00000010100100000000000110010000; --     sll $10, $8, 3

0491 : 00000010100101000111000000000000; --     add $10, $10, $7

0492 : 00111010110101000000000000000000; --     sw $11, 0($10)

0493 : 00111010100000000000000001100111; --     sw $10, 103($0)

0494 : 00001000000000000000000000000000; --     j 0

0495 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0496 : 00101001110011100000000000000001; --     addi $7, $7, 1

0497 : 00101010000100011111111111111111; --     addi $8, $8, -1

0498 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0499 : 00101100110000000000000000000001; --     addi $19, $0, 1

0500 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0501 : 00000010100100000000000110010000; --     sll $10, $8, 3

0502 : 00000010100101000111000000000000; --     add $10, $10, $7

0503 : 01000010110101000000000000000000; --     lw $11, 0($10)

0504 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0505 : 00000011010101101100000000001000; --     and $13, $11, $12

0506 : 00000010110101101101000000000100; --     sub $11, $11, $13

0507 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0508 : 00111010110101000000000000000000; --     sw $11, 0($10)

0509 : 00111010100000000000000001100100; --     sw $10, 100($0)

0510 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0511 : 00101001110011100000000000000001; --     addi $7, $7, 1

0512 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0513 : 00101100110000000000000000000001; --     addi $19, $0, 1

0514 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0515 : 00000010100100000000000110010000; --     sll $10, $8, 3

0516 : 00000010100101000111000000000000; --     add $10, $10, $7

0517 : 01000010110101000000000000000000; --     lw $11, 0($10)

0518 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0519 : 00000011010101101100000000001000; --     and $13, $11, $12

0520 : 00000010110101101101000000000100; --     sub $11, $11, $13

0521 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0522 : 00111010110101000000000000000000; --     sw $11, 0($10)

0523 : 00111010100000000000000001100101; --     sw $10, 101($0)

0524 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0525 : 00101001110011100000000000000001; --     addi $7, $7, 1

0526 : 00101010000100000000000000000001; --     addi $8, $8, 1

0527 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0528 : 00101100110000000000000000000001; --     addi $19, $0, 1

0529 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0530 : 00000010100100000000000110010000; --     sll $10, $8, 3

0531 : 00000010100101000111000000000000; --     add $10, $10, $7

0532 : 01000010110101000000000000000000; --     lw $11, 0($10)

0533 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0534 : 00000011010101101100000000001000; --     and $13, $11, $12

0535 : 00000010110101101101000000000100; --     sub $11, $11, $13

0536 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0537 : 00111010110101000000000000000000; --     sw $11, 0($10)

0538 : 00111010100000000000000001100110; --     sw $10, 102($0)

0539 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0540 : 00101010000100011111111111111111; --     addi $8, $8, -1

0541 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0542 : 00101100110000000000000000000001; --     addi $19, $0, 1

0543 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0544 : 00000010100100000000000110010000; --     sll $10, $8, 3

0545 : 00000010100101000111000000000000; --     add $10, $10, $7

0546 : 01000010110101000000000000000000; --     lw $11, 0($10)

0547 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0548 : 00000011010101101100000000001000; --     and $13, $11, $12

0549 : 00000010110101101101000000000100; --     sub $11, $11, $13

0550 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0551 : 00111010110101000000000000000000; --     sw $11, 0($10)

0552 : 00111010100000000000000001100111; --     sw $10, 103($0)

0553 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0554 : 00101010000100000000000000000001; --     addi $8, $8, 1

0555 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0556 : 00101100110000000000000000000001; --     addi $19, $0, 1

0557 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0558 : 00000010100100000000000110010000; --     sll $10, $8, 3

0559 : 00000010100101000111000000000000; --     add $10, $10, $7

0560 : 01000010110101000000000000000000; --     lw $11, 0($10)

0561 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0562 : 00000011010101101100000000001000; --     and $13, $11, $12

0563 : 00000010110101101101000000000100; --     sub $11, $11, $13

0564 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0565 : 00111010110101000000000000000000; --     sw $11, 0($10)

0566 : 00111010100000000000000001101000; --     sw $10, 104($0)

0567 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0568 : 00101001110011111111111111111111; --     addi $7, $7, -1

0569 : 00101010000100011111111111111111; --     addi $8, $8, -1

0570 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0571 : 00101100110000000000000000000001; --     addi $19, $0, 1

0572 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0573 : 00000010100100000000000110010000; --     sll $10, $8, 3

0574 : 00000010100101000111000000000000; --     add $10, $10, $7

0575 : 01000010110101000000000000000000; --     lw $11, 0($10)

0576 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0577 : 00000011010101101100000000001000; --     and $13, $11, $12

0578 : 00000010110101101101000000000100; --     sub $11, $11, $13

0579 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0580 : 00111010110101000000000000000000; --     sw $11, 0($10)

0581 : 00111010100000000000000001101001; --     sw $10, 105($0)

0582 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0583 : 00101001110011111111111111111111; --     addi $7, $7, -1

0584 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0585 : 00101100110000000000000000000001; --     addi $19, $0, 1

0586 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0587 : 00000010100100000000000110010000; --     sll $10, $8, 3

0588 : 00000010100101000111000000000000; --     add $10, $10, $7

0589 : 01000010110101000000000000000000; --     lw $11, 0($10)

0590 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0591 : 00000011010101101100000000001000; --     and $13, $11, $12

0592 : 00000010110101101101000000000100; --     sub $11, $11, $13

0593 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0594 : 00111010110101000000000000000000; --     sw $11, 0($10)

0595 : 00111010100000000000000001101010; --     sw $10, 106($0)

0596 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0597 : 00101001110011111111111111111111; --     addi $7, $7, -1

0598 : 00101010000100000000000000000001; --     addi $8, $8, 1

0599 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0600 : 00101100110000000000000000000001; --     addi $19, $0, 1

0601 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0602 : 00000010100100000000000110010000; --     sll $10, $8, 3

0603 : 00000010100101000111000000000000; --     add $10, $10, $7

0604 : 01000010110101000000000000000000; --     lw $11, 0($10)

0605 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0606 : 00000011010101101100000000001000; --     and $13, $11, $12

0607 : 00000010110101101101000000000100; --     sub $11, $11, $13

0608 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0609 : 00111010110101000000000000000000; --     sw $11, 0($10)

0610 : 00111010100000000000000001101011; --     sw $10, 107($0)

0611 : 00001000000000000000000000000000; --     j 0

0612 : 00101001100000000000000001100100; --     addi $6, $0, 100

0613 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0614 : 00101001110011100000000000000001; --     addi $7, $7, 1

0615 : 00101010000100000000000000000001; --     addi $8, $8, 1

0616 : 00001000000000000000001001101001; --     j startLoopBishopXAdd1YAdd1

0617 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0618 : 00010010010000000000000000000001; --     bne $9, $0, 1

0619 : 00001000000000000000001001111101; --     j endLoopBishopXAdd1YAdd1

0620 : 00000010100100000000000110010000; --     sll $10, $8, 3

0621 : 00000010100101000111000000000000; --     add $10, $10, $7

0622 : 01000010110101000000000000000000; --     lw $11, 0($10)

0623 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0624 : 00000011010101101100000000001000; --     and $13, $11, $12

0625 : 00000010110101101101000000000100; --     sub $11, $11, $13

0626 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0627 : 00111010110101000000000000000000; --     sw $11, 0($10)

0628 : 00111010100011000000000000000000; --     sw $10, 0($6)

0629 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0630 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0631 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0632 : 00010011000000000000000000000011; --     bne $12, $0, 3

0633 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0634 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0635 : 00001000000000000000001001101001; --     j startLoopBishopXAdd1YAdd1 #end loooooop

0636 : 00001000000000000000001001111101; --     j endLoopBishopXAdd1YAdd1

0637 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0638 : 00101001110011100000000000000001; --     addi $7, $7, 1

0639 : 00101010000100011111111111111111; --     addi $8, $8, -1

0640 : 00001000000000000000001010000001; --     j startLoopBishopXAdd1YSub1

0641 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0642 : 00010010010000000000000000000001; --     bne $9, $0, 1

0643 : 00001000000000000000001010010101; --     j endLoopBishopXAdd1YSub1

0644 : 00000010100100000000000110010000; --     sll $10, $8, 3

0645 : 00000010100101000111000000000000; --     add $10, $10, $7

0646 : 01000010110101000000000000000000; --     lw $11, 0($10)

0647 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0648 : 00000011010101101100000000001000; --     and $13, $11, $12

0649 : 00000010110101101101000000000100; --     sub $11, $11, $13

0650 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0651 : 00111010110101000000000000000000; --     sw $11, 0($10)

0652 : 00111010100011000000000000000000; --     sw $10, 0($6)

0653 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0654 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0655 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0656 : 00010011000000000000000000000011; --     bne $12, $0, 3

0657 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0658 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0659 : 00001000000000000000001010000001; --     j startLoopBishopXAdd1YSub1 #end loooooop

0660 : 00001000000000000000001010010101; --     j endLoopBishopXAdd1YSub1

0661 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0662 : 00101001110011111111111111111111; --     addi $7, $7, -1

0663 : 00101010000100000000000000000001; --     addi $8, $8, 1

0664 : 00001000000000000000001010011001; --     j startLoopBishopXSub1YAdd1

0665 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0666 : 00010010010000000000000000000001; --     bne $9, $0, 1

0667 : 00001000000000000000001010101101; --     j endLoopBishopXSub1YAdd1

0668 : 00000010100100000000000110010000; --     sll $10, $8, 3

0669 : 00000010100101000111000000000000; --     add $10, $10, $7

0670 : 01000010110101000000000000000000; --     lw $11, 0($10)

0671 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0672 : 00000011010101101100000000001000; --     and $13, $11, $12

0673 : 00000010110101101101000000000100; --     sub $11, $11, $13

0674 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0675 : 00111010110101000000000000000000; --     sw $11, 0($10)

0676 : 00111010100011000000000000000000; --     sw $10, 0($6)

0677 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0678 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0679 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0680 : 00010011000000000000000000000011; --     bne $12, $0, 3

0681 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0682 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0683 : 00001000000000000000001010011001; --     j startLoopBishopXSub1YAdd1 #end loooooop

0684 : 00001000000000000000001010101101; --     j endLoopBishopXSub1YAdd1

0685 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0686 : 00101001110011111111111111111111; --     addi $7, $7, -1

0687 : 00101010000100011111111111111111; --     addi $8, $8, -1

0688 : 00001000000000000000001010110001; --     j startLoopBishopXSub1YSub1

0689 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0690 : 00010010010000000000000000000001; --     bne $9, $0, 1

0691 : 00001000000000000000001011000101; --     j endLoopBishopXSub1YSub1

0692 : 00000010100100000000000110010000; --     sll $10, $8, 3

0693 : 00000010100101000111000000000000; --     add $10, $10, $7

0694 : 01000010110101000000000000000000; --     lw $11, 0($10)

0695 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0696 : 00000011010101101100000000001000; --     and $13, $11, $12

0697 : 00000010110101101101000000000100; --     sub $11, $11, $13

0698 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0699 : 00111010110101000000000000000000; --     sw $11, 0($10)

0700 : 00111010100011000000000000000000; --     sw $10, 0($6)

0701 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0702 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0703 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0704 : 00010011000000000000000000000011; --     bne $12, $0, 3

0705 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0706 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0707 : 00001000000000000000001010110001; --     j startLoopBishopXSub1YSub1 #end loooooop

0708 : 00001000000000000000001011000101; --     j endLoopBishopXSub1YSub1

0709 : 00001000000000000000000000000000; --     j 0

0710 : 00101001100000000000000001100100; --     addi $6, $0, 100

0711 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0712 : 00101001110011100000000000000001; --     addi $7, $7, 1

0713 : 00001000000000000000001011001010; --     j startLoopRookXAdd1

0714 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0715 : 00010010010000000000000000000001; --     bne $9, $0, 1

0716 : 00001000000000000000001011011101; --     j endLoopRookXAdd1

0717 : 00000010100100000000000110010000; --     sll $10, $8, 3

0718 : 00000010100101000111000000000000; --     add $10, $10, $7

0719 : 01000010110101000000000000000000; --     lw $11, 0($10)

0720 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0721 : 00000011010101101100000000001000; --     and $13, $11, $12

0722 : 00000010110101101101000000000100; --     sub $11, $11, $13

0723 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0724 : 00111010110101000000000000000000; --     sw $11, 0($10)

0725 : 00111010100011000000000000000000; --     sw $10, 0($6)

0726 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0727 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0728 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0729 : 00010011000000000000000000000010; --     bne $12, $0, 2

0730 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0731 : 00001000000000000000001011001010; --     j startLoopRookXAdd1 #end loooooop

0732 : 00001000000000000000001011011101; --     j endLoopRookXAdd1

0733 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0734 : 00101001110011111111111111111111; --     addi $7, $7, -1

0735 : 00001000000000000000001011100000; --     j startLoopRookXSub1

0736 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0737 : 00010010010000000000000000000001; --     bne $9, $0, 1

0738 : 00001000000000000000001011110011; --     j endLoopRookXSub1

0739 : 00000010100100000000000110010000; --     sll $10, $8, 3

0740 : 00000010100101000111000000000000; --     add $10, $10, $7

0741 : 01000010110101000000000000000000; --     lw $11, 0($10)

0742 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0743 : 00000011010101101100000000001000; --     and $13, $11, $12

0744 : 00000010110101101101000000000100; --     sub $11, $11, $13

0745 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0746 : 00111010110101000000000000000000; --     sw $11, 0($10)

0747 : 00111010100011000000000000000000; --     sw $10, 0($6)

0748 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0749 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0750 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0751 : 00010011000000000000000000000010; --     bne $12, $0, 2

0752 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0753 : 00001000000000000000001011100000; --     j startLoopRookXSub1 #end loooooop

0754 : 00001000000000000000001011110011; --     j endLoopRookXSub1

0755 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0756 : 00101010000100000000000000000001; --     addi $8, $8, 1

0757 : 00001000000000000000001011110110; --     j startLoopRookYAdd1

0758 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0759 : 00010010010000000000000000000001; --     bne $9, $0, 1

0760 : 00001000000000000000001100001001; --     j endLoopRookYAdd1

0761 : 00000010100100000000000110010000; --     sll $10, $8, 3

0762 : 00000010100101000111000000000000; --     add $10, $10, $7

0763 : 01000010110101000000000000000000; --     lw $11, 0($10)

0764 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0765 : 00000011010101101100000000001000; --     and $13, $11, $12

0766 : 00000010110101101101000000000100; --     sub $11, $11, $13

0767 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0768 : 00111010110101000000000000000000; --     sw $11, 0($10)

0769 : 00111010100011000000000000000000; --     sw $10, 0($6)

0770 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0771 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0772 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0773 : 00010011000000000000000000000010; --     bne $12, $0, 2

0774 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0775 : 00001000000000000000001011110110; --     j startLoopRookYAdd1 #end loooooop

0776 : 00001000000000000000001100001001; --     j endLoopRookYAdd1

0777 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0778 : 00101010000100011111111111111111; --     addi $8, $8, -1

0779 : 00001000000000000000001100001100; --     j startLoopRookYSub1

0780 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0781 : 00010010010000000000000000000001; --     bne $9, $0, 1

0782 : 00001000000000000000001100011111; --     j endLoopRookYSub1

0783 : 00000010100100000000000110010000; --     sll $10, $8, 3

0784 : 00000010100101000111000000000000; --     add $10, $10, $7

0785 : 01000010110101000000000000000000; --     lw $11, 0($10)

0786 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0787 : 00000011010101101100000000001000; --     and $13, $11, $12

0788 : 00000010110101101101000000000100; --     sub $11, $11, $13

0789 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0790 : 00111010110101000000000000000000; --     sw $11, 0($10)

0791 : 00111010100011000000000000000000; --     sw $10, 0($6)

0792 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0793 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0794 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0795 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0796 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0797 : 00001000000000000000001100001100; --     j startLoopRookYSub1 #end loooooop

0798 : 00001000000000000000001100011111; --     j endLoopRookYSub1

0799 : 00001000000000000000000000000000; --     j 0

0800 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0801 : 00101001110011100000000000000001; --     addi $7, $7, 1

0802 : 00101010000100000000000000000010; --     addi $8, $8, 2

0803 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0804 : 00101100110000000000000000000001; --     addi $19, $0, 1

0805 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0806 : 00000010100100000000000110010000; --     sll $10, $8, 3

0807 : 00000010100101000111000000000000; --     add $10, $10, $7

0808 : 01000010110101000000000000000000; --     lw $11, 0($10)

0809 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0810 : 00000011010101101100000000001000; --     and $13, $11, $12

0811 : 00000010110101101101000000000100; --     sub $11, $11, $13

0812 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0813 : 00111010110101000000000000000000; --     sw $11, 0($10)

0814 : 00111010100000000000000001100100; --     sw $10, 100($0)

0815 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0816 : 00101001110011100000000000000001; --     addi $7, $7, 1

0817 : 00101010000100011111111111111110; --     addi $8, $8, -2

0818 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0819 : 00101100110000000000000000000001; --     addi $19, $0, 1

0820 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0821 : 00000010100100000000000110010000; --     sll $10, $8, 3

0822 : 00000010100101000111000000000000; --     add $10, $10, $7

0823 : 01000010110101000000000000000000; --     lw $11, 0($10)

0824 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0825 : 00000011010101101100000000001000; --     and $13, $11, $12

0826 : 00000010110101101101000000000100; --     sub $11, $11, $13

0827 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0828 : 00111010110101000000000000000000; --     sw $11, 0($10)

0829 : 00111010100000000000000001100101; --     sw $10, 101($0)

0830 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0831 : 00101001110011111111111111111111; --     addi $7, $7, -1

0832 : 00101010000100000000000000000010; --     addi $8, $8, 2

0833 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0834 : 00101100110000000000000000000001; --     addi $19, $0, 1

0835 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0836 : 00000010100100000000000110010000; --     sll $10, $8, 3

0837 : 00000010100101000111000000000000; --     add $10, $10, $7

0838 : 01000010110101000000000000000000; --     lw $11, 0($10)

0839 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0840 : 00000011010101101100000000001000; --     and $13, $11, $12

0841 : 00000010110101101101000000000100; --     sub $11, $11, $13

0842 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0843 : 00111010110101000000000000000000; --     sw $11, 0($10)

0844 : 00111010100000000000000001100110; --     sw $10, 102($0)

0845 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0846 : 00101001110011111111111111111111; --     addi $7, $7, -1

0847 : 00101010000100011111111111111110; --     addi $8, $8, -2

0848 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0849 : 00101100110000000000000000000001; --     addi $19, $0, 1

0850 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0851 : 00000010100100000000000110010000; --     sll $10, $8, 3

0852 : 00000010100101000111000000000000; --     add $10, $10, $7

0853 : 01000010110101000000000000000000; --     lw $11, 0($10)

0854 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0855 : 00000011010101101100000000001000; --     and $13, $11, $12

0856 : 00000010110101101101000000000100; --     sub $11, $11, $13

0857 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0858 : 00111010110101000000000000000000; --     sw $11, 0($10)

0859 : 00111010100000000000000001100111; --     sw $10, 103($0)

0860 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0861 : 00101001110011100000000000000010; --     addi $7, $7, 2

0862 : 00101010000100000000000000000001; --     addi $8, $8, 1

0863 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0864 : 00101100110000000000000000000001; --     addi $19, $0, 1

0865 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0866 : 00000010100100000000000110010000; --     sll $10, $8, 3

0867 : 00000010100101000111000000000000; --     add $10, $10, $7

0868 : 01000010110101000000000000000000; --     lw $11, 0($10)

0869 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0870 : 00000011010101101100000000001000; --     and $13, $11, $12

0871 : 00000010110101101101000000000100; --     sub $11, $11, $13

0872 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0873 : 00111010110101000000000000000000; --     sw $11, 0($10)

0874 : 00111010100000000000000001101000; --     sw $10, 104($0)

0875 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0876 : 00101001110011100000000000000010; --     addi $7, $7, 2

0877 : 00101010000100011111111111111111; --     addi $8, $8, -1

0878 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0879 : 00101100110000000000000000000001; --     addi $19, $0, 1

0880 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0881 : 00000010100100000000000110010000; --     sll $10, $8, 3

0882 : 00000010100101000111000000000000; --     add $10, $10, $7

0883 : 01000010110101000000000000000000; --     lw $11, 0($10)

0884 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0885 : 00000011010101101100000000001000; --     and $13, $11, $12

0886 : 00000010110101101101000000000100; --     sub $11, $11, $13

0887 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0888 : 00111010110101000000000000000000; --     sw $11, 0($10)

0889 : 00111010100000000000000001101001; --     sw $10, 105($0)

0890 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0891 : 00101001110011111111111111111110; --     addi $7, $7, -2

0892 : 00101010000100000000000000000001; --     addi $8, $8, 1

0893 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0894 : 00101100110000000000000000000001; --     addi $19, $0, 1

0895 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0896 : 00000010100100000000000110010000; --     sll $10, $8, 3

0897 : 00000010100101000111000000000000; --     add $10, $10, $7

0898 : 01000010110101000000000000000000; --     lw $11, 0($10)

0899 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0900 : 00000011010101101100000000001000; --     and $13, $11, $12

0901 : 00000010110101101101000000000100; --     sub $11, $11, $13

0902 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0903 : 00111010110101000000000000000000; --     sw $11, 0($10)

0904 : 00111010100000000000000001101010; --     sw $10, 106($0)

0905 : 00011000000000000000001110011001; --     jal parseXY # parses $1 to make $7=x and $8=y

0906 : 00101001110011111111111111111110; --     addi $7, $7, -2

0907 : 00101010000100011111111111111111; --     addi $8, $8, -1

0908 : 00011000000000000000001110011111; --     jal validateDestination #writes to $9 if valid move

0909 : 00101100110000000000000000000001; --     addi $19, $0, 1

0910 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0911 : 00000010100100000000000110010000; --     sll $10, $8, 3

0912 : 00000010100101000111000000000000; --     add $10, $10, $7

0913 : 01000010110101000000000000000000; --     lw $11, 0($10)

0914 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0915 : 00000011010101101100000000001000; --     and $13, $11, $12

0916 : 00000010110101101101000000000100; --     sub $11, $11, $13

0917 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0918 : 00111010110101000000000000000000; --     sw $11, 0($10)

0919 : 00111010100000000000000001101011; --     sw $10, 107($0)

0920 : 00001000000000000000000000000000; --     j 0

0921 : 00101011000000000000000000000111; --     addi $12, $0, 7 #lsb x mask 000111

0922 : 00101011010000000000000000111000; --     addi $13, $0, 56 #lsb y mask 111000

0923 : 00000001110000101100000000001000; --     and $7, $1, $12

0924 : 00000010000000101101000000001000; --     and $8, $1, $13

0925 : 00000010000100000000000110010100; --     sra $8, $8, 3

0926 : 00100111110000000000000000000000; --     jr $31

0927 : 00101010100000000000000000000001; --     addi $10 $0 1

0928 : 00110001110000000000000000000001; --     blt $7 $0 1

0929 : 00010000000101000000000000000010; --     bne $0 $10 2

0930 : 00101010010000000000000000000000; --     addi $9 $0 0

0931 : 00100111110000000000000000000000; --     jr $31

0932 : 00101010100000000000000000000111; --     addi $10 $0 7

0933 : 00110010100011100000000000000001; --     blt $10 $7 1

0934 : 00010000000101000000000000000010; --     bne $0 $10 2

0935 : 00101010010000000000000000000000; --     addi $9 $0 0

0936 : 00100111110000000000000000000000; --     jr $31

0937 : 00101010100000000000000000000001; --     addi $10 $0 1

0938 : 00110010000000000000000000000001; --     blt $8 $0 1

0939 : 00010000000101000000000000000010; --     bne $0 $10 2

0940 : 00101010010000000000000000000000; --     addi $9 $0 0

0941 : 00100111110000000000000000000000; --     jr $31

0942 : 00101010100000000000000000000111; --     addi $10 $0 7

0943 : 00110010100100000000000000000001; --     blt $10 $8 1

0944 : 00010000000101000000000000000010; --     bne $0 $10 2

0945 : 00101010010000000000000000000000; --     addi $9 $0 0

0946 : 00100111110000000000000000000000; --     jr $31

0947 : 00101010100000000000000000000001; --     addi $10, $0, 1

0948 : 00000010110101011110000000001000; --     and $11, $10, $30

0949 : 00000011000100000000000110010000; --     sll $12 $8 3

0950 : 00000011000110000111000000000000; --     add $12 $12 $7

0951 : 01000011010110000000000000000000; --     lw $13 0($12)

0952 : 00101011110000000000000000001110; --     addi $15 $0 14 #piece mask

0953 : 00000011100110101111000000001000; --     and $14 $13 $15

0954 : 00010011100000000000000000000010; --     bne $14 $0 2

0955 : 00101010010000000000000000000001; --     addi $9 $0 1

0956 : 00100111110000000000000000000000; --     jr $31

0957 : 00000011100110101010000000001000; --     and $14 $13 $10

0958 : 00010011100101100000000000000010; --     bne $14, $11, 2

0959 : 00101010010000000000000000000000; --     addi $9 $0 0

0960 : 00100111110000000000000000000000; --     jr $31

0961 : 00101010010000000000000000000001; --     addi $9 $0 1

0962 : 00100111110000000000000000000000; --     jr $31

0963 : 01000010100000000000000001100100; --     lw $10 100($0)

0964 : 00010010100001000000000000000001; --     bne $10, $2, 1

0965 : 00001000000000000000010001110001; --     j handle_valid

0966 : 01000010100000000000000001100101; --     lw $10 101($0)

0967 : 00010010100001000000000000000001; --     bne $10, $2, 1

0968 : 00001000000000000000010001110001; --     j handle_valid

0969 : 01000010100000000000000001100110; --     lw $10 102($0)

0970 : 00010010100001000000000000000001; --     bne $10, $2, 1

0971 : 00001000000000000000010001110001; --     j handle_valid

0972 : 01000010100000000000000001100111; --     lw $10 103($0)

0973 : 00010010100001000000000000000001; --     bne $10, $2, 1

0974 : 00001000000000000000010001110001; --     j handle_valid

0975 : 01000010100000000000000001101000; --     lw $10 104($0)

0976 : 00010010100001000000000000000001; --     bne $10, $2, 1

0977 : 00001000000000000000010001110001; --     j handle_valid

0978 : 01000010100000000000000001101001; --     lw $10 105($0)

0979 : 00010010100001000000000000000001; --     bne $10, $2, 1

0980 : 00001000000000000000010001110001; --     j handle_valid

0981 : 01000010100000000000000001101010; --     lw $10 106($0)

0982 : 00010010100001000000000000000001; --     bne $10, $2, 1

0983 : 00001000000000000000010001110001; --     j handle_valid

0984 : 01000010100000000000000001101011; --     lw $10 107($0)

0985 : 00010010100001000000000000000001; --     bne $10, $2, 1

0986 : 00001000000000000000010001110001; --     j handle_valid

0987 : 01000010100000000000000001101100; --     lw $10 108($0)

0988 : 00010010100001000000000000000001; --     bne $10, $2, 1

0989 : 00001000000000000000010001110001; --     j handle_valid

0990 : 01000010100000000000000001101101; --     lw $10 109($0)

0991 : 00010010100001000000000000000001; --     bne $10, $2, 1

0992 : 00001000000000000000010001110001; --     j handle_valid

0993 : 01000010100000000000000001101110; --     lw $10 110($0)

0994 : 00010010100001000000000000000001; --     bne $10, $2, 1

0995 : 00001000000000000000010001110001; --     j handle_valid

0996 : 01000010100000000000000001101111; --     lw $10 111($0)

0997 : 00010010100001000000000000000001; --     bne $10, $2, 1

0998 : 00001000000000000000010001110001; --     j handle_valid

0999 : 01000010100000000000000001110000; --     lw $10 112($0)

1000 : 00010010100001000000000000000001; --     bne $10, $2, 1

1001 : 00001000000000000000010001110001; --     j handle_valid

1002 : 01000010100000000000000001110001; --     lw $10 113($0)

1003 : 00010010100001000000000000000001; --     bne $10, $2, 1

1004 : 00001000000000000000010001110001; --     j handle_valid

1005 : 01000010100000000000000001110010; --     lw $10 114($0)

1006 : 00010010100001000000000000000001; --     bne $10, $2, 1

1007 : 00001000000000000000010001110001; --     j handle_valid

1008 : 01000010100000000000000001110011; --     lw $10 115($0)

1009 : 00010010100001000000000000000001; --     bne $10, $2, 1

1010 : 00001000000000000000010001110001; --     j handle_valid

1011 : 01000010100000000000000001110100; --     lw $10 116($0)

1012 : 00010010100001000000000000000001; --     bne $10, $2, 1

1013 : 00001000000000000000010001110001; --     j handle_valid

1014 : 01000010100000000000000001110101; --     lw $10 117($0)

1015 : 00010010100001000000000000000001; --     bne $10, $2, 1

1016 : 00001000000000000000010001110001; --     j handle_valid

1017 : 01000010100000000000000001110110; --     lw $10 118($0)

1018 : 00010010100001000000000000000001; --     bne $10, $2, 1

1019 : 00001000000000000000010001110001; --     j handle_valid

1020 : 01000010100000000000000001110111; --     lw $10 119($0)

1021 : 00010010100001000000000000000001; --     bne $10, $2, 1

1022 : 00001000000000000000010001110001; --     j handle_valid

1023 : 01000010100000000000000001111000; --     lw $10 120($0)

1024 : 00010010100001000000000000000001; --     bne $10, $2, 1

1025 : 00001000000000000000010001110001; --     j handle_valid

1026 : 01000010100000000000000001111001; --     lw $10 121($0)

1027 : 00010010100001000000000000000001; --     bne $10, $2, 1

1028 : 00001000000000000000010001110001; --     j handle_valid

1029 : 01000010100000000000000001111010; --     lw $10 122($0)

1030 : 00010010100001000000000000000001; --     bne $10, $2, 1

1031 : 00001000000000000000010001110001; --     j handle_valid

1032 : 01000010100000000000000001111011; --     lw $10 123($0)

1033 : 00010010100001000000000000000001; --     bne $10, $2, 1

1034 : 00001000000000000000010001110001; --     j handle_valid

1035 : 01000010100000000000000001111100; --     lw $10 124($0)

1036 : 00010010100001000000000000000001; --     bne $10, $2, 1

1037 : 00001000000000000000010001110001; --     j handle_valid

1038 : 01000010100000000000000001111101; --     lw $10 125($0)

1039 : 00010010100001000000000000000001; --     bne $10, $2, 1

1040 : 00001000000000000000010001110001; --     j handle_valid

1041 : 01000010100000000000000001111110; --     lw $10 126($0)

1042 : 00010010100001000000000000000001; --     bne $10, $2, 1

1043 : 00001000000000000000010001110001; --     j handle_valid

1044 : 01000010100000000000000001111111; --     lw $10 127($0)

1045 : 00010010100001000000000000000001; --     bne $10, $2, 1

1046 : 00001000000000000000010001110001; --     j handle_valid

1047 : 00001000000000000000010000011000; --     j restoreColors

1048 : 00101010100000000000000000000000; --     addi $10, $0, 0 #iterator i

1049 : 00101010110000000000000001000000; --     addi $11, $0, 64 #upper loop bound

1050 : 00101011000000000000000000000001; --     addi $12, $0, 1 #lsb x mask 0001

1051 : 00101011010000000000000000001000; --     addi $13, $0, 8 #lsb y mask 1000

1052 : 00101011100000000000000011110000; --     addi $14, $0, 240 #square color mask 11110000

1053 : 00001000000000000000010000011110; --     j startLoopRestoreColors

1054 : 00010010100101100000000000000001; --     bne $10, $11, 1

1055 : 00001000000000000000010000101110; --     j endLoopRestoreColors

1056 : 01000011110101000000000000000000; --     lw $15, 0($10)

1057 : 00000100000111001111000000001000; --     and $16, $14, $15

1058 : 00000011110111110000000000000100; --     sub $15, $15, $16

1059 : 00000100010101001100000000001000; --     and $17, $10, $12

1060 : 00000100100101001101000000001000; --     and $18, $10, $13

1061 : 00000100101001000000000110010100; --     sra $18, $18, 3

1062 : 00000100111000110010000000000100; --     sub $19, $17, $18

1063 : 00010100110000000000000000000010; --     bne $19, $0, 2

1064 : 00101011110111100000000010000000; --     addi $15, $15, 128 #10000000

1065 : 00010011000000000000000000000001; --     bne $12, $0, 1 #just to skip running the write white sq part

1066 : 00101011110111100000000001000000; --     addi $15, $15, 64 #01000000

1067 : 00111011110101000000000000000000; --     sw $15, 0($10)

1068 : 00101010100101000000000000000001; --     addi $10, $10, 1 #i = i + 1

1069 : 00001000000000000000010000011110; --     j startLoopRestoreColors #end loooooop

1070 : 00101000010000000000000000000000; --     addi $1, $0, 0

1071 : 00101000100000000000000000000000; --     addi $2, $0, 0

1072 : 00101000110000000000000000000000; --     addi $3, $0, 0

1073 : 00101001000000000000000000000000; --     addi $4, $0, 0

1074 : 00101001010000000000000000000000; --     addi $5, $0, 0

1075 : 00101001100000000000000000000000; --     addi $6, $0, 0

1076 : 00101001110000000000000000000000; --     addi $7, $0, 0

1077 : 00101010000000000000000000000000; --     addi $8, $0, 0

1078 : 00101010010000000000000000000000; --     addi $9, $0, 0

1079 : 00101010100000000000000000000000; --     addi $10, $0, 0

1080 : 00101010110000000000000000000000; --     addi $11, $0, 0

1081 : 00101011000000000000000000000000; --     addi $12, $0, 0

1082 : 00101011010000000000000000000000; --     addi $13, $0, 0

1083 : 00101011100000000000000000000000; --     addi $14, $0, 0

1084 : 00101011110000000000000000000000; --     addi $15, $0, 0

1085 : 00101100000000000000000000000000; --     addi $16, $0, 0

1086 : 00101100010000000000000000000000; --     addi $17, $0, 0

1087 : 00101100100000000000000000000000; --     addi $18, $0, 0

1088 : 00101100110000000000000000000000; --     addi $19, $0, 0

1089 : 00101101000000000000000000000000; --     addi $20, $0, 0

1090 : 00101101010000000000000000000000; --     addi $21, $0, 0

1091 : 00101101100000000000000000000000; --     addi $22, $0, 0

1092 : 00101101110000000000000000000000; --     addi $23, $0, 0

1093 : 00101110000000000000000000000000; --     addi $24, $0, 0

1094 : 00101110010000000000000000000000; --     addi $25, $0, 0

1095 : 00101110100000000000000000000000; --     addi $26, $0, 0

1096 : 00101110110000000000000000000000; --     addi $27, $0, 0

1097 : 00101111000000000000000000000000; --     addi $28, $0, 0

1098 : 00101111010000000000000000000000; --     addi $29, $0, 0

1099 : 00101111100000000000000000000000; --     addi $30, $0, 0

1100 : 00101010100000011111111111111111; --     addi $10, $0, -1

1101 : 00111010100000000000000001000000; --     sw $10, 64($0)

1102 : 00111010100000000000000001000001; --     sw $10, 65($0)

1103 : 00101010100000011111111111111111; --     addi $10, $0, -1

1104 : 00111010100000000000000001100100; --     sw $10, 100($0)

1105 : 00111010100000000000000001100101; --     sw $10, 101($0)

1106 : 00111010100000000000000001100110; --     sw $10, 102($0)

1107 : 00111010100000000000000001100111; --     sw $10, 103($0)

1108 : 00111010100000000000000001101000; --     sw $10, 104($0)

1109 : 00111010100000000000000001101001; --     sw $10, 105($0)

1110 : 00111010100000000000000001101010; --     sw $10, 106($0)

1111 : 00111010100000000000000001101011; --     sw $10, 107($0)

1112 : 00111010100000000000000001101100; --     sw $10, 108($0)

1113 : 00111010100000000000000001101101; --     sw $10, 109($0)

1114 : 00111010100000000000000001101110; --     sw $10, 110($0)

1115 : 00111010100000000000000001101111; --     sw $10, 111($0)

1116 : 00111010100000000000000001110000; --     sw $10, 112($0)

1117 : 00111010100000000000000001110001; --     sw $10, 113($0)

1118 : 00111010100000000000000001110010; --     sw $10, 114($0)

1119 : 00111010100000000000000001110011; --     sw $10, 115($0)

1120 : 00111010100000000000000001110100; --     sw $10, 116($0)

1121 : 00111010100000000000000001110101; --     sw $10, 117($0)

1122 : 00111010100000000000000001110110; --     sw $10, 118($0)

1123 : 00111010100000000000000001110111; --     sw $10, 119($0)

1124 : 00111010100000000000000001111000; --     sw $10, 120($0)

1125 : 00111010100000000000000001111001; --     sw $10, 121($0)

1126 : 00111010100000000000000001111010; --     sw $10, 122($0)

1127 : 00111010100000000000000001111011; --     sw $10, 123($0)

1128 : 00111010100000000000000001111100; --     sw $10, 124($0)

1129 : 00111010100000000000000001111101; --     sw $10, 125($0)

1130 : 00111010100000000000000001111110; --     sw $10, 126($0)

1131 : 00111010100000000000000001111111; --     sw $10, 127($0)

1132 : 00111010100000000000000010000000; --     sw $10, 128($0)

1133 : 00111010100000000000000010000001; --     sw $10, 129($0)

1134 : 00111010100000000000000010000010; --     sw $10, 130($0)

1135 : 00111010100000000000000010000011; --     sw $10, 131($0)

1136 : 00001000000000000000000000000000; --     j 0

1137 : 00111000110001000000000000000000; --     sw $3, 0($2)

1138 : 00111000000000100000000000000000; --     sw $0, 0($1)

1139 : 00101010100000000000000000000001; --     addi $10, $0, 1

1140 : 00000010110101011110000000001000; --     and $11, $10, $30

1141 : 00000111101111001011000000000100; --     sub $30, $30, $11 # subtract current color

1142 : 00010010110000000000000000000001; --     bne $11, $0, 1

1143 : 00101111101111000000000000000001; --     addi $30, $30, 1 # add 1 to $30 to make it black

1144 : 00101011000000000000000000000001; --     addi $12, $0, 1 # default to a win

1145 : 00101010100000000000000000000000; --     addi $10, $0, 0 # address iterator $10 starts at 0

1146 : 00011000000000000000010010000101; --     jal startLoopCheckWin # writes $12 to 0 if opponent's king is found!

1147 : 00101010110000000000000000000001; --     addi $11, $0, 1

1148 : 00010011000101100000000000000001; --     bne $12, $11, 1

1149 : 00011000000000000000010010000000; --     jal markWin # this writes win status to register 30

1150 : 00111111100000000000000001000010; --     sw $30, 66($0) 

1151 : 00001000000000000000010000011000; --     j restoreColors

1152 : 00101010100000000000000000000010; --     addi $10, $0, 2 # win status mask

1153 : 00000010110101011110000000001000; --     and $11, $10, $30 # store current win status in $11

1154 : 00000111101111001011000000000100; --     sub $30, $30, $11 # subtract those status bits

1155 : 00101111101111000000000000000010; --     addi $30, $30, 2 # mark the status bits as win 0000...1x

1156 : 00100111110000000000000000000000; --     jr $31

1157 : 00101010110000000000000001000000; --     addi $11, $0, 64

1158 : 00010010100101100000000000000001; --     bne $10, $11, 1

1159 : 00001000000000000000010010010110; --     j endLoopCheckWin

1160 : 00101010110000000000000000000001; --     addi $11, $0, 1 # color mask

1161 : 00000011011111001011000000001000; --     and $13, $30, $11

1162 : 01000011100101000000000000000000; --     lw $14, 0($10)

1163 : 00101010110000000000000000001110; --     addi $11, $0, 14

1164 : 00000011110101101110000000001000; --     and $15, $11, $14

1165 : 00101010110000000000000000000001; --     addi $11, $0, 1

1166 : 00000100000101101110000000001000; --     and $16, $11, $14

1167 : 00101010110000000000000000000010; --     addi $11, $0, 2 #010 = king. 

1168 : 00010011110101100000000000000011; --     bne $15, $11, 3 #WARNING: bigger jump # of instrs dependent. If piece is not a king, go back to start of loop 

1169 : 00010100000110100000000000000010; --     bne $16, $13, 2 # if color is not equal to opponents color, go back to start of loop

1170 : 00101011000000000000000000000000; --     addi $12, $0, 0 # write 0 to $12

1171 : 00001000000000000000010010010110; --     j endLoopCheckWin

1172 : 00101010100101000000000000000001; --     addi $10, $10, 1 # i = i + 1

1173 : 00001000000000000000010010000101; --     j startLoopCheckWin

1174 : 00100111110000000000000000000000; --     jr $31

[1175..4095] : 00000000000000000000000000000000;
END;
