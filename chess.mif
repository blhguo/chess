DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00000000000000000000000000000000; -- nop

0001 : 00000000000000000000000000000000; -- nop

0002 : 00000000000000000000000000000000; -- nop

0003 : 00000000000000000000000000000000; -- nop

0004 : 00000000000000000000000000000000; -- nop

0005 : 00000000000000000000000000000000; -- nop

0006 : 00000000000000000000000000000000; -- nop

0007 : 00000000000000000000000000000000; -- nop

0008 : 00000000000000000000000000000000; -- nop

0009 : 01000000010000000000000001000000; -- lw $1, 64($0)

0010 : 01000000100000000000000001000001; -- lw $2, 65($0)

0011 : 00101010100000011111111111111111; -- addi $10 $0, -1

0012 : 00010000100101000000000000000001; -- bne $2, $10, 1

0013 : 00010010100000000000000000000001; -- bne $10, $0, 1

0014 : 00011000000000000000000000110011; -- jal debug2

0015 : 00101010100000011111111111111111; -- addi $10 $0 -1

0016 : 00010010100000100000000000000100; -- bne $10, $1, 4

0017 : 00101010100000011111111111111111; -- addi $10, $0, -1

0018 : 00111010100000000000000001000000; -- sw $10, 64($0)

0019 : 00111010100000000000000001000001; -- sw $10, 65($0)

0020 : 00001000000000000000000000000000; -- j 0

0021 : 00010000100101000000000000000010; -- bne $2, $10, 2

0022 : 00101101000000000000000000000001; -- addi $20, $0, 1

0023 : 00010000001010000000000000000001; -- bne $0, $20, 1

0024 : 00101101000000000000000000000000; -- addi $20, $0, 0

0025 : 01000111100000000000000001000010; -- lw $30, 66($0)

0026 : 01000000110000100000000000000000; -- lw $3, 0($1)

0027 : 00101010100000000000000000001110; -- addi $10 $0 14

0028 : 00000010110101000011000000001000; -- and $11, $10, $3

0029 : 00010010110000000000000000000100; -- bne $11, $0, 4

0030 : 00101010100000011111111111111111; -- addi $10, $0, -1

0031 : 00111010100000000000000001000000; -- sw $10, 64($0)

0032 : 00111010100000000000000001000001; -- sw $10, 65($0)

0033 : 00001000000000000000000000000000; -- j 0

0034 : 00101010100000000000000000000001; -- addi $10 $0 1

0035 : 00000011000101000011000000001000; -- and $12, $10, $3

0036 : 00000011010101011110000000001000; -- and $13, $10, $30

0037 : 00010011000110100000000000000001; -- bne $12, $13, 1

0038 : 00010010100000000000000000000100; -- bne $10, $0, 4

0039 : 00101010100000011111111111111111; -- addi $10, $0, -1

0040 : 00111010100000000000000001000000; -- sw $10, 64($0)

0041 : 00111010100000000000000001000001; -- sw $10, 65($0)

0042 : 00001000000000000000000000000000; -- j 0

0043 : 00010101000000000000000000000001; -- bne $20 $0 1

0044 : 00001000000000000000000000111011; -- j handle2Valid

0045 : 00001000000000000000000000111101; -- j handle2InValid

0046 : 00001000000000000000000000000000; -- j 0

0047 : 00101100100000000000000001001001; --     addi $18, $0, 73

0048 : 00101100010000000000000000100100; --     addi $17, $0, 36

0049 : 00111100101000100000000000000000; --     sw $18, 0($17)

0050 : 00100111110000000000000000000000; --     jr $31

0051 : 00101100100000000000000001001001; --     addi $18, $0, 73

0052 : 00101100010000000000000000100101; --     addi $17, $0, 37

0053 : 00111100101000100000000000000000; --     sw $18, 0($17)

0054 : 00100111110000000000000000000000; --     jr $31

0055 : 00101100100000000000000001001001; --     addi $18, $0, 73

0056 : 00101100010000000000000000100110; --     addi $17, $0, 38

0057 : 00111100101000100000000000000000; --     sw $18, 0($17)

0058 : 00100111110000000000000000000000; --     jr $31

0059 : 01000001000001000000000000000000; --     lw $4, 0($2)

0060 : 00001000000000000000000100001000; --     j move

0061 : 00101010100000000000000000001110; --     addi $10 $0 14

0062 : 00000010110101000011000000001000; --     and $11, $10, $3

0063 : 00000010110101100000000010010100; --     sra $11, $11, 1

0064 : 00101010100000011111111111111111; --     addi $10, $0, -1

0065 : 00111010100000000000000001100100; --     sw $10, 100($0)

0066 : 00111010100000000000000001100101; --     sw $10, 101($0)

0067 : 00111010100000000000000001100110; --     sw $10, 102($0)

0068 : 00111010100000000000000001100111; --     sw $10, 103($0)

0069 : 00111010100000000000000001101000; --     sw $10, 104($0)

0070 : 00111010100000000000000001101001; --     sw $10, 105($0)

0071 : 00111010100000000000000001101010; --     sw $10, 106($0)

0072 : 00111010100000000000000001101011; --     sw $10, 107($0)

0073 : 00111010100000000000000001101100; --     sw $10, 108($0)

0074 : 00111010100000000000000001101101; --     sw $10, 109($0)

0075 : 00111010100000000000000001101110; --     sw $10, 110($0)

0076 : 00111010100000000000000001101111; --     sw $10, 111($0)

0077 : 00111010100000000000000001110000; --     sw $10, 112($0)

0078 : 00111010100000000000000001110001; --     sw $10, 113($0)

0079 : 00111010100000000000000001110010; --     sw $10, 114($0)

0080 : 00111010100000000000000001110011; --     sw $10, 115($0)

0081 : 00111010100000000000000001110100; --     sw $10, 116($0)

0082 : 00111010100000000000000001110101; --     sw $10, 117($0)

0083 : 00111010100000000000000001110110; --     sw $10, 118($0)

0084 : 00111010100000000000000001110111; --     sw $10, 119($0)

0085 : 00111010100000000000000001111000; --     sw $10, 120($0)

0086 : 00111010100000000000000001111001; --     sw $10, 121($0)

0087 : 00111010100000000000000001111010; --     sw $10, 122($0)

0088 : 00111010100000000000000001111011; --     sw $10, 123($0)

0089 : 00111010100000000000000001111100; --     sw $10, 124($0)

0090 : 00111010100000000000000001111101; --     sw $10, 125($0)

0091 : 00111010100000000000000001111110; --     sw $10, 126($0)

0092 : 00111010100000000000000001111111; --     sw $10, 127($0)

0093 : 00111010100000000000000010000000; --     sw $10, 128($0)

0094 : 00111010100000000000000010000001; --     sw $10, 129($0)

0095 : 00111010100000000000000010000010; --     sw $10, 130($0)

0096 : 00111010100000000000000010000011; --     sw $10, 131($0)

0097 : 00101010100000000000000000000001; --     addi $10 $0 1

0098 : 00010010110101000000000000000001; --     bne $11 $10 1

0099 : 00001000000000000000000001100101; --     j handleKnight

0100 : 00001000000000000000000000000000; --     j 0

0101 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0102 : 00101001110011100000000000000001; --     addi $7, $7, 1

0103 : 00101010000100000000000000000010; --     addi $8, $8, 2

0104 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0105 : 00101100110000000000000000000001; --     addi $19, $0, 1

0106 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0107 : 00000010100100000000000110010000; --     sll $10, $8, 3

0108 : 00000010100101000111000000000000; --     add $10, $10, $7

0109 : 01000010110101000000000000000000; --     lw $11, 0($10)

0110 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0111 : 00000011010101101100000000001000; --     and $13, $11, $12

0112 : 00000010110101101101000000000100; --     sub $11, $11, $13

0113 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0114 : 00111010110101000000000000000000; --     sw $11, 0($10)

0115 : 00111010100000000000000001100100; --     sw $10, 100($0)

0116 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0117 : 00101001110011100000000000000001; --     addi $7, $7, 1

0118 : 00101010000100011111111111111110; --     addi $8, $8, -2

0119 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0120 : 00101100110000000000000000000001; --     addi $19, $0, 1

0121 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0122 : 00000010100100000000000110010000; --     sll $10, $8, 3

0123 : 00000010100101000111000000000000; --     add $10, $10, $7

0124 : 01000010110101000000000000000000; --     lw $11, 0($10)

0125 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0126 : 00000011010101101100000000001000; --     and $13, $11, $12

0127 : 00000010110101101101000000000100; --     sub $11, $11, $13

0128 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0129 : 00111010110101000000000000000000; --     sw $11, 0($10)

0130 : 00111010100000000000000001100101; --     sw $10, 101($0)

0131 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0132 : 00101001110011111111111111111111; --     addi $7, $7, -1

0133 : 00101010000100000000000000000010; --     addi $8, $8, 2

0134 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0135 : 00101100110000000000000000000001; --     addi $19, $0, 1

0136 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0137 : 00000010100100000000000110010000; --     sll $10, $8, 3

0138 : 00000010100101000111000000000000; --     add $10, $10, $7

0139 : 01000010110101000000000000000000; --     lw $11, 0($10)

0140 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0141 : 00000011010101101100000000001000; --     and $13, $11, $12

0142 : 00000010110101101101000000000100; --     sub $11, $11, $13

0143 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0144 : 00111010110101000000000000000000; --     sw $11, 0($10)

0145 : 00111010100000000000000001100110; --     sw $10, 102($0)

0146 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0147 : 00101001110011111111111111111111; --     addi $7, $7, -1

0148 : 00101010000100011111111111111110; --     addi $8, $8, -2

0149 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0150 : 00101100110000000000000000000001; --     addi $19, $0, 1

0151 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0152 : 00000010100100000000000110010000; --     sll $10, $8, 3

0153 : 00000010100101000111000000000000; --     add $10, $10, $7

0154 : 01000010110101000000000000000000; --     lw $11, 0($10)

0155 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0156 : 00000011010101101100000000001000; --     and $13, $11, $12

0157 : 00000010110101101101000000000100; --     sub $11, $11, $13

0158 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0159 : 00111010110101000000000000000000; --     sw $11, 0($10)

0160 : 00111010100000000000000001100111; --     sw $10, 103($0)

0161 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0162 : 00101001110011100000000000000010; --     addi $7, $7, 2

0163 : 00101010000100000000000000000001; --     addi $8, $8, 1

0164 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0165 : 00101100110000000000000000000001; --     addi $19, $0, 1

0166 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0167 : 00000010100100000000000110010000; --     sll $10, $8, 3

0168 : 00000010100101000111000000000000; --     add $10, $10, $7

0169 : 01000010110101000000000000000000; --     lw $11, 0($10)

0170 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0171 : 00000011010101101100000000001000; --     and $13, $11, $12

0172 : 00000010110101101101000000000100; --     sub $11, $11, $13

0173 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0174 : 00111010110101000000000000000000; --     sw $11, 0($10)

0175 : 00111010100000000000000001101000; --     sw $10, 104($0)

0176 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0177 : 00101001110011100000000000000010; --     addi $7, $7, 2

0178 : 00101010000100011111111111111111; --     addi $8, $8, -1

0179 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0180 : 00101100110000000000000000000001; --     addi $19, $0, 1

0181 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0182 : 00000010100100000000000110010000; --     sll $10, $8, 3

0183 : 00000010100101000111000000000000; --     add $10, $10, $7

0184 : 01000010110101000000000000000000; --     lw $11, 0($10)

0185 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0186 : 00000011010101101100000000001000; --     and $13, $11, $12

0187 : 00000010110101101101000000000100; --     sub $11, $11, $13

0188 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0189 : 00111010110101000000000000000000; --     sw $11, 0($10)

0190 : 00111010100000000000000001101001; --     sw $10, 105($0)

0191 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0192 : 00101001110011111111111111111110; --     addi $7, $7, -2

0193 : 00101010000100000000000000000001; --     addi $8, $8, 1

0194 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0195 : 00101100110000000000000000000001; --     addi $19, $0, 1

0196 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0197 : 00000010100100000000000110010000; --     sll $10, $8, 3

0198 : 00000010100101000111000000000000; --     add $10, $10, $7

0199 : 01000010110101000000000000000000; --     lw $11, 0($10)

0200 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0201 : 00000011010101101100000000001000; --     and $13, $11, $12

0202 : 00000010110101101101000000000100; --     sub $11, $11, $13

0203 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0204 : 00111010110101000000000000000000; --     sw $11, 0($10)

0205 : 00111010100000000000000001101010; --     sw $10, 106($0)

0206 : 00011000000000000000000011011110; --     jal parseXY # parses $1 to make $7=x and $8=y

0207 : 00101001110011111111111111111110; --     addi $7, $7, -2

0208 : 00101010000100011111111111111111; --     addi $8, $8, -1

0209 : 00011000000000000000000011100100; --     jal validateDestination #writes to $9 if valid move

0210 : 00101100110000000000000000000001; --     addi $19, $0, 1

0211 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0212 : 00000010100100000000000110010000; --     sll $10, $8, 3

0213 : 00000010100101000111000000000000; --     add $10, $10, $7

0214 : 01000010110101000000000000000000; --     lw $11, 0($10)

0215 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0216 : 00000011010101101100000000001000; --     and $13, $11, $12

0217 : 00000010110101101101000000000100; --     sub $11, $11, $13

0218 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0219 : 00111010110101000000000000000000; --     sw $11, 0($10)

0220 : 00111010100000000000000001101011; --     sw $10, 107($0)

0221 : 00001000000000000000000000000000; --     j 0

0222 : 00101011000000000000000000000111; --     addi $12, $0, 7 #lsb x mask 000111

0223 : 00101011010000000000000000111000; --     addi $13, $0, 56 #lsb y mask 111000

0224 : 00000001110000101100000000001000; --     and $7, $1, $12

0225 : 00000010000000101101000000001000; --     and $8, $1, $13

0226 : 00000010000100000000000110010100; --     sra $8, $8, 3

0227 : 00100111110000000000000000000000; --     jr $31

0228 : 00101010100000000000000000000001; --     addi $10 $0 1

0229 : 00110001110000000000000000000001; --     blt $7 $0 1

0230 : 00010000000101000000000000000010; --     bne $0 $10 2

0231 : 00101010010000000000000000000000; --     addi $9 $0 0

0232 : 00100111110000000000000000000000; --     jr $31

0233 : 00101010100000000000000000000111; --     addi $10 $0 7

0234 : 00110010100011100000000000000001; --     blt $10 $7 1

0235 : 00010000000101000000000000000010; --     bne $0 $10 2

0236 : 00101010010000000000000000000000; --     addi $9 $0 0

0237 : 00100111110000000000000000000000; --     jr $31

0238 : 00101010100000000000000000000001; --     addi $10 $0 1

0239 : 00110010000000000000000000000001; --     blt $8 $0 1

0240 : 00010000000101000000000000000010; --     bne $0 $10 2

0241 : 00101010010000000000000000000000; --     addi $9 $0 0

0242 : 00100111110000000000000000000000; --     jr $31

0243 : 00101010100000000000000000000111; --     addi $10 $0 7

0244 : 00110010100100000000000000000001; --     blt $10 $8 1

0245 : 00010000000101000000000000000010; --     bne $0 $10 2

0246 : 00101010010000000000000000000000; --     addi $9 $0 0

0247 : 00100111110000000000000000000000; --     jr $31

0248 : 00101010100000000000000000000001; --     addi $10, $0, 1

0249 : 00000010110101011110000000001000; --     and $11, $10, $30

0250 : 00000011000100000000000110010000; --     sll $12 $8 3

0251 : 00000011000110000111000000000000; --     add $12 $12 $7

0252 : 01000011010110000000000000000000; --     lw $13 0($12)

0253 : 00101011110000000000000000001110; --     addi $15 $0 14 #piece mask

0254 : 00000011100110101111000000001000; --     and $14 $13 $15

0255 : 00010011100000000000000000000010; --     bne $14 $0 2

0256 : 00101010010000000000000000000001; --     addi $9 $0 1

0257 : 00100111110000000000000000000000; --     jr $31

0258 : 00000011100110101010000000001000; --     and $14 $13 $10

0259 : 00010011100101100000000000000010; --     bne $14, $11, 2

0260 : 00101010010000000000000000000000; --     addi $9 $0 0

0261 : 00100111110000000000000000000000; --     jr $31

0262 : 00101010010000000000000000000001; --     addi $9 $0 1

0263 : 00100111110000000000000000000000; --     jr $31

0264 : 01000010100000000000000001100100; --     lw $10 100($0)

0265 : 00010010100001000000000000000001; --     bne $10, $2, 1

0266 : 00001000000000000000000110111000; --     j handle_valid

0267 : 01000010100000000000000001100101; --     lw $10 101($0)

0268 : 00010010100001000000000000000001; --     bne $10, $2, 1

0269 : 00001000000000000000000110111000; --     j handle_valid

0270 : 01000010100000000000000001100110; --     lw $10 102($0)

0271 : 00010010100001000000000000000001; --     bne $10, $2, 1

0272 : 00001000000000000000000110111000; --     j handle_valid

0273 : 01000010100000000000000001100111; --     lw $10 103($0)

0274 : 00010010100001000000000000000001; --     bne $10, $2, 1

0275 : 00001000000000000000000110111000; --     j handle_valid

0276 : 01000010100000000000000001101000; --     lw $10 104($0)

0277 : 00010010100001000000000000000001; --     bne $10, $2, 1

0278 : 00001000000000000000000110111000; --     j handle_valid

0279 : 01000010100000000000000001101001; --     lw $10 105($0)

0280 : 00010010100001000000000000000001; --     bne $10, $2, 1

0281 : 00001000000000000000000110111000; --     j handle_valid

0282 : 01000010100000000000000001101010; --     lw $10 106($0)

0283 : 00010010100001000000000000000001; --     bne $10, $2, 1

0284 : 00001000000000000000000110111000; --     j handle_valid

0285 : 01000010100000000000000001101011; --     lw $10 107($0)

0286 : 00010010100001000000000000000001; --     bne $10, $2, 1

0287 : 00001000000000000000000110111000; --     j handle_valid

0288 : 01000010100000000000000001101100; --     lw $10 108($0)

0289 : 00010010100001000000000000000001; --     bne $10, $2, 1

0290 : 00001000000000000000000110111000; --     j handle_valid

0291 : 01000010100000000000000001101101; --     lw $10 109($0)

0292 : 00010010100001000000000000000001; --     bne $10, $2, 1

0293 : 00001000000000000000000110111000; --     j handle_valid

0294 : 01000010100000000000000001101110; --     lw $10 110($0)

0295 : 00010010100001000000000000000001; --     bne $10, $2, 1

0296 : 00001000000000000000000110111000; --     j handle_valid

0297 : 01000010100000000000000001101111; --     lw $10 111($0)

0298 : 00010010100001000000000000000001; --     bne $10, $2, 1

0299 : 00001000000000000000000110111000; --     j handle_valid

0300 : 01000010100000000000000001110000; --     lw $10 112($0)

0301 : 00010010100001000000000000000001; --     bne $10, $2, 1

0302 : 00001000000000000000000110111000; --     j handle_valid

0303 : 01000010100000000000000001110001; --     lw $10 113($0)

0304 : 00010010100001000000000000000001; --     bne $10, $2, 1

0305 : 00001000000000000000000110111000; --     j handle_valid

0306 : 01000010100000000000000001110010; --     lw $10 114($0)

0307 : 00010010100001000000000000000001; --     bne $10, $2, 1

0308 : 00001000000000000000000110111000; --     j handle_valid

0309 : 01000010100000000000000001110011; --     lw $10 115($0)

0310 : 00010010100001000000000000000001; --     bne $10, $2, 1

0311 : 00001000000000000000000110111000; --     j handle_valid

0312 : 01000010100000000000000001110100; --     lw $10 116($0)

0313 : 00010010100001000000000000000001; --     bne $10, $2, 1

0314 : 00001000000000000000000110111000; --     j handle_valid

0315 : 01000010100000000000000001110101; --     lw $10 117($0)

0316 : 00010010100001000000000000000001; --     bne $10, $2, 1

0317 : 00001000000000000000000110111000; --     j handle_valid

0318 : 01000010100000000000000001110110; --     lw $10 118($0)

0319 : 00010010100001000000000000000001; --     bne $10, $2, 1

0320 : 00001000000000000000000110111000; --     j handle_valid

0321 : 01000010100000000000000001110111; --     lw $10 119($0)

0322 : 00010010100001000000000000000001; --     bne $10, $2, 1

0323 : 00001000000000000000000110111000; --     j handle_valid

0324 : 01000010100000000000000001111000; --     lw $10 120($0)

0325 : 00010010100001000000000000000001; --     bne $10, $2, 1

0326 : 00001000000000000000000110111000; --     j handle_valid

0327 : 01000010100000000000000001111001; --     lw $10 121($0)

0328 : 00010010100001000000000000000001; --     bne $10, $2, 1

0329 : 00001000000000000000000110111000; --     j handle_valid

0330 : 01000010100000000000000001111010; --     lw $10 122($0)

0331 : 00010010100001000000000000000001; --     bne $10, $2, 1

0332 : 00001000000000000000000110111000; --     j handle_valid

0333 : 01000010100000000000000001111011; --     lw $10 123($0)

0334 : 00010010100001000000000000000001; --     bne $10, $2, 1

0335 : 00001000000000000000000110111000; --     j handle_valid

0336 : 01000010100000000000000001111100; --     lw $10 124($0)

0337 : 00010010100001000000000000000001; --     bne $10, $2, 1

0338 : 00001000000000000000000110111000; --     j handle_valid

0339 : 01000010100000000000000001111101; --     lw $10 125($0)

0340 : 00010010100001000000000000000001; --     bne $10, $2, 1

0341 : 00001000000000000000000110111000; --     j handle_valid

0342 : 01000010100000000000000001111110; --     lw $10 126($0)

0343 : 00010010100001000000000000000001; --     bne $10, $2, 1

0344 : 00001000000000000000000110111000; --     j handle_valid

0345 : 01000010100000000000000001111111; --     lw $10 127($0)

0346 : 00010010100001000000000000000001; --     bne $10, $2, 1

0347 : 00001000000000000000000110111000; --     j handle_valid

0348 : 00001000000000000000000101011101; --     j restoreColors

0349 : 00101010100000000000000000000000; --     addi $10, $0, 0 #iterator i

0350 : 00101010110000000000000001000000; --     addi $11, $0, 64 #upper loop bound

0351 : 00101011000000000000000000000001; --     addi $12, $0, 1 #lsb x mask 0001

0352 : 00101011010000000000000000001000; --     addi $13, $0, 8 #lsb y mask 1000

0353 : 00101011100000000000000011110000; --     addi $14, $0, 240 #square color mask 11110000

0354 : 00011000000000000000000000110011; --     jal debug2

0355 : 00001000000000000000000101100100; --     j startLoopRestoreColors

0356 : 00010010100101100000000000000001; --     bne $10, $11, 1

0357 : 00001000000000000000000101110100; --     j endLoopRestoreColors

0358 : 01000011110101000000000000000000; --     lw $15, 0($10)

0359 : 00000100000111001111000000001000; --     and $16, $14, $15

0360 : 00000011110111110000000000000100; --     sub $15, $15, $16

0361 : 00000100010101001100000000001000; --     and $17, $10, $12

0362 : 00000100100101001101000000001000; --     and $18, $10, $13

0363 : 00000100101001000000000110010100; --     sra $18, $18, 3

0364 : 00000100111000110010000000000100; --     sub $19, $17, $18

0365 : 00010100110000000000000000000010; --     bne $19, $0, 2

0366 : 00101011110111100000000010000000; --     addi $15, $15, 128 #10000000

0367 : 00010011000000000000000000000001; --     bne $12, $0, 1 #just to skip running the write white sq part

0368 : 00101011110111100000000001000000; --     addi $15, $15, 64 #01000000

0369 : 00111011110101000000000000000000; --     sw $15, 0($10)

0370 : 00101010100101000000000000000001; --     addi $10, $10, 1 #i = i + 1

0371 : 00001000000000000000000101100100; --     j startLoopRestoreColors #end loooooop

0372 : 00011000000000000000000000110111; --     jal debug3

0373 : 00101000010000000000000000000000; --     addi $1, $0, 0

0374 : 00101000100000000000000000000000; --     addi $2, $0, 0

0375 : 00101000110000000000000000000000; --     addi $3, $0, 0

0376 : 00101001000000000000000000000000; --     addi $4, $0, 0

0377 : 00101001010000000000000000000000; --     addi $5, $0, 0

0378 : 00101001100000000000000000000000; --     addi $6, $0, 0

0379 : 00101001110000000000000000000000; --     addi $7, $0, 0

0380 : 00101010000000000000000000000000; --     addi $8, $0, 0

0381 : 00101010010000000000000000000000; --     addi $9, $0, 0

0382 : 00101010100000000000000000000000; --     addi $10, $0, 0

0383 : 00101010110000000000000000000000; --     addi $11, $0, 0

0384 : 00101011000000000000000000000000; --     addi $12, $0, 0

0385 : 00101011010000000000000000000000; --     addi $13, $0, 0

0386 : 00101011100000000000000000000000; --     addi $14, $0, 0

0387 : 00101011110000000000000000000000; --     addi $15, $0, 0

0388 : 00101100000000000000000000000000; --     addi $16, $0, 0

0389 : 00101100010000000000000000000000; --     addi $17, $0, 0

0390 : 00101100100000000000000000000000; --     addi $18, $0, 0

0391 : 00101100110000000000000000000000; --     addi $19, $0, 0

0392 : 00101101000000000000000000000000; --     addi $20, $0, 0

0393 : 00101101010000000000000000000000; --     addi $21, $0, 0

0394 : 00101101100000000000000000000000; --     addi $22, $0, 0

0395 : 00101101110000000000000000000000; --     addi $23, $0, 0

0396 : 00101110000000000000000000000000; --     addi $24, $0, 0

0397 : 00101110010000000000000000000000; --     addi $25, $0, 0

0398 : 00101110100000000000000000000000; --     addi $26, $0, 0

0399 : 00101110110000000000000000000000; --     addi $27, $0, 0

0400 : 00101111000000000000000000000000; --     addi $28, $0, 0

0401 : 00101111010000000000000000000000; --     addi $29, $0, 0

0402 : 00101111100000000000000000000000; --     addi $30, $0, 0

0403 : 00101010100000011111111111111111; --     addi $10, $0, -1

0404 : 00111010100000000000000001000000; --     sw $10, 64($0)

0405 : 00111010100000000000000001000001; --     sw $10, 65($0)

0406 : 00101010100000011111111111111111; --     addi $10, $0, -1

0407 : 00111010100000000000000001100100; --     sw $10, 100($0)

0408 : 00111010100000000000000001100101; --     sw $10, 101($0)

0409 : 00111010100000000000000001100110; --     sw $10, 102($0)

0410 : 00111010100000000000000001100111; --     sw $10, 103($0)

0411 : 00111010100000000000000001101000; --     sw $10, 104($0)

0412 : 00111010100000000000000001101001; --     sw $10, 105($0)

0413 : 00111010100000000000000001101010; --     sw $10, 106($0)

0414 : 00111010100000000000000001101011; --     sw $10, 107($0)

0415 : 00111010100000000000000001101100; --     sw $10, 108($0)

0416 : 00111010100000000000000001101101; --     sw $10, 109($0)

0417 : 00111010100000000000000001101110; --     sw $10, 110($0)

0418 : 00111010100000000000000001101111; --     sw $10, 111($0)

0419 : 00111010100000000000000001110000; --     sw $10, 112($0)

0420 : 00111010100000000000000001110001; --     sw $10, 113($0)

0421 : 00111010100000000000000001110010; --     sw $10, 114($0)

0422 : 00111010100000000000000001110011; --     sw $10, 115($0)

0423 : 00111010100000000000000001110100; --     sw $10, 116($0)

0424 : 00111010100000000000000001110101; --     sw $10, 117($0)

0425 : 00111010100000000000000001110110; --     sw $10, 118($0)

0426 : 00111010100000000000000001110111; --     sw $10, 119($0)

0427 : 00111010100000000000000001111000; --     sw $10, 120($0)

0428 : 00111010100000000000000001111001; --     sw $10, 121($0)

0429 : 00111010100000000000000001111010; --     sw $10, 122($0)

0430 : 00111010100000000000000001111011; --     sw $10, 123($0)

0431 : 00111010100000000000000001111100; --     sw $10, 124($0)

0432 : 00111010100000000000000001111101; --     sw $10, 125($0)

0433 : 00111010100000000000000001111110; --     sw $10, 126($0)

0434 : 00111010100000000000000001111111; --     sw $10, 127($0)

0435 : 00111010100000000000000010000000; --     sw $10, 128($0)

0436 : 00111010100000000000000010000001; --     sw $10, 129($0)

0437 : 00111010100000000000000010000010; --     sw $10, 130($0)

0438 : 00111010100000000000000010000011; --     sw $10, 131($0)

0439 : 00001000000000000000000000000000; --     j 0

0440 : 00011000000000000000000000101111; --     jal debug

0441 : 00111000110001000000000000000000; --     sw $3, 0($2)

0442 : 00111000000000100000000000000000; --     sw $0, 0($1)

0443 : 00001000000000000000000101011101; --     j restoreColors

[0444..4095] : 00000000000000000000000000000000;
END;
