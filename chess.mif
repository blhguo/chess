DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00000000000000000000000000000000; -- nop

0001 : 00000000000000000000000000000000; -- nop

0002 : 00000000000000000000000000000000; -- nop

0003 : 00000000000000000000000000000000; -- nop

0004 : 00000000000000000000000000000000; -- nop

0005 : 00000000000000000000000000000000; -- nop

0006 : 00000000000000000000000000000000; -- nop

0007 : 00000000000000000000000000000000; -- nop

0008 : 00000000000000000000000000000000; -- nop

0009 : 01000000010000000000000001000000; -- lw $1, 64($0)

0010 : 01000000100000000000000001000001; -- lw $2, 65($0)

0011 : 01000010100000000000000001000011; -- lw $10, 67($0) #RHIT

0012 : 01000011000000000000000001000100; -- lw $12, 68($0) #KHIT

0013 : 01000011010000000000000001000110; -- lw $13 70($0) #LHIT

0014 : 00101010110000000000000000000001; -- addi $11 $0 1

0015 : 00000010100101001100000000000000; -- add $10 $10 $12

0016 : 00000010100101001101000000000000; -- add $10 $10 $13

0017 : 00010010100101100000000000000001; -- bne $10 $11 1

0018 : 00001000000000000000010100010001; -- j reset

0019 : 00101010100000011111111111111111; -- addi $10 $0, -1

0020 : 00010000100101000000000000000001; -- bne $2, $10, 1

0021 : 00010010100000000000000000000001; -- bne $10, $0, 1

0022 : 00101010100000011111111111111111; -- addi $10 $0 -1

0023 : 00010010100000100000000000000110; -- bne $10, $1, 6

0024 : 01000000010000000000000001000101; -- lw $1 69($0)

0025 : 00010010100000100000000000000100; -- bne $10, $1, 4

0026 : 00101010100000011111111111111111; -- addi $10, $0, -1

0027 : 00111010100000000000000001000000; -- sw $10, 64($0)

0028 : 00111010100000000000000001000001; -- sw $10, 65($0)

0029 : 00001000000000000000000000000000; -- j 0

0030 : 00111000010000000000000001000000; -- sw $1 64($0)

0031 : 00010000100101000000000000000010; -- bne $2, $10, 2

0032 : 00101101000000000000000000000001; -- addi $20, $0, 1

0033 : 00010000001010000000000000000001; -- bne $0, $20, 1

0034 : 00101101000000000000000000000000; -- addi $20, $0, 0

0035 : 01000111100000000000000001000010; -- lw $30, 66($0)

0036 : 01000000110000100000000000000000; -- lw $3, 0($1)

0037 : 01000011010000000000000001000101; -- lw $13, 69($0)

0038 : 00111000010000000000000001000101; -- sw $1, 69($0)

0039 : 00010000010110100000000000000010; -- bne $1, $13, 2

0040 : 00101010100000000000000000000001; -- addi $10, $0, 1

0041 : 00010000000101000000000000000001; -- bne $0, $10, 1

0042 : 00001000000000000000010000101111; -- j restoreColors

0043 : 00101010100000000000000000001110; -- addi $10 $0 14

0044 : 00000010110101000011000000001000; -- and $11, $10, $3

0045 : 00010010110000000000000000000100; -- bne $11, $0, 4

0046 : 00101010100000011111111111111111; -- addi $10, $0, -1

0047 : 00111010100000000000000001000000; -- sw $10, 64($0)

0048 : 00111010100000000000000001000001; -- sw $10, 65($0)

0049 : 00001000000000000000000000000000; -- j 0

0050 : 00101010100000000000000000000001; -- addi $10 $0 1

0051 : 00000011000101000011000000001000; -- and $12, $10, $3

0052 : 00000011010101011110000000001000; -- and $13, $10, $30

0053 : 00010011000110100000000000000001; -- bne $12, $13, 1

0054 : 00010010100000000000000000000100; -- bne $10, $0, 4

0055 : 00101010100000011111111111111111; -- addi $10, $0, -1

0056 : 00111010100000000000000001000000; -- sw $10, 64($0)

0057 : 00111010100000000000000001000001; -- sw $10, 65($0)

0058 : 00001000000000000000000000000000; -- j 0

0059 : 00010101000000000000000000000001; -- bne $20 $0 1

0060 : 00001000000000000000000001001011; -- j handle2Valid

0061 : 00001000000000000000000001001101; -- j handle2InValid

0062 : 00001000000000000000000000000000; -- j 0

0063 : 00101100100000000000000001001001; --     addi $18, $0, 73

0064 : 00101100010000000000000000100100; --     addi $17, $0, 36

0065 : 00111100101000100000000000000000; --     sw $18, 0($17)

0066 : 00100111110000000000000000000000; --     jr $31

0067 : 00101100100000000000000001001001; --     addi $18, $0, 73

0068 : 00101100010000000000000000100101; --     addi $17, $0, 37

0069 : 00111100101000100000000000000000; --     sw $18, 0($17)

0070 : 00100111110000000000000000000000; --     jr $31

0071 : 00101100100000000000000001001001; --     addi $18, $0, 73

0072 : 00101100010000000000000000100110; --     addi $17, $0, 38

0073 : 00111100101000100000000000000000; --     sw $18, 0($17)

0074 : 00100111110000000000000000000000; --     jr $31

0075 : 01000001000001000000000000000000; --     lw $4, 0($2)

0076 : 00001000000000000000001111011000; --     j move

0077 : 01000010110000100000000000000000; --     lw $11, 0($1)

0078 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0079 : 00000011010101101100000000001000; --     and $13, $11, $12

0080 : 00000010110101101101000000000100; --     sub $11, $11, $13

0081 : 00101010110101100000000000110000; --     addi $11, $11, 48 #hazel sq color 00110000

0082 : 00111010110000100000000000000000; --     sw $11, 0($1)

0083 : 00101010100000000000000000001110; --     addi $10 $0 14

0084 : 00000010110101000011000000001000; --     and $11, $10, $3

0085 : 00000010110101100000000010010100; --     sra $11, $11, 1

0086 : 00101010100000011111111111111111; --     addi $10, $0, -1

0087 : 00111010100000000000000001100100; --     sw $10, 100($0)

0088 : 00111010100000000000000001100101; --     sw $10, 101($0)

0089 : 00111010100000000000000001100110; --     sw $10, 102($0)

0090 : 00111010100000000000000001100111; --     sw $10, 103($0)

0091 : 00111010100000000000000001101000; --     sw $10, 104($0)

0092 : 00111010100000000000000001101001; --     sw $10, 105($0)

0093 : 00111010100000000000000001101010; --     sw $10, 106($0)

0094 : 00111010100000000000000001101011; --     sw $10, 107($0)

0095 : 00111010100000000000000001101100; --     sw $10, 108($0)

0096 : 00111010100000000000000001101101; --     sw $10, 109($0)

0097 : 00111010100000000000000001101110; --     sw $10, 110($0)

0098 : 00111010100000000000000001101111; --     sw $10, 111($0)

0099 : 00111010100000000000000001110000; --     sw $10, 112($0)

0100 : 00111010100000000000000001110001; --     sw $10, 113($0)

0101 : 00111010100000000000000001110010; --     sw $10, 114($0)

0102 : 00111010100000000000000001110011; --     sw $10, 115($0)

0103 : 00111010100000000000000001110100; --     sw $10, 116($0)

0104 : 00111010100000000000000001110101; --     sw $10, 117($0)

0105 : 00111010100000000000000001110110; --     sw $10, 118($0)

0106 : 00111010100000000000000001110111; --     sw $10, 119($0)

0107 : 00111010100000000000000001111000; --     sw $10, 120($0)

0108 : 00111010100000000000000001111001; --     sw $10, 121($0)

0109 : 00111010100000000000000001111010; --     sw $10, 122($0)

0110 : 00111010100000000000000001111011; --     sw $10, 123($0)

0111 : 00111010100000000000000001111100; --     sw $10, 124($0)

0112 : 00111010100000000000000001111101; --     sw $10, 125($0)

0113 : 00111010100000000000000001111110; --     sw $10, 126($0)

0114 : 00111010100000000000000001111111; --     sw $10, 127($0)

0115 : 00111010100000000000000010000000; --     sw $10, 128($0)

0116 : 00111010100000000000000010000001; --     sw $10, 129($0)

0117 : 00111010100000000000000010000010; --     sw $10, 130($0)

0118 : 00111010100000000000000010000011; --     sw $10, 131($0)

0119 : 00101010100000000000000000000001; --     addi $10 $0 1

0120 : 00010010110101000000000000000001; --     bne $11 $10 1

0121 : 00001000000000000000001100110101; --     j handleKnight

0122 : 00101010100000000000000000000010; --     addi $10 $0 2

0123 : 00010010110101000000000000000001; --     bne $11 $10 1

0124 : 00001000000000000000001000000100; --     j handleKing

0125 : 00101010100000000000000000000011; --     addi $10 $0 3

0126 : 00010010110101000000000000000001; --     bne $11 $10 1

0127 : 00001000000000000000000010001010; --     j handleQueen

0128 : 00101010100000000000000000000100; --     addi $10 $0 4

0129 : 00010010110101000000000000000001; --     bne $11 $10 1

0130 : 00001000000000000000001001111001; --     j handleBishop

0131 : 00101010100000000000000000000101; --     addi $10 $0 5

0132 : 00010010110101000000000000000001; --     bne $11 $10 1

0133 : 00001000000000000000001011011011; --     j handleRook

0134 : 00101010100000000000000000000110; --     addi $10 $0 6

0135 : 00010010110101000000000000000001; --     bne $11 $10 1

0136 : 00001000000000000000000101000111; --     j handlePawn

0137 : 00001000000000000000000000000000; --     j 0

0138 : 00001000000000000000000010001011; --     j handleQueenDiag

0139 : 00101001100000000000000001100100; --     addi $6, $0, 100

0140 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0141 : 00101001110011100000000000000001; --     addi $7, $7, 1

0142 : 00101010000100000000000000000001; --     addi $8, $8, 1

0143 : 00001000000000000000000010010000; --     j startLoopQueenXAdd1YAdd1

0144 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0145 : 00010010010000000000000000000001; --     bne $9, $0, 1

0146 : 00001000000000000000000010100100; --     j endLoopQueenXAdd1YAdd1

0147 : 00000010100100000000000110010000; --     sll $10, $8, 3

0148 : 00000010100101000111000000000000; --     add $10, $10, $7

0149 : 01000010110101000000000000000000; --     lw $11, 0($10)

0150 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0151 : 00000011010101101100000000001000; --     and $13, $11, $12

0152 : 00000010110101101101000000000100; --     sub $11, $11, $13

0153 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0154 : 00111010110101000000000000000000; --     sw $11, 0($10)

0155 : 00111010100011000000000000000000; --     sw $10, 0($6)

0156 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0157 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0158 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0159 : 00010011000000000000000000000011; --     bne $12, $0, 3

0160 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0161 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0162 : 00001000000000000000000010010000; --     j startLoopQueenXAdd1YAdd1 #end loooooop

0163 : 00001000000000000000000010100100; --     j endLoopQueenXAdd1YAdd1

0164 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0165 : 00101001110011100000000000000001; --     addi $7, $7, 1

0166 : 00101010000100011111111111111111; --     addi $8, $8, -1

0167 : 00001000000000000000000010101000; --     j startLoopQueenXAdd1YSub1

0168 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0169 : 00010010010000000000000000000001; --     bne $9, $0, 1

0170 : 00001000000000000000000010111100; --     j endLoopQueenXAdd1YSub1

0171 : 00000010100100000000000110010000; --     sll $10, $8, 3

0172 : 00000010100101000111000000000000; --     add $10, $10, $7

0173 : 01000010110101000000000000000000; --     lw $11, 0($10)

0174 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0175 : 00000011010101101100000000001000; --     and $13, $11, $12

0176 : 00000010110101101101000000000100; --     sub $11, $11, $13

0177 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0178 : 00111010110101000000000000000000; --     sw $11, 0($10)

0179 : 00111010100011000000000000000000; --     sw $10, 0($6)

0180 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0181 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0182 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0183 : 00010011000000000000000000000011; --     bne $12, $0, 3

0184 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0185 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0186 : 00001000000000000000000010101000; --     j startLoopQueenXAdd1YSub1 #end loooooop

0187 : 00001000000000000000000010111100; --     j endLoopQueenXAdd1YSub1

0188 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0189 : 00101001110011111111111111111111; --     addi $7, $7, -1

0190 : 00101010000100000000000000000001; --     addi $8, $8, 1

0191 : 00001000000000000000000011000000; --     j startLoopQueenXSub1YAdd1

0192 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0193 : 00010010010000000000000000000001; --     bne $9, $0, 1

0194 : 00001000000000000000000011010100; --     j endLoopQueenXSub1YAdd1

0195 : 00000010100100000000000110010000; --     sll $10, $8, 3

0196 : 00000010100101000111000000000000; --     add $10, $10, $7

0197 : 01000010110101000000000000000000; --     lw $11, 0($10)

0198 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0199 : 00000011010101101100000000001000; --     and $13, $11, $12

0200 : 00000010110101101101000000000100; --     sub $11, $11, $13

0201 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0202 : 00111010110101000000000000000000; --     sw $11, 0($10)

0203 : 00111010100011000000000000000000; --     sw $10, 0($6)

0204 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0205 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0206 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0207 : 00010011000000000000000000000011; --     bne $12, $0, 3

0208 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0209 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0210 : 00001000000000000000000011000000; --     j startLoopQueenXSub1YAdd1 #end loooooop

0211 : 00001000000000000000000011010100; --     j endLoopQueenXSub1YAdd1

0212 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0213 : 00101001110011111111111111111111; --     addi $7, $7, -1

0214 : 00101010000100011111111111111111; --     addi $8, $8, -1

0215 : 00001000000000000000000011011000; --     j startLoopQueenXSub1YSub1

0216 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0217 : 00010010010000000000000000000001; --     bne $9, $0, 1

0218 : 00001000000000000000000011101100; --     j endLoopQueenXSub1YSub1

0219 : 00000010100100000000000110010000; --     sll $10, $8, 3

0220 : 00000010100101000111000000000000; --     add $10, $10, $7

0221 : 01000010110101000000000000000000; --     lw $11, 0($10)

0222 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0223 : 00000011010101101100000000001000; --     and $13, $11, $12

0224 : 00000010110101101101000000000100; --     sub $11, $11, $13

0225 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0226 : 00111010110101000000000000000000; --     sw $11, 0($10)

0227 : 00111010100011000000000000000000; --     sw $10, 0($6)

0228 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0229 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0230 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0231 : 00010011000000000000000000000011; --     bne $12, $0, 3

0232 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0233 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0234 : 00001000000000000000000011011000; --     j startLoopQueenXSub1YSub1 #end loooooop

0235 : 00001000000000000000000011101100; --     j endLoopQueenXSub1YSub1

0236 : 00001000000000000000000011101101; --     j handleQueenStraight

0237 : 00101001100000000000000001110010; --     addi $6, $0, 114

0238 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0239 : 00101001110011100000000000000001; --     addi $7, $7, 1

0240 : 00001000000000000000000011110001; --     j startLoopQueenXAdd1

0241 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0242 : 00010010010000000000000000000001; --     bne $9, $0, 1

0243 : 00001000000000000000000100000100; --     j endLoopQueenXAdd1

0244 : 00000010100100000000000110010000; --     sll $10, $8, 3

0245 : 00000010100101000111000000000000; --     add $10, $10, $7

0246 : 01000010110101000000000000000000; --     lw $11, 0($10)

0247 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0248 : 00000011010101101100000000001000; --     and $13, $11, $12

0249 : 00000010110101101101000000000100; --     sub $11, $11, $13

0250 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0251 : 00111010110101000000000000000000; --     sw $11, 0($10)

0252 : 00111010100011000000000000000000; --     sw $10, 0($6)

0253 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0254 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0255 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0256 : 00010011000000000000000000000010; --     bne $12, $0, 2

0257 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0258 : 00001000000000000000000011110001; --     j startLoopQueenXAdd1 #end loooooop

0259 : 00001000000000000000000100000100; --     j endLoopQueenXAdd1

0260 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0261 : 00101001110011111111111111111111; --     addi $7, $7, -1

0262 : 00001000000000000000000100000111; --     j startLoopQueenXSub1

0263 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0264 : 00010010010000000000000000000001; --     bne $9, $0, 1

0265 : 00001000000000000000000100011010; --     j endLoopQueenXSub1

0266 : 00000010100100000000000110010000; --     sll $10, $8, 3

0267 : 00000010100101000111000000000000; --     add $10, $10, $7

0268 : 01000010110101000000000000000000; --     lw $11, 0($10)

0269 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0270 : 00000011010101101100000000001000; --     and $13, $11, $12

0271 : 00000010110101101101000000000100; --     sub $11, $11, $13

0272 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0273 : 00111010110101000000000000000000; --     sw $11, 0($10)

0274 : 00111010100011000000000000000000; --     sw $10, 0($6)

0275 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0276 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0277 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0278 : 00010011000000000000000000000010; --     bne $12, $0, 2

0279 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0280 : 00001000000000000000000100000111; --     j startLoopQueenXSub1 #end loooooop

0281 : 00001000000000000000000100011010; --     j endLoopQueenXSub1

0282 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0283 : 00101010000100000000000000000001; --     addi $8, $8, 1

0284 : 00001000000000000000000100011101; --     j startLoopQueenYAdd1

0285 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0286 : 00010010010000000000000000000001; --     bne $9, $0, 1

0287 : 00001000000000000000000100110000; --     j endLoopQueenYAdd1

0288 : 00000010100100000000000110010000; --     sll $10, $8, 3

0289 : 00000010100101000111000000000000; --     add $10, $10, $7

0290 : 01000010110101000000000000000000; --     lw $11, 0($10)

0291 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0292 : 00000011010101101100000000001000; --     and $13, $11, $12

0293 : 00000010110101101101000000000100; --     sub $11, $11, $13

0294 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0295 : 00111010110101000000000000000000; --     sw $11, 0($10)

0296 : 00111010100011000000000000000000; --     sw $10, 0($6)

0297 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0298 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0299 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0300 : 00010011000000000000000000000010; --     bne $12, $0, 2

0301 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0302 : 00001000000000000000000100011101; --     j startLoopQueenYAdd1 #end loooooop

0303 : 00001000000000000000000100110000; --     j endLoopQueenYAdd1

0304 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0305 : 00101010000100011111111111111111; --     addi $8, $8, -1

0306 : 00001000000000000000000100110011; --     j startLoopQueenYSub1

0307 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0308 : 00010010010000000000000000000001; --     bne $9, $0, 1

0309 : 00001000000000000000000101000110; --     j endLoopQueenYSub1

0310 : 00000010100100000000000110010000; --     sll $10, $8, 3

0311 : 00000010100101000111000000000000; --     add $10, $10, $7

0312 : 01000010110101000000000000000000; --     lw $11, 0($10)

0313 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0314 : 00000011010101101100000000001000; --     and $13, $11, $12

0315 : 00000010110101101101000000000100; --     sub $11, $11, $13

0316 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0317 : 00111010110101000000000000000000; --     sw $11, 0($10)

0318 : 00111010100011000000000000000000; --     sw $10, 0($6)

0319 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0320 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0321 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0322 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0323 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0324 : 00001000000000000000000100110011; --     j startLoopQueenYSub1 #end loooooop

0325 : 00001000000000000000000101000110; --     j endLoopQueenYSub1

0326 : 00001000000000000000000000000000; --     j 0

0327 : 00101010100000000000000000000001; --     addi $10, $0, 1

0328 : 00000010110101011110000000001000; --     and $11, $10, $30

0329 : 00010010110000000000000000000001; --     bne $11, $0, 1

0330 : 00001000000000000000000110101000; --     j whitePawnCheck

0331 : 00001000000000000000000101001100; --     j blackPawnCheck

0332 : 00001000000000000000000101001101; --     j blackPawnCheckSub1

0333 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0334 : 00101010000100011111111111111111; --     addi $8, $8, -1

0335 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0336 : 00010010010000000000000000000001; --     bne $9, $0, 1

0337 : 00001000000000000000000101111100; --     j blackPawnLeftDiagCheck

0338 : 00000010100100000000000110010000; --     sll $10, $8, 3

0339 : 00000010100101000111000000000000; --     add $10, $10, $7

0340 : 01000010110101000000000000000000; --     lw $11, 0($10)

0341 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0342 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0343 : 00010011000000000000000000000001; --     bne $12, $0, 1

0344 : 00010010100000000000000000000001; --     bne $10, $0, 1

0345 : 00001000000000000000000101111100; --     j blackPawnLeftDiagCheck

0346 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0347 : 00000011010101101100000000001000; --     and $13, $11, $12

0348 : 00000010110101101101000000000100; --     sub $11, $11, $13

0349 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0350 : 00000010100100000000000110010000; --     sll $10, $8, 3

0351 : 00000010100101000111000000000000; --     add $10, $10, $7

0352 : 00111010110101000000000000000000; --     sw $11, 0($10)

0353 : 00111010100000000000000001100100; --     sw $10, 100($0)

0354 : 00101010100000000000000000000101; --     addi $10, $0, 5

0355 : 00010010100100000000000000000001; --     bne $10, $8, 1

0356 : 00001000000000000000000101100110; --     j blackPawnYSub2Check

0357 : 00001000000000000000000101111100; --     j blackPawnLeftDiagCheck

0358 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0359 : 00101010000100011111111111111110; --     addi $8, $8, -2

0360 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0361 : 00010010010000000000000000000001; --     bne $9, $0, 1

0362 : 00001000000000000000000101111100; --     j blackPawnLeftDiagCheck

0363 : 00000010100100000000000110010000; --     sll $10, $8, 3

0364 : 00000010100101000111000000000000; --     add $10, $10, $7

0365 : 01000010110101000000000000000000; --     lw $11, 0($10)

0366 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0367 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0368 : 00010011000000000000000000000001; --     bne $12, $0, 1

0369 : 00010010100000000000000000000001; --     bne $10, $0, 1

0370 : 00001000000000000000000101111100; --     j blackPawnLeftDiagCheck

0371 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0372 : 00000011010101101100000000001000; --     and $13, $11, $12

0373 : 00000010110101101101000000000100; --     sub $11, $11, $13

0374 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0375 : 00000010100100000000000110010000; --     sll $10, $8, 3

0376 : 00000010100101000111000000000000; --     add $10, $10, $7

0377 : 00111010110101000000000000000000; --     sw $11, 0($10)

0378 : 00111010100000000000000001100101; --     sw $10, 101($0)

0379 : 00001000000000000000000101111100; --     j blackPawnLeftDiagCheck

0380 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0381 : 00101010000100011111111111111111; --     addi $8, $8, -1

0382 : 00101001110011111111111111111111; --     addi $7, $7, -1

0383 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0384 : 00010010010000000000000000000001; --     bne $9, $0, 1

0385 : 00001000000000000000000110010010; --     j blackPawnRightDiagCheck

0386 : 00000010100100000000000110010000; --     sll $10, $8, 3

0387 : 00000010100101000111000000000000; --     add $10, $10, $7

0388 : 01000010110101000000000000000000; --     lw $11, 0($10)

0389 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0390 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0391 : 00010011000000000000000000000001; --     bne $12, $0, 1

0392 : 00001000000000000000000110010010; --     j blackPawnRightDiagCheck

0393 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0394 : 00000011010101101100000000001000; --     and $13, $11, $12

0395 : 00000010110101101101000000000100; --     sub $11, $11, $13

0396 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0397 : 00000010100100000000000110010000; --     sll $10, $8, 3

0398 : 00000010100101000111000000000000; --     add $10, $10, $7

0399 : 00111010110101000000000000000000; --     sw $11, 0($10)

0400 : 00111010100000000000000001100110; --     sw $10, 102($0)

0401 : 00001000000000000000000110010010; --     j blackPawnRightDiagCheck

0402 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0403 : 00101010000100011111111111111111; --     addi $8, $8, -1

0404 : 00101001110011100000000000000001; --     addi $7, $7, 1

0405 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0406 : 00010010010000000000000000000001; --     bne $9, $0, 1

0407 : 00001000000000000000000000000000; --     j 0

0408 : 00000010100100000000000110010000; --     sll $10, $8, 3

0409 : 00000010100101000111000000000000; --     add $10, $10, $7

0410 : 01000010110101000000000000000000; --     lw $11, 0($10)

0411 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0412 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0413 : 00010011000000000000000000000001; --     bne $12, $0, 1

0414 : 00001000000000000000000000000000; --     j 0

0415 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0416 : 00000011010101101100000000001000; --     and $13, $11, $12

0417 : 00000010110101101101000000000100; --     sub $11, $11, $13

0418 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0419 : 00000010100100000000000110010000; --     sll $10, $8, 3

0420 : 00000010100101000111000000000000; --     add $10, $10, $7

0421 : 00111010110101000000000000000000; --     sw $11, 0($10)

0422 : 00111010100000000000000001100111; --     sw $10, 103($0)

0423 : 00001000000000000000000000000000; --     j 0

0424 : 00001000000000000000000110101001; --     j whitePawnYAdd1Check

0425 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0426 : 00101010000100000000000000000001; --     addi $8, $8, 1

0427 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0428 : 00010010010000000000000000000001; --     bne $9, $0, 1

0429 : 00001000000000000000000111011000; --     j whitePawnLeftDiagCheck

0430 : 00000010100100000000000110010000; --     sll $10, $8, 3

0431 : 00000010100101000111000000000000; --     add $10, $10, $7

0432 : 01000010110101000000000000000000; --     lw $11, 0($10)

0433 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0434 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0435 : 00010011000000000000000000000001; --     bne $12, $0, 1

0436 : 00010010100000000000000000000001; --     bne $10, $0, 1

0437 : 00001000000000000000000111011000; --     j whitePawnLeftDiagCheck

0438 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0439 : 00000011010101101100000000001000; --     and $13, $11, $12

0440 : 00000010110101101101000000000100; --     sub $11, $11, $13

0441 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0442 : 00000010100100000000000110010000; --     sll $10, $8, 3

0443 : 00000010100101000111000000000000; --     add $10, $10, $7

0444 : 00111010110101000000000000000000; --     sw $11, 0($10)

0445 : 00111010100000000000000001100100; --     sw $10, 100($0)

0446 : 00101010100000000000000000000010; --     addi $10, $0, 2

0447 : 00010010100100000000000000000001; --     bne $10, $8, 1

0448 : 00001000000000000000000111000010; --     j whitePawnYAdd2Check

0449 : 00001000000000000000000111011000; --     j whitePawnLeftDiagCheck

0450 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0451 : 00101010000100000000000000000010; --     addi $8, $8, 2

0452 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0453 : 00010010010000000000000000000001; --     bne $9, $0, 1

0454 : 00001000000000000000000111011000; --     j whitePawnLeftDiagCheck

0455 : 00000010100100000000000110010000; --     sll $10, $8, 3

0456 : 00000010100101000111000000000000; --     add $10, $10, $7

0457 : 01000010110101000000000000000000; --     lw $11, 0($10)

0458 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0459 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0460 : 00010011000000000000000000000001; --     bne $12, $0, 1

0461 : 00010010100000000000000000000001; --     bne $10, $0, 1

0462 : 00001000000000000000000111011000; --     j whitePawnLeftDiagCheck

0463 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0464 : 00000011010101101100000000001000; --     and $13, $11, $12

0465 : 00000010110101101101000000000100; --     sub $11, $11, $13

0466 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0467 : 00000010100100000000000110010000; --     sll $10, $8, 3

0468 : 00000010100101000111000000000000; --     add $10, $10, $7

0469 : 00111010110101000000000000000000; --     sw $11, 0($10)

0470 : 00111010100000000000000001100101; --     sw $10, 101($0)

0471 : 00001000000000000000000111011000; --     j whitePawnLeftDiagCheck

0472 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0473 : 00101010000100000000000000000001; --     addi $8, $8, 1

0474 : 00101001110011111111111111111111; --     addi $7, $7, -1

0475 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0476 : 00010010010000000000000000000001; --     bne $9, $0, 1

0477 : 00001000000000000000000111101110; --     j whitePawnRightDiagCheck

0478 : 00000010100100000000000110010000; --     sll $10, $8, 3

0479 : 00000010100101000111000000000000; --     add $10, $10, $7

0480 : 01000010110101000000000000000000; --     lw $11, 0($10)

0481 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0482 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0483 : 00010011000000000000000000000001; --     bne $12, $0, 1

0484 : 00001000000000000000000111101110; --     j whitePawnRightDiagCheck

0485 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0486 : 00000011010101101100000000001000; --     and $13, $11, $12

0487 : 00000010110101101101000000000100; --     sub $11, $11, $13

0488 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0489 : 00000010100100000000000110010000; --     sll $10, $8, 3

0490 : 00000010100101000111000000000000; --     add $10, $10, $7

0491 : 00111010110101000000000000000000; --     sw $11, 0($10)

0492 : 00111010100000000000000001100110; --     sw $10, 102($0)

0493 : 00001000000000000000000111101110; --     j whitePawnRightDiagCheck

0494 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0495 : 00101010000100000000000000000001; --     addi $8, $8, 1

0496 : 00101001110011100000000000000001; --     addi $7, $7, 1

0497 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0498 : 00010010010000000000000000000001; --     bne $9, $0, 1

0499 : 00001000000000000000000000000000; --     j 0

0500 : 00000010100100000000000110010000; --     sll $10, $8, 3

0501 : 00000010100101000111000000000000; --     add $10, $10, $7

0502 : 01000010110101000000000000000000; --     lw $11, 0($10)

0503 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0504 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0505 : 00010011000000000000000000000001; --     bne $12, $0, 1

0506 : 00001000000000000000000000000000; --     j 0

0507 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0508 : 00000011010101101100000000001000; --     and $13, $11, $12

0509 : 00000010110101101101000000000100; --     sub $11, $11, $13

0510 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0511 : 00000010100100000000000110010000; --     sll $10, $8, 3

0512 : 00000010100101000111000000000000; --     add $10, $10, $7

0513 : 00111010110101000000000000000000; --     sw $11, 0($10)

0514 : 00111010100000000000000001100111; --     sw $10, 103($0)

0515 : 00001000000000000000000000000000; --     j 0

0516 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0517 : 00101001110011100000000000000001; --     addi $7, $7, 1

0518 : 00101010000100011111111111111111; --     addi $8, $8, -1

0519 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0520 : 00101100110000000000000000000001; --     addi $19, $0, 1

0521 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0522 : 00000010100100000000000110010000; --     sll $10, $8, 3

0523 : 00000010100101000111000000000000; --     add $10, $10, $7

0524 : 01000010110101000000000000000000; --     lw $11, 0($10)

0525 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0526 : 00000011010101101100000000001000; --     and $13, $11, $12

0527 : 00000010110101101101000000000100; --     sub $11, $11, $13

0528 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0529 : 00111010110101000000000000000000; --     sw $11, 0($10)

0530 : 00111010100000000000000001100100; --     sw $10, 100($0)

0531 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0532 : 00101001110011100000000000000001; --     addi $7, $7, 1

0533 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0534 : 00101100110000000000000000000001; --     addi $19, $0, 1

0535 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0536 : 00000010100100000000000110010000; --     sll $10, $8, 3

0537 : 00000010100101000111000000000000; --     add $10, $10, $7

0538 : 01000010110101000000000000000000; --     lw $11, 0($10)

0539 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0540 : 00000011010101101100000000001000; --     and $13, $11, $12

0541 : 00000010110101101101000000000100; --     sub $11, $11, $13

0542 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0543 : 00111010110101000000000000000000; --     sw $11, 0($10)

0544 : 00111010100000000000000001100101; --     sw $10, 101($0)

0545 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0546 : 00101001110011100000000000000001; --     addi $7, $7, 1

0547 : 00101010000100000000000000000001; --     addi $8, $8, 1

0548 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0549 : 00101100110000000000000000000001; --     addi $19, $0, 1

0550 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0551 : 00000010100100000000000110010000; --     sll $10, $8, 3

0552 : 00000010100101000111000000000000; --     add $10, $10, $7

0553 : 01000010110101000000000000000000; --     lw $11, 0($10)

0554 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0555 : 00000011010101101100000000001000; --     and $13, $11, $12

0556 : 00000010110101101101000000000100; --     sub $11, $11, $13

0557 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0558 : 00111010110101000000000000000000; --     sw $11, 0($10)

0559 : 00111010100000000000000001100110; --     sw $10, 102($0)

0560 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0561 : 00101010000100011111111111111111; --     addi $8, $8, -1

0562 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0563 : 00101100110000000000000000000001; --     addi $19, $0, 1

0564 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0565 : 00000010100100000000000110010000; --     sll $10, $8, 3

0566 : 00000010100101000111000000000000; --     add $10, $10, $7

0567 : 01000010110101000000000000000000; --     lw $11, 0($10)

0568 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0569 : 00000011010101101100000000001000; --     and $13, $11, $12

0570 : 00000010110101101101000000000100; --     sub $11, $11, $13

0571 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0572 : 00111010110101000000000000000000; --     sw $11, 0($10)

0573 : 00111010100000000000000001100111; --     sw $10, 103($0)

0574 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0575 : 00101010000100000000000000000001; --     addi $8, $8, 1

0576 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0577 : 00101100110000000000000000000001; --     addi $19, $0, 1

0578 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0579 : 00000010100100000000000110010000; --     sll $10, $8, 3

0580 : 00000010100101000111000000000000; --     add $10, $10, $7

0581 : 01000010110101000000000000000000; --     lw $11, 0($10)

0582 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0583 : 00000011010101101100000000001000; --     and $13, $11, $12

0584 : 00000010110101101101000000000100; --     sub $11, $11, $13

0585 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0586 : 00111010110101000000000000000000; --     sw $11, 0($10)

0587 : 00111010100000000000000001101000; --     sw $10, 104($0)

0588 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0589 : 00101001110011111111111111111111; --     addi $7, $7, -1

0590 : 00101010000100011111111111111111; --     addi $8, $8, -1

0591 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0592 : 00101100110000000000000000000001; --     addi $19, $0, 1

0593 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0594 : 00000010100100000000000110010000; --     sll $10, $8, 3

0595 : 00000010100101000111000000000000; --     add $10, $10, $7

0596 : 01000010110101000000000000000000; --     lw $11, 0($10)

0597 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0598 : 00000011010101101100000000001000; --     and $13, $11, $12

0599 : 00000010110101101101000000000100; --     sub $11, $11, $13

0600 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0601 : 00111010110101000000000000000000; --     sw $11, 0($10)

0602 : 00111010100000000000000001101001; --     sw $10, 105($0)

0603 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0604 : 00101001110011111111111111111111; --     addi $7, $7, -1

0605 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0606 : 00101100110000000000000000000001; --     addi $19, $0, 1

0607 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0608 : 00000010100100000000000110010000; --     sll $10, $8, 3

0609 : 00000010100101000111000000000000; --     add $10, $10, $7

0610 : 01000010110101000000000000000000; --     lw $11, 0($10)

0611 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0612 : 00000011010101101100000000001000; --     and $13, $11, $12

0613 : 00000010110101101101000000000100; --     sub $11, $11, $13

0614 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0615 : 00111010110101000000000000000000; --     sw $11, 0($10)

0616 : 00111010100000000000000001101010; --     sw $10, 106($0)

0617 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0618 : 00101001110011111111111111111111; --     addi $7, $7, -1

0619 : 00101010000100000000000000000001; --     addi $8, $8, 1

0620 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0621 : 00101100110000000000000000000001; --     addi $19, $0, 1

0622 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0623 : 00000010100100000000000110010000; --     sll $10, $8, 3

0624 : 00000010100101000111000000000000; --     add $10, $10, $7

0625 : 01000010110101000000000000000000; --     lw $11, 0($10)

0626 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0627 : 00000011010101101100000000001000; --     and $13, $11, $12

0628 : 00000010110101101101000000000100; --     sub $11, $11, $13

0629 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0630 : 00111010110101000000000000000000; --     sw $11, 0($10)

0631 : 00111010100000000000000001101011; --     sw $10, 107($0)

0632 : 00001000000000000000000000000000; --     j 0

0633 : 00101001100000000000000001100100; --     addi $6, $0, 100

0634 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0635 : 00101001110011100000000000000001; --     addi $7, $7, 1

0636 : 00101010000100000000000000000001; --     addi $8, $8, 1

0637 : 00001000000000000000001001111110; --     j startLoopBishopXAdd1YAdd1

0638 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0639 : 00010010010000000000000000000001; --     bne $9, $0, 1

0640 : 00001000000000000000001010010010; --     j endLoopBishopXAdd1YAdd1

0641 : 00000010100100000000000110010000; --     sll $10, $8, 3

0642 : 00000010100101000111000000000000; --     add $10, $10, $7

0643 : 01000010110101000000000000000000; --     lw $11, 0($10)

0644 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0645 : 00000011010101101100000000001000; --     and $13, $11, $12

0646 : 00000010110101101101000000000100; --     sub $11, $11, $13

0647 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0648 : 00111010110101000000000000000000; --     sw $11, 0($10)

0649 : 00111010100011000000000000000000; --     sw $10, 0($6)

0650 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0651 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0652 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0653 : 00010011000000000000000000000011; --     bne $12, $0, 3

0654 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0655 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0656 : 00001000000000000000001001111110; --     j startLoopBishopXAdd1YAdd1 #end loooooop

0657 : 00001000000000000000001010010010; --     j endLoopBishopXAdd1YAdd1

0658 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0659 : 00101001110011100000000000000001; --     addi $7, $7, 1

0660 : 00101010000100011111111111111111; --     addi $8, $8, -1

0661 : 00001000000000000000001010010110; --     j startLoopBishopXAdd1YSub1

0662 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0663 : 00010010010000000000000000000001; --     bne $9, $0, 1

0664 : 00001000000000000000001010101010; --     j endLoopBishopXAdd1YSub1

0665 : 00000010100100000000000110010000; --     sll $10, $8, 3

0666 : 00000010100101000111000000000000; --     add $10, $10, $7

0667 : 01000010110101000000000000000000; --     lw $11, 0($10)

0668 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0669 : 00000011010101101100000000001000; --     and $13, $11, $12

0670 : 00000010110101101101000000000100; --     sub $11, $11, $13

0671 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0672 : 00111010110101000000000000000000; --     sw $11, 0($10)

0673 : 00111010100011000000000000000000; --     sw $10, 0($6)

0674 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0675 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0676 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0677 : 00010011000000000000000000000011; --     bne $12, $0, 3

0678 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0679 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0680 : 00001000000000000000001010010110; --     j startLoopBishopXAdd1YSub1 #end loooooop

0681 : 00001000000000000000001010101010; --     j endLoopBishopXAdd1YSub1

0682 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0683 : 00101001110011111111111111111111; --     addi $7, $7, -1

0684 : 00101010000100000000000000000001; --     addi $8, $8, 1

0685 : 00001000000000000000001010101110; --     j startLoopBishopXSub1YAdd1

0686 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0687 : 00010010010000000000000000000001; --     bne $9, $0, 1

0688 : 00001000000000000000001011000010; --     j endLoopBishopXSub1YAdd1

0689 : 00000010100100000000000110010000; --     sll $10, $8, 3

0690 : 00000010100101000111000000000000; --     add $10, $10, $7

0691 : 01000010110101000000000000000000; --     lw $11, 0($10)

0692 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0693 : 00000011010101101100000000001000; --     and $13, $11, $12

0694 : 00000010110101101101000000000100; --     sub $11, $11, $13

0695 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0696 : 00111010110101000000000000000000; --     sw $11, 0($10)

0697 : 00111010100011000000000000000000; --     sw $10, 0($6)

0698 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0699 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0700 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0701 : 00010011000000000000000000000011; --     bne $12, $0, 3

0702 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0703 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0704 : 00001000000000000000001010101110; --     j startLoopBishopXSub1YAdd1 #end loooooop

0705 : 00001000000000000000001011000010; --     j endLoopBishopXSub1YAdd1

0706 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0707 : 00101001110011111111111111111111; --     addi $7, $7, -1

0708 : 00101010000100011111111111111111; --     addi $8, $8, -1

0709 : 00001000000000000000001011000110; --     j startLoopBishopXSub1YSub1

0710 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0711 : 00010010010000000000000000000001; --     bne $9, $0, 1

0712 : 00001000000000000000001011011010; --     j endLoopBishopXSub1YSub1

0713 : 00000010100100000000000110010000; --     sll $10, $8, 3

0714 : 00000010100101000111000000000000; --     add $10, $10, $7

0715 : 01000010110101000000000000000000; --     lw $11, 0($10)

0716 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0717 : 00000011010101101100000000001000; --     and $13, $11, $12

0718 : 00000010110101101101000000000100; --     sub $11, $11, $13

0719 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0720 : 00111010110101000000000000000000; --     sw $11, 0($10)

0721 : 00111010100011000000000000000000; --     sw $10, 0($6)

0722 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0723 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0724 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0725 : 00010011000000000000000000000011; --     bne $12, $0, 3

0726 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0727 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0728 : 00001000000000000000001011000110; --     j startLoopBishopXSub1YSub1 #end loooooop

0729 : 00001000000000000000001011011010; --     j endLoopBishopXSub1YSub1

0730 : 00001000000000000000000000000000; --     j 0

0731 : 00101001100000000000000001100100; --     addi $6, $0, 100

0732 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0733 : 00101001110011100000000000000001; --     addi $7, $7, 1

0734 : 00001000000000000000001011011111; --     j startLoopRookXAdd1

0735 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0736 : 00010010010000000000000000000001; --     bne $9, $0, 1

0737 : 00001000000000000000001011110010; --     j endLoopRookXAdd1

0738 : 00000010100100000000000110010000; --     sll $10, $8, 3

0739 : 00000010100101000111000000000000; --     add $10, $10, $7

0740 : 01000010110101000000000000000000; --     lw $11, 0($10)

0741 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0742 : 00000011010101101100000000001000; --     and $13, $11, $12

0743 : 00000010110101101101000000000100; --     sub $11, $11, $13

0744 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0745 : 00111010110101000000000000000000; --     sw $11, 0($10)

0746 : 00111010100011000000000000000000; --     sw $10, 0($6)

0747 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0748 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0749 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0750 : 00010011000000000000000000000010; --     bne $12, $0, 2

0751 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0752 : 00001000000000000000001011011111; --     j startLoopRookXAdd1 #end loooooop

0753 : 00001000000000000000001011110010; --     j endLoopRookXAdd1

0754 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0755 : 00101001110011111111111111111111; --     addi $7, $7, -1

0756 : 00001000000000000000001011110101; --     j startLoopRookXSub1

0757 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0758 : 00010010010000000000000000000001; --     bne $9, $0, 1

0759 : 00001000000000000000001100001000; --     j endLoopRookXSub1

0760 : 00000010100100000000000110010000; --     sll $10, $8, 3

0761 : 00000010100101000111000000000000; --     add $10, $10, $7

0762 : 01000010110101000000000000000000; --     lw $11, 0($10)

0763 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0764 : 00000011010101101100000000001000; --     and $13, $11, $12

0765 : 00000010110101101101000000000100; --     sub $11, $11, $13

0766 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0767 : 00111010110101000000000000000000; --     sw $11, 0($10)

0768 : 00111010100011000000000000000000; --     sw $10, 0($6)

0769 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0770 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0771 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0772 : 00010011000000000000000000000010; --     bne $12, $0, 2

0773 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0774 : 00001000000000000000001011110101; --     j startLoopRookXSub1 #end loooooop

0775 : 00001000000000000000001100001000; --     j endLoopRookXSub1

0776 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0777 : 00101010000100000000000000000001; --     addi $8, $8, 1

0778 : 00001000000000000000001100001011; --     j startLoopRookYAdd1

0779 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0780 : 00010010010000000000000000000001; --     bne $9, $0, 1

0781 : 00001000000000000000001100011110; --     j endLoopRookYAdd1

0782 : 00000010100100000000000110010000; --     sll $10, $8, 3

0783 : 00000010100101000111000000000000; --     add $10, $10, $7

0784 : 01000010110101000000000000000000; --     lw $11, 0($10)

0785 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0786 : 00000011010101101100000000001000; --     and $13, $11, $12

0787 : 00000010110101101101000000000100; --     sub $11, $11, $13

0788 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0789 : 00111010110101000000000000000000; --     sw $11, 0($10)

0790 : 00111010100011000000000000000000; --     sw $10, 0($6)

0791 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0792 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0793 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0794 : 00010011000000000000000000000010; --     bne $12, $0, 2

0795 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0796 : 00001000000000000000001100001011; --     j startLoopRookYAdd1 #end loooooop

0797 : 00001000000000000000001100011110; --     j endLoopRookYAdd1

0798 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0799 : 00101010000100011111111111111111; --     addi $8, $8, -1

0800 : 00001000000000000000001100100001; --     j startLoopRookYSub1

0801 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0802 : 00010010010000000000000000000001; --     bne $9, $0, 1

0803 : 00001000000000000000001100110100; --     j endLoopRookYSub1

0804 : 00000010100100000000000110010000; --     sll $10, $8, 3

0805 : 00000010100101000111000000000000; --     add $10, $10, $7

0806 : 01000010110101000000000000000000; --     lw $11, 0($10)

0807 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0808 : 00000011010101101100000000001000; --     and $13, $11, $12

0809 : 00000010110101101101000000000100; --     sub $11, $11, $13

0810 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0811 : 00111010110101000000000000000000; --     sw $11, 0($10)

0812 : 00111010100011000000000000000000; --     sw $10, 0($6)

0813 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0814 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0815 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0816 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0817 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0818 : 00001000000000000000001100100001; --     j startLoopRookYSub1 #end loooooop

0819 : 00001000000000000000001100110100; --     j endLoopRookYSub1

0820 : 00001000000000000000000000000000; --     j 0

0821 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0822 : 00101001110011100000000000000001; --     addi $7, $7, 1

0823 : 00101010000100000000000000000010; --     addi $8, $8, 2

0824 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0825 : 00101100110000000000000000000001; --     addi $19, $0, 1

0826 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0827 : 00000010100100000000000110010000; --     sll $10, $8, 3

0828 : 00000010100101000111000000000000; --     add $10, $10, $7

0829 : 01000010110101000000000000000000; --     lw $11, 0($10)

0830 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0831 : 00000011010101101100000000001000; --     and $13, $11, $12

0832 : 00000010110101101101000000000100; --     sub $11, $11, $13

0833 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0834 : 00111010110101000000000000000000; --     sw $11, 0($10)

0835 : 00111010100000000000000001100100; --     sw $10, 100($0)

0836 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0837 : 00101001110011100000000000000001; --     addi $7, $7, 1

0838 : 00101010000100011111111111111110; --     addi $8, $8, -2

0839 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0840 : 00101100110000000000000000000001; --     addi $19, $0, 1

0841 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0842 : 00000010100100000000000110010000; --     sll $10, $8, 3

0843 : 00000010100101000111000000000000; --     add $10, $10, $7

0844 : 01000010110101000000000000000000; --     lw $11, 0($10)

0845 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0846 : 00000011010101101100000000001000; --     and $13, $11, $12

0847 : 00000010110101101101000000000100; --     sub $11, $11, $13

0848 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0849 : 00111010110101000000000000000000; --     sw $11, 0($10)

0850 : 00111010100000000000000001100101; --     sw $10, 101($0)

0851 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0852 : 00101001110011111111111111111111; --     addi $7, $7, -1

0853 : 00101010000100000000000000000010; --     addi $8, $8, 2

0854 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0855 : 00101100110000000000000000000001; --     addi $19, $0, 1

0856 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0857 : 00000010100100000000000110010000; --     sll $10, $8, 3

0858 : 00000010100101000111000000000000; --     add $10, $10, $7

0859 : 01000010110101000000000000000000; --     lw $11, 0($10)

0860 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0861 : 00000011010101101100000000001000; --     and $13, $11, $12

0862 : 00000010110101101101000000000100; --     sub $11, $11, $13

0863 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0864 : 00111010110101000000000000000000; --     sw $11, 0($10)

0865 : 00111010100000000000000001100110; --     sw $10, 102($0)

0866 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0867 : 00101001110011111111111111111111; --     addi $7, $7, -1

0868 : 00101010000100011111111111111110; --     addi $8, $8, -2

0869 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0870 : 00101100110000000000000000000001; --     addi $19, $0, 1

0871 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0872 : 00000010100100000000000110010000; --     sll $10, $8, 3

0873 : 00000010100101000111000000000000; --     add $10, $10, $7

0874 : 01000010110101000000000000000000; --     lw $11, 0($10)

0875 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0876 : 00000011010101101100000000001000; --     and $13, $11, $12

0877 : 00000010110101101101000000000100; --     sub $11, $11, $13

0878 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0879 : 00111010110101000000000000000000; --     sw $11, 0($10)

0880 : 00111010100000000000000001100111; --     sw $10, 103($0)

0881 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0882 : 00101001110011100000000000000010; --     addi $7, $7, 2

0883 : 00101010000100000000000000000001; --     addi $8, $8, 1

0884 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0885 : 00101100110000000000000000000001; --     addi $19, $0, 1

0886 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0887 : 00000010100100000000000110010000; --     sll $10, $8, 3

0888 : 00000010100101000111000000000000; --     add $10, $10, $7

0889 : 01000010110101000000000000000000; --     lw $11, 0($10)

0890 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0891 : 00000011010101101100000000001000; --     and $13, $11, $12

0892 : 00000010110101101101000000000100; --     sub $11, $11, $13

0893 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0894 : 00111010110101000000000000000000; --     sw $11, 0($10)

0895 : 00111010100000000000000001101000; --     sw $10, 104($0)

0896 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0897 : 00101001110011100000000000000010; --     addi $7, $7, 2

0898 : 00101010000100011111111111111111; --     addi $8, $8, -1

0899 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0900 : 00101100110000000000000000000001; --     addi $19, $0, 1

0901 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0902 : 00000010100100000000000110010000; --     sll $10, $8, 3

0903 : 00000010100101000111000000000000; --     add $10, $10, $7

0904 : 01000010110101000000000000000000; --     lw $11, 0($10)

0905 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0906 : 00000011010101101100000000001000; --     and $13, $11, $12

0907 : 00000010110101101101000000000100; --     sub $11, $11, $13

0908 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0909 : 00111010110101000000000000000000; --     sw $11, 0($10)

0910 : 00111010100000000000000001101001; --     sw $10, 105($0)

0911 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0912 : 00101001110011111111111111111110; --     addi $7, $7, -2

0913 : 00101010000100000000000000000001; --     addi $8, $8, 1

0914 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0915 : 00101100110000000000000000000001; --     addi $19, $0, 1

0916 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0917 : 00000010100100000000000110010000; --     sll $10, $8, 3

0918 : 00000010100101000111000000000000; --     add $10, $10, $7

0919 : 01000010110101000000000000000000; --     lw $11, 0($10)

0920 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0921 : 00000011010101101100000000001000; --     and $13, $11, $12

0922 : 00000010110101101101000000000100; --     sub $11, $11, $13

0923 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0924 : 00111010110101000000000000000000; --     sw $11, 0($10)

0925 : 00111010100000000000000001101010; --     sw $10, 106($0)

0926 : 00011000000000000000001110101110; --     jal parseXY # parses $1 to make $7=x and $8=y

0927 : 00101001110011111111111111111110; --     addi $7, $7, -2

0928 : 00101010000100011111111111111111; --     addi $8, $8, -1

0929 : 00011000000000000000001110110100; --     jal validateDestination #writes to $9 if valid move

0930 : 00101100110000000000000000000001; --     addi $19, $0, 1

0931 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0932 : 00000010100100000000000110010000; --     sll $10, $8, 3

0933 : 00000010100101000111000000000000; --     add $10, $10, $7

0934 : 01000010110101000000000000000000; --     lw $11, 0($10)

0935 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0936 : 00000011010101101100000000001000; --     and $13, $11, $12

0937 : 00000010110101101101000000000100; --     sub $11, $11, $13

0938 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0939 : 00111010110101000000000000000000; --     sw $11, 0($10)

0940 : 00111010100000000000000001101011; --     sw $10, 107($0)

0941 : 00001000000000000000000000000000; --     j 0

0942 : 00101011000000000000000000000111; --     addi $12, $0, 7 #lsb x mask 000111

0943 : 00101011010000000000000000111000; --     addi $13, $0, 56 #lsb y mask 111000

0944 : 00000001110000101100000000001000; --     and $7, $1, $12

0945 : 00000010000000101101000000001000; --     and $8, $1, $13

0946 : 00000010000100000000000110010100; --     sra $8, $8, 3

0947 : 00100111110000000000000000000000; --     jr $31

0948 : 00101010100000000000000000000001; --     addi $10 $0 1

0949 : 00110001110000000000000000000001; --     blt $7 $0 1

0950 : 00010000000101000000000000000010; --     bne $0 $10 2

0951 : 00101010010000000000000000000000; --     addi $9 $0 0

0952 : 00100111110000000000000000000000; --     jr $31

0953 : 00101010100000000000000000000111; --     addi $10 $0 7

0954 : 00110010100011100000000000000001; --     blt $10 $7 1

0955 : 00010000000101000000000000000010; --     bne $0 $10 2

0956 : 00101010010000000000000000000000; --     addi $9 $0 0

0957 : 00100111110000000000000000000000; --     jr $31

0958 : 00101010100000000000000000000001; --     addi $10 $0 1

0959 : 00110010000000000000000000000001; --     blt $8 $0 1

0960 : 00010000000101000000000000000010; --     bne $0 $10 2

0961 : 00101010010000000000000000000000; --     addi $9 $0 0

0962 : 00100111110000000000000000000000; --     jr $31

0963 : 00101010100000000000000000000111; --     addi $10 $0 7

0964 : 00110010100100000000000000000001; --     blt $10 $8 1

0965 : 00010000000101000000000000000010; --     bne $0 $10 2

0966 : 00101010010000000000000000000000; --     addi $9 $0 0

0967 : 00100111110000000000000000000000; --     jr $31

0968 : 00101010100000000000000000000001; --     addi $10, $0, 1

0969 : 00000010110101011110000000001000; --     and $11, $10, $30

0970 : 00000011000100000000000110010000; --     sll $12 $8 3

0971 : 00000011000110000111000000000000; --     add $12 $12 $7

0972 : 01000011010110000000000000000000; --     lw $13 0($12)

0973 : 00101011110000000000000000001110; --     addi $15 $0 14 #piece mask

0974 : 00000011100110101111000000001000; --     and $14 $13 $15

0975 : 00010011100000000000000000000010; --     bne $14 $0 2

0976 : 00101010010000000000000000000001; --     addi $9 $0 1

0977 : 00100111110000000000000000000000; --     jr $31

0978 : 00000011100110101010000000001000; --     and $14 $13 $10

0979 : 00010011100101100000000000000010; --     bne $14, $11, 2

0980 : 00101010010000000000000000000000; --     addi $9 $0 0

0981 : 00100111110000000000000000000000; --     jr $31

0982 : 00101010010000000000000000000001; --     addi $9 $0 1

0983 : 00100111110000000000000000000000; --     jr $31

0984 : 00101010100000011111111111111111; --     addi $10 $0 -1

0985 : 00111010100000000000000001000101; --     sw $10 69($0)

0986 : 01000010100000000000000001100100; --     lw $10 100($0)

0987 : 00010010100001000000000000000001; --     bne $10, $2, 1

0988 : 00001000000000000000010010100111; --     j handle_valid

0989 : 01000010100000000000000001100101; --     lw $10 101($0)

0990 : 00010010100001000000000000000001; --     bne $10, $2, 1

0991 : 00001000000000000000010010100111; --     j handle_valid

0992 : 01000010100000000000000001100110; --     lw $10 102($0)

0993 : 00010010100001000000000000000001; --     bne $10, $2, 1

0994 : 00001000000000000000010010100111; --     j handle_valid

0995 : 01000010100000000000000001100111; --     lw $10 103($0)

0996 : 00010010100001000000000000000001; --     bne $10, $2, 1

0997 : 00001000000000000000010010100111; --     j handle_valid

0998 : 01000010100000000000000001101000; --     lw $10 104($0)

0999 : 00010010100001000000000000000001; --     bne $10, $2, 1

1000 : 00001000000000000000010010100111; --     j handle_valid

1001 : 01000010100000000000000001101001; --     lw $10 105($0)

1002 : 00010010100001000000000000000001; --     bne $10, $2, 1

1003 : 00001000000000000000010010100111; --     j handle_valid

1004 : 01000010100000000000000001101010; --     lw $10 106($0)

1005 : 00010010100001000000000000000001; --     bne $10, $2, 1

1006 : 00001000000000000000010010100111; --     j handle_valid

1007 : 01000010100000000000000001101011; --     lw $10 107($0)

1008 : 00010010100001000000000000000001; --     bne $10, $2, 1

1009 : 00001000000000000000010010100111; --     j handle_valid

1010 : 01000010100000000000000001101100; --     lw $10 108($0)

1011 : 00010010100001000000000000000001; --     bne $10, $2, 1

1012 : 00001000000000000000010010100111; --     j handle_valid

1013 : 01000010100000000000000001101101; --     lw $10 109($0)

1014 : 00010010100001000000000000000001; --     bne $10, $2, 1

1015 : 00001000000000000000010010100111; --     j handle_valid

1016 : 01000010100000000000000001101110; --     lw $10 110($0)

1017 : 00010010100001000000000000000001; --     bne $10, $2, 1

1018 : 00001000000000000000010010100111; --     j handle_valid

1019 : 01000010100000000000000001101111; --     lw $10 111($0)

1020 : 00010010100001000000000000000001; --     bne $10, $2, 1

1021 : 00001000000000000000010010100111; --     j handle_valid

1022 : 01000010100000000000000001110000; --     lw $10 112($0)

1023 : 00010010100001000000000000000001; --     bne $10, $2, 1

1024 : 00001000000000000000010010100111; --     j handle_valid

1025 : 01000010100000000000000001110001; --     lw $10 113($0)

1026 : 00010010100001000000000000000001; --     bne $10, $2, 1

1027 : 00001000000000000000010010100111; --     j handle_valid

1028 : 01000010100000000000000001110010; --     lw $10 114($0)

1029 : 00010010100001000000000000000001; --     bne $10, $2, 1

1030 : 00001000000000000000010010100111; --     j handle_valid

1031 : 01000010100000000000000001110011; --     lw $10 115($0)

1032 : 00010010100001000000000000000001; --     bne $10, $2, 1

1033 : 00001000000000000000010010100111; --     j handle_valid

1034 : 01000010100000000000000001110100; --     lw $10 116($0)

1035 : 00010010100001000000000000000001; --     bne $10, $2, 1

1036 : 00001000000000000000010010100111; --     j handle_valid

1037 : 01000010100000000000000001110101; --     lw $10 117($0)

1038 : 00010010100001000000000000000001; --     bne $10, $2, 1

1039 : 00001000000000000000010010100111; --     j handle_valid

1040 : 01000010100000000000000001110110; --     lw $10 118($0)

1041 : 00010010100001000000000000000001; --     bne $10, $2, 1

1042 : 00001000000000000000010010100111; --     j handle_valid

1043 : 01000010100000000000000001110111; --     lw $10 119($0)

1044 : 00010010100001000000000000000001; --     bne $10, $2, 1

1045 : 00001000000000000000010010100111; --     j handle_valid

1046 : 01000010100000000000000001111000; --     lw $10 120($0)

1047 : 00010010100001000000000000000001; --     bne $10, $2, 1

1048 : 00001000000000000000010010100111; --     j handle_valid

1049 : 01000010100000000000000001111001; --     lw $10 121($0)

1050 : 00010010100001000000000000000001; --     bne $10, $2, 1

1051 : 00001000000000000000010010100111; --     j handle_valid

1052 : 01000010100000000000000001111010; --     lw $10 122($0)

1053 : 00010010100001000000000000000001; --     bne $10, $2, 1

1054 : 00001000000000000000010010100111; --     j handle_valid

1055 : 01000010100000000000000001111011; --     lw $10 123($0)

1056 : 00010010100001000000000000000001; --     bne $10, $2, 1

1057 : 00001000000000000000010010100111; --     j handle_valid

1058 : 01000010100000000000000001111100; --     lw $10 124($0)

1059 : 00010010100001000000000000000001; --     bne $10, $2, 1

1060 : 00001000000000000000010010100111; --     j handle_valid

1061 : 01000010100000000000000001111101; --     lw $10 125($0)

1062 : 00010010100001000000000000000001; --     bne $10, $2, 1

1063 : 00001000000000000000010010100111; --     j handle_valid

1064 : 01000010100000000000000001111110; --     lw $10 126($0)

1065 : 00010010100001000000000000000001; --     bne $10, $2, 1

1066 : 00001000000000000000010010100111; --     j handle_valid

1067 : 01000010100000000000000001111111; --     lw $10 127($0)

1068 : 00010010100001000000000000000001; --     bne $10, $2, 1

1069 : 00001000000000000000010010100111; --     j handle_valid

1070 : 00001000000000000000010000101111; --     j restoreColors

1071 : 00101010100000000000000000000000; --     addi $10, $0, 0 #iterator i

1072 : 00101010110000000000000001000000; --     addi $11, $0, 64 #upper loop bound

1073 : 00101011000000000000000000000001; --     addi $12, $0, 1 #lsb x mask 0001

1074 : 00101011010000000000000000001000; --     addi $13, $0, 8 #lsb y mask 1000

1075 : 00101011100000000000000011110000; --     addi $14, $0, 240 #square color mask 11110000

1076 : 00001000000000000000010000110101; --     j startLoopRestoreColors

1077 : 00010010100101100000000000000001; --     bne $10, $11, 1

1078 : 00001000000000000000010001000101; --     j endLoopRestoreColors

1079 : 01000011110101000000000000000000; --     lw $15, 0($10)

1080 : 00000100000111001111000000001000; --     and $16, $14, $15

1081 : 00000011110111110000000000000100; --     sub $15, $15, $16

1082 : 00000100010101001100000000001000; --     and $17, $10, $12

1083 : 00000100100101001101000000001000; --     and $18, $10, $13

1084 : 00000100101001000000000110010100; --     sra $18, $18, 3

1085 : 00000100111000110010000000000100; --     sub $19, $17, $18

1086 : 00010100110000000000000000000010; --     bne $19, $0, 2

1087 : 00101011110111100000000010000000; --     addi $15, $15, 128 #10000000

1088 : 00010011000000000000000000000001; --     bne $12, $0, 1 #just to skip running the write white sq part

1089 : 00101011110111100000000001000000; --     addi $15, $15, 64 #01000000

1090 : 00111011110101000000000000000000; --     sw $15, 0($10)

1091 : 00101010100101000000000000000001; --     addi $10, $10, 1 #i = i + 1

1092 : 00001000000000000000010000110101; --     j startLoopRestoreColors #end loooooop

1093 : 00101000010000000000000000000000; --     addi $1, $0, 0

1094 : 00101000100000000000000000000000; --     addi $2, $0, 0

1095 : 00101000110000000000000000000000; --     addi $3, $0, 0

1096 : 00101001000000000000000000000000; --     addi $4, $0, 0

1097 : 00101001010000000000000000000000; --     addi $5, $0, 0

1098 : 00101001100000000000000000000000; --     addi $6, $0, 0

1099 : 00101001110000000000000000000000; --     addi $7, $0, 0

1100 : 00101010000000000000000000000000; --     addi $8, $0, 0

1101 : 00101010010000000000000000000000; --     addi $9, $0, 0

1102 : 00101010100000000000000000000000; --     addi $10, $0, 0

1103 : 00101010110000000000000000000000; --     addi $11, $0, 0

1104 : 00101011000000000000000000000000; --     addi $12, $0, 0

1105 : 00101011010000000000000000000000; --     addi $13, $0, 0

1106 : 00101011100000000000000000000000; --     addi $14, $0, 0

1107 : 00101011110000000000000000000000; --     addi $15, $0, 0

1108 : 00101100000000000000000000000000; --     addi $16, $0, 0

1109 : 00101100010000000000000000000000; --     addi $17, $0, 0

1110 : 00101100100000000000000000000000; --     addi $18, $0, 0

1111 : 00101100110000000000000000000000; --     addi $19, $0, 0

1112 : 00101101000000000000000000000000; --     addi $20, $0, 0

1113 : 00101101010000000000000000000000; --     addi $21, $0, 0

1114 : 00101101100000000000000000000000; --     addi $22, $0, 0

1115 : 00101101110000000000000000000000; --     addi $23, $0, 0

1116 : 00101110000000000000000000000000; --     addi $24, $0, 0

1117 : 00101110010000000000000000000000; --     addi $25, $0, 0

1118 : 00101110100000000000000000000000; --     addi $26, $0, 0

1119 : 00101110110000000000000000000000; --     addi $27, $0, 0

1120 : 00101111000000000000000000000000; --     addi $28, $0, 0

1121 : 00101111010000000000000000000000; --     addi $29, $0, 0

1122 : 00101111100000000000000000000000; --     addi $30, $0, 0

1123 : 00101010100000011111111111111111; --     addi $10, $0, -1

1124 : 00111010100000000000000001000000; --     sw $10, 64($0)

1125 : 00111010100000000000000001000001; --     sw $10, 65($0)

1126 : 00101010100000011111111111111111; --     addi $10, $0, -1

1127 : 00111010100000000000000001100100; --     sw $10, 100($0)

1128 : 00111010100000000000000001100101; --     sw $10, 101($0)

1129 : 00111010100000000000000001100110; --     sw $10, 102($0)

1130 : 00111010100000000000000001100111; --     sw $10, 103($0)

1131 : 00111010100000000000000001101000; --     sw $10, 104($0)

1132 : 00111010100000000000000001101001; --     sw $10, 105($0)

1133 : 00111010100000000000000001101010; --     sw $10, 106($0)

1134 : 00111010100000000000000001101011; --     sw $10, 107($0)

1135 : 00111010100000000000000001101100; --     sw $10, 108($0)

1136 : 00111010100000000000000001101101; --     sw $10, 109($0)

1137 : 00111010100000000000000001101110; --     sw $10, 110($0)

1138 : 00111010100000000000000001101111; --     sw $10, 111($0)

1139 : 00111010100000000000000001110000; --     sw $10, 112($0)

1140 : 00111010100000000000000001110001; --     sw $10, 113($0)

1141 : 00111010100000000000000001110010; --     sw $10, 114($0)

1142 : 00111010100000000000000001110011; --     sw $10, 115($0)

1143 : 00111010100000000000000001110100; --     sw $10, 116($0)

1144 : 00111010100000000000000001110101; --     sw $10, 117($0)

1145 : 00111010100000000000000001110110; --     sw $10, 118($0)

1146 : 00111010100000000000000001110111; --     sw $10, 119($0)

1147 : 00111010100000000000000001111000; --     sw $10, 120($0)

1148 : 00111010100000000000000001111001; --     sw $10, 121($0)

1149 : 00111010100000000000000001111010; --     sw $10, 122($0)

1150 : 00111010100000000000000001111011; --     sw $10, 123($0)

1151 : 00111010100000000000000001111100; --     sw $10, 124($0)

1152 : 00111010100000000000000001111101; --     sw $10, 125($0)

1153 : 00111010100000000000000001111110; --     sw $10, 126($0)

1154 : 00111010100000000000000001111111; --     sw $10, 127($0)

1155 : 00111010100000000000000010000000; --     sw $10, 128($0)

1156 : 00111010100000000000000010000001; --     sw $10, 129($0)

1157 : 00111010100000000000000010000010; --     sw $10, 130($0)

1158 : 00111010100000000000000010000011; --     sw $10, 131($0)

1159 : 00001000000000000000000000000000; --     j 0

1160 : 00101010100000000000000000001110; --     addi $10 $0 14

1161 : 00000010100001101010000000001000; --     and $10 $3 $10

1162 : 00000010100101000000000010010100; --     sra $10 $10 1

1163 : 00101010110000000000000000000110; --     addi $11 $0 6

1164 : 00010010100101100000000000000001; --     bne $10 $11 1

1165 : 00010010110000000000000000000001; --     bne $11 $0 1

1166 : 00100111110000000000000000000000; --     jr $31

1167 : 00101010100000000000000000000001; --     addi $10 $0 1

1168 : 00000010100001101010000000001000; --     and $10 $3 $10

1169 : 00010010100000000000000000000001; --     bne $10 $0 1

1170 : 00001000000000000000010010011101; --     j promoteWhite

1171 : 00001000000000000000010010010100; --     j promoteBlack

1172 : 00101010100000000000000000111000; --     addi $10 $0 56

1173 : 00000010100101000010000000001000; --     and $10 $10 $2

1174 : 00000010100101000000000110010100; --     sra $10 $10 3

1175 : 00010010100000000000000000000100; --     bne $10 $0 4

1176 : 00101010100000000000000000001110; --     addi $10 $0 14

1177 : 00000010100001101010000000001000; --     and $10 $3 $10

1178 : 00000000110001101010000000000100; --     sub $3 $3 $10

1179 : 00101000110001100000000000000110; --     addi $3 $3 6

1180 : 00100111110000000000000000000000; --     jr $31

1181 : 00101010100000000000000000111000; --     addi $10 $0 56

1182 : 00000010100101000010000000001000; --     and $10 $10 $2

1183 : 00000010100101000000000110010100; --     sra $10 $10 3

1184 : 00101010110000000000000000000111; --     addi $11 $0 7

1185 : 00010010100101100000000000000100; --     bne $10 $11 4

1186 : 00101010100000000000000000001110; --     addi $10 $0 14

1187 : 00000010100001101010000000001000; --     and $10 $3 $10

1188 : 00000000110001101010000000000100; --     sub $3 $3 $10

1189 : 00101000110001100000000000000110; --     addi $3 $3 6

1190 : 00100111110000000000000000000000; --     jr $31

1191 : 00011000000000000000010010001000; --     jal promote

1192 : 00111000110001000000000000000000; --     sw $3, 0($2)

1193 : 00111000000000100000000000000000; --     sw $0, 0($1)

1194 : 00101010100000000000000000000001; --     addi $10, $0, 1

1195 : 00000010110101011110000000001000; --     and $11, $10, $30

1196 : 00000111101111001011000000000100; --     sub $30, $30, $11 # subtract current color

1197 : 00010010110000000000000000000001; --     bne $11, $0, 1

1198 : 00101111101111000000000000000001; --     addi $30, $30, 1 # add 1 to $30 to make it black

1199 : 00101011000000000000000000000001; --     addi $12, $0, 1 # default to a win

1200 : 00101010100000000000000000000000; --     addi $10, $0, 0 # address iterator $10 starts at 0

1201 : 00011000000000000000010010111100; --     jal startLoopCheckWin # writes $12 to 0 if opponent's king is found!

1202 : 00101010110000000000000000000001; --     addi $11, $0, 1

1203 : 00010011000101100000000000000001; --     bne $12, $11, 1#6#1 #WARNING: DEPENDENT ON CODE LENGTH

1204 : 00011000000000000000010010110111; --     jal markWin # this writes win status to register 30

1205 : 00111111100000000000000001000010; --     sw $30, 66($0) 

1206 : 00001000000000000000010000101111; --     j restoreColors

1207 : 00101010100000000000000000000010; --     addi $10, $0, 2 # win status mask

1208 : 00000010110101011110000000001000; --     and $11, $10, $30 # store current win status in $11

1209 : 00000111101111001011000000000100; --     sub $30, $30, $11 # subtract those status bits

1210 : 00101111101111000000000000000010; --     addi $30, $30, 2 # mark the status bits as win 0000...1x

1211 : 00100111110000000000000000000000; --     jr $31

1212 : 00101010110000000000000001000000; --     addi $11, $0, 64

1213 : 00010010100101100000000000000001; --     bne $10, $11, 1

1214 : 00001000000000000000010011001110; --     j endLoopCheckWin

1215 : 00101010110000000000000000000001; --     addi $11, $0, 1 # color mask

1216 : 00000011011111001011000000001000; --     and $13, $30, $11

1217 : 01000011100101000000000000000000; --     lw $14, 0($10)

1218 : 00101010110000000000000000001110; --     addi $11, $0, 14

1219 : 00000011110101101110000000001000; --     and $15, $11, $14

1220 : 00000011110111100000000010010100; --     sra $15, $15, 1

1221 : 00101010110000000000000000000001; --     addi $11, $0, 1

1222 : 00000100000101101110000000001000; --     and $16, $11, $14

1223 : 00101010110000000000000000000010; --     addi $11, $0, 2 #010 = king. 

1224 : 00010011110101100000000000000011; --     bne $15, $11, 3 #WARNING: bigger jump # of instrs dependent. If piece is not a king, go back to start of loop 

1225 : 00010100000110100000000000000010; --     bne $16, $13, 2 # if color is not equal to opponents color, go back to start of loop

1226 : 00101011000000000000000000000000; --     addi $12, $0, 0 # write 0 to $12

1227 : 00001000000000000000010011001110; --     j endLoopCheckWin

1228 : 00101010100101000000000000000001; --     addi $10, $10, 1 # i = i + 1

1229 : 00001000000000000000010010111100; --     j startLoopCheckWin

1230 : 00101010100000000000000000000001; --     addi $10 $0 1

1231 : 00010011000101000000000000000110; --     bne $12 $10 6#1

1232 : 00101010100000000000000000000001; --     addi $10, $0, 1 # color mask

1233 : 00000010110101011110000000001000; --     and $11, $10, $30 # store new color in 11

1234 : 00000010110101001011000000000100; --     sub $11, $10, $11 # store the flipped new color (our winner color) now in 11

1235 : 00000010110101100000000110010000; --     sll $11, $11, 3

1236 : 00000111101111001011000000000000; --     add $30, $30, $11

1237 : 00100111110000000000000000000000; --     jr $31

1238 : 00101010100000000000000000000100; --     addi $10 $0 4

1239 : 00000010110101011110000000001000; --     and $11 $10 $30

1240 : 00010010110000000000000000000001; --     bne $11 $0 1

1241 : 00100111110000000000000000000000; --     jr $31

1242 : 00101010100000000000000000000001; --     addi $10 $0 1

1243 : 00000100001111001010000000001000; --     and $16 $30 $10

1244 : 01000010100000000000000000011011; --     lw $10 27($0)

1245 : 00101010110000000000000000001110; --     addi $11, $0, 14

1246 : 00000011110101101010000000001000; --     and $15, $11, $10

1247 : 00000011110111100000000010010100; --     sra $15, $15, 1

1248 : 00101011100000000000000000000010; --     addi $14 $0 2

1249 : 00010011110111000000000000000111; --     bne $15 $14 7#5 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1250 : 00101010110000000000000000000001; --     addi $11, $0, 1

1251 : 00000011010101101010000000001000; --     and $13, $11, $10

1252 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1253 : 00000100001000000000000110010000; --     sll $16, $16, 3

1254 : 00000111101111010000000000000000; --     add $30, $30, $16

1255 : 00101011000000000000000000000001; --     addi $12 $0 1

1256 : 00100111110000000000000000000000; --     jr $31

1257 : 01000010100000000000000000011100; --     lw $10 28($0)

1258 : 00101010110000000000000000001110; --     addi $11, $0, 14

1259 : 00000011110101101010000000001000; --     and $15, $11, $10

1260 : 00000011110111100000000010010100; --     sra $15, $15, 1

1261 : 00101011100000000000000000000010; --     addi $14 $0 2

1262 : 00010011110111000000000000000111; --     bne $15 $14 7 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1263 : 00101010110000000000000000000001; --     addi $11, $0, 1

1264 : 00000011010101101010000000001000; --     and $13, $11, $10

1265 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1266 : 00000100001000000000000110010000; --     sll $16, $16, 3

1267 : 00000111101111010000000000000000; --     add $30, $30, $16

1268 : 00101011000000000000000000000001; --     addi $12 $0 1

1269 : 00100111110000000000000000000000; --     jr $31

1270 : 01000010100000000000000000100011; --     lw $10 35($0)

1271 : 00101010110000000000000000001110; --     addi $11, $0, 14

1272 : 00000011110101101010000000001000; --     and $15, $11, $10

1273 : 00000011110111100000000010010100; --     sra $15, $15, 1

1274 : 00101011100000000000000000000010; --     addi $14 $0 2

1275 : 00010011110111000000000000000111; --     bne $15 $14 7 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1276 : 00101010110000000000000000000001; --     addi $11, $0, 1

1277 : 00000011010101101010000000001000; --     and $13, $11, $10

1278 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1279 : 00000100001000000000000110010000; --     sll $16, $16, 3

1280 : 00000111101111010000000000000000; --     add $30, $30, $16

1281 : 00101011000000000000000000000001; --     addi $12 $0 1

1282 : 00100111110000000000000000000000; --     jr $31

1283 : 01000010100000000000000000100100; --     lw $10 36($0)

1284 : 00101010110000000000000000001110; --     addi $11, $0, 14

1285 : 00000011110101101010000000001000; --     and $15, $11, $10

1286 : 00000011110111100000000010010100; --     sra $15, $15, 1

1287 : 00101011100000000000000000000010; --     addi $14 $0 2

1288 : 00010011110111000000000000000111; --     bne $15 $14 7 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1289 : 00101010110000000000000000000001; --     addi $11, $0, 1

1290 : 00000011010101101010000000001000; --     and $13, $11, $10

1291 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1292 : 00000100001000000000000110010000; --     sll $16, $16, 3

1293 : 00000111101111010000000000000000; --     add $30, $30, $16

1294 : 00101011000000000000000000000001; --     addi $12 $0 1

1295 : 00100111110000000000000000000000; --     jr $31

1296 : 00100111110000000000000000000000; --     jr $31

1297 : 01000011100000000000000001000110; --     lw $14 70($0)

1298 : 00101010100000000000000011001000; --     addi $10 $0 200

1299 : 00010000000111000000000000000001; --     bne $0 $14 1

1300 : 00000010100101001010000000000100; --     sub $10 $10 $10

1301 : 00101010100101000000000011001000; --     addi $10 $10 200

1302 : 00101010110000000000000000000000; --     addi $11 $0 0

1303 : 00101011010000000000000001000000; --     addi $13 $0 64

1304 : 00001000000000000000010100011001; --     j startReset

1305 : 00010010110110100000000000000001; --     bne $11 $13 1

1306 : 00001000000000000000010100100000; --     j endReset

1307 : 01000011000101000000000000000000; --     lw $12 0($10)

1308 : 00111011000101100000000000000000; --     sw $12 0($11)

1309 : 00101010100101000000000000000001; --     addi $10 $10 1

1310 : 00101010110101100000000000000001; --     addi $11 $11 1

1311 : 00001000000000000000010100011001; --     j startReset

1312 : 00101010100000011111111111111111; --     addi $10 $0 -1

1313 : 00111010100000000000000001000101; --     sw $10 69($0)

1314 : 01000010100000000000000001000100; --     lw $10 68($0)

1315 : 00111000000000000000000001000011; --     sw $0 67($0)

1316 : 00111000000000000000000001000110; --     sw $0 70($0)

1317 : 00010010100000000000000000000010; --     bne $10 $0 2

1318 : 00111000000000000000000001000010; --     sw $0 66($0)

1319 : 00001000000000000000010000101111; --     j restoreColors

1320 : 00111000000000000000000001000100; --     sw $0 68($0)

1321 : 00101010100000000000000000000100; --     addi $10 $0 4

1322 : 00111010100000000000000001000010; --     sw $10 66($0)

1323 : 00001000000000000000010000101111; --     j restoreColors

[1324..4095] : 00000000000000000000000000000000;
END;
