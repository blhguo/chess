DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00000000000000000000000000000000; -- nop

0001 : 00000000000000000000000000000000; -- nop

0002 : 00000000000000000000000000000000; -- nop

0003 : 00000000000000000000000000000000; -- nop

0004 : 00000000000000000000000000000000; -- nop

0005 : 00000000000000000000000000000000; -- nop

0006 : 00000000000000000000000000000000; -- nop

0007 : 00000000000000000000000000000000; -- nop

0008 : 00000000000000000000000000000000; -- nop

0009 : 01000000010000000000000001000000; -- lw $1, 64($0)

0010 : 01000000100000000000000001000001; -- lw $2, 65($0)

0011 : 00101010100000011111111111111111; -- addi $10 $0, -1

0012 : 00010000100101000000000000000001; -- bne $2, $10, 1

0013 : 00010010100000000000000000000001; -- bne $10, $0, 1

0014 : 00101010100000011111111111111111; -- addi $10 $0 -1

0015 : 00010010100000100000000000000100; -- bne $10, $1, 4

0016 : 00101010100000011111111111111111; -- addi $10, $0, -1

0017 : 00111010100000000000000001000000; -- sw $10, 64($0)

0018 : 00111010100000000000000001000001; -- sw $10, 65($0)

0019 : 00001000000000000000000000000000; -- j 0

0020 : 00010000100101000000000000000010; -- bne $2, $10, 2

0021 : 00101101000000000000000000000001; -- addi $20, $0, 1

0022 : 00010000001010000000000000000001; -- bne $0, $20, 1

0023 : 00101101000000000000000000000000; -- addi $20, $0, 0

0024 : 01000111100000000000000001000010; -- lw $30, 66($0)

0025 : 01000000110000100000000000000000; -- lw $3, 0($1)

0026 : 00101010100000000000000000001110; -- addi $10 $0 14

0027 : 00000010110101000011000000001000; -- and $11, $10, $3

0028 : 00010010110000000000000000000100; -- bne $11, $0, 4

0029 : 00101010100000011111111111111111; -- addi $10, $0, -1

0030 : 00111010100000000000000001000000; -- sw $10, 64($0)

0031 : 00111010100000000000000001000001; -- sw $10, 65($0)

0032 : 00001000000000000000000000000000; -- j 0

0033 : 00101010100000000000000000000001; -- addi $10 $0 1

0034 : 00000011000101000011000000001000; -- and $12, $10, $3

0035 : 00000011010101011110000000001000; -- and $13, $10, $30

0036 : 00010011000110100000000000000001; -- bne $12, $13, 1

0037 : 00010010100000000000000000000100; -- bne $10, $0, 4

0038 : 00101010100000011111111111111111; -- addi $10, $0, -1

0039 : 00111010100000000000000001000000; -- sw $10, 64($0)

0040 : 00111010100000000000000001000001; -- sw $10, 65($0)

0041 : 00001000000000000000000000000000; -- j 0

0042 : 00010101000000000000000000000001; -- bne $20 $0 1

0043 : 00001000000000000000000000111010; -- j handle2Valid

0044 : 00001000000000000000000000111100; -- j handle2InValid

0045 : 00001000000000000000000000000000; -- j 0

0046 : 00101100100000000000000001001001; --     addi $18, $0, 73

0047 : 00101100010000000000000000100100; --     addi $17, $0, 36

0048 : 00111100101000100000000000000000; --     sw $18, 0($17)

0049 : 00100111110000000000000000000000; --     jr $31

0050 : 00101100100000000000000001001001; --     addi $18, $0, 73

0051 : 00101100010000000000000000100101; --     addi $17, $0, 37

0052 : 00111100101000100000000000000000; --     sw $18, 0($17)

0053 : 00100111110000000000000000000000; --     jr $31

0054 : 00101100100000000000000001001001; --     addi $18, $0, 73

0055 : 00101100010000000000000000100110; --     addi $17, $0, 38

0056 : 00111100101000100000000000000000; --     sw $18, 0($17)

0057 : 00100111110000000000000000000000; --     jr $31

0058 : 01000001000001000000000000000000; --     lw $4, 0($2)

0059 : 00001000000000000000001010011110; --     j move

0060 : 00101010100000000000000000001110; --     addi $10 $0 14

0061 : 00000010110101000011000000001000; --     and $11, $10, $3

0062 : 00000010110101100000000010010100; --     sra $11, $11, 1

0063 : 00101010100000011111111111111111; --     addi $10, $0, -1

0064 : 00111010100000000000000001100100; --     sw $10, 100($0)

0065 : 00111010100000000000000001100101; --     sw $10, 101($0)

0066 : 00111010100000000000000001100110; --     sw $10, 102($0)

0067 : 00111010100000000000000001100111; --     sw $10, 103($0)

0068 : 00111010100000000000000001101000; --     sw $10, 104($0)

0069 : 00111010100000000000000001101001; --     sw $10, 105($0)

0070 : 00111010100000000000000001101010; --     sw $10, 106($0)

0071 : 00111010100000000000000001101011; --     sw $10, 107($0)

0072 : 00111010100000000000000001101100; --     sw $10, 108($0)

0073 : 00111010100000000000000001101101; --     sw $10, 109($0)

0074 : 00111010100000000000000001101110; --     sw $10, 110($0)

0075 : 00111010100000000000000001101111; --     sw $10, 111($0)

0076 : 00111010100000000000000001110000; --     sw $10, 112($0)

0077 : 00111010100000000000000001110001; --     sw $10, 113($0)

0078 : 00111010100000000000000001110010; --     sw $10, 114($0)

0079 : 00111010100000000000000001110011; --     sw $10, 115($0)

0080 : 00111010100000000000000001110100; --     sw $10, 116($0)

0081 : 00111010100000000000000001110101; --     sw $10, 117($0)

0082 : 00111010100000000000000001110110; --     sw $10, 118($0)

0083 : 00111010100000000000000001110111; --     sw $10, 119($0)

0084 : 00111010100000000000000001111000; --     sw $10, 120($0)

0085 : 00111010100000000000000001111001; --     sw $10, 121($0)

0086 : 00111010100000000000000001111010; --     sw $10, 122($0)

0087 : 00111010100000000000000001111011; --     sw $10, 123($0)

0088 : 00111010100000000000000001111100; --     sw $10, 124($0)

0089 : 00111010100000000000000001111101; --     sw $10, 125($0)

0090 : 00111010100000000000000001111110; --     sw $10, 126($0)

0091 : 00111010100000000000000001111111; --     sw $10, 127($0)

0092 : 00111010100000000000000010000000; --     sw $10, 128($0)

0093 : 00111010100000000000000010000001; --     sw $10, 129($0)

0094 : 00111010100000000000000010000010; --     sw $10, 130($0)

0095 : 00111010100000000000000010000011; --     sw $10, 131($0)

0096 : 00101010100000000000000000000001; --     addi $10 $0 1

0097 : 00010010110101000000000000000001; --     bne $11 $10 1

0098 : 00001000000000000000000111111011; --     j handleKnight

0099 : 00101010100000000000000000000010; --     addi $10 $0 2

0100 : 00010010110101000000000000000001; --     bne $11 $10 1

0101 : 00001000000000000000000100101100; --     j handleKing

0102 : 00101010100000000000000000000101; --     addi $10 $0 5

0103 : 00010010110101000000000000000001; --     bne $11 $10 1

0104 : 00001000000000000000000110100001; --     j handleRook

0105 : 00101010100000000000000000000110; --     addi $10 $0 6

0106 : 00010010110101000000000000000001; --     bne $11 $10 1

0107 : 00001000000000000000000001101101; --     j handlePawn

0108 : 00001000000000000000000000000000; --     j 0

0109 : 00101010100000000000000000000001; --     addi $10, $0, 1

0110 : 00000010110101011110000000001000; --     and $11, $10, $30

0111 : 00010010110000000000000000000010; --     bne $11, $0, 2

0112 : 00011000000000000000000011010000; --     jal whitePawnCheck

0113 : 00001000000000000000000000000000; --     j 0

0114 : 00011000000000000000000001110100; --     jal blackPawnCheck

0115 : 00001000000000000000000000000000; --     j 0

0116 : 00001000000000000000000001110101; --     j blackPawnCheckSub1

0117 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0118 : 00101010000100011111111111111111; --     addi $8, $8, -1

0119 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0120 : 00010010010000000000000000000001; --     bne $9, $0, 1

0121 : 00001000000000000000000010100100; --     j blackPawnLeftDiagCheck

0122 : 00000010100100000000000110010000; --     sll $10, $8, 3

0123 : 00000010100101000111000000000000; --     add $10, $10, $7

0124 : 01000010110101000000000000000000; --     lw $11, 0($10)

0125 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0126 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0127 : 00010011000000000000000000000001; --     bne $12, $0, 1

0128 : 00010010100000000000000000000001; --     bne $10, $0, 1

0129 : 00001000000000000000000010100100; --     j blackPawnLeftDiagCheck

0130 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0131 : 00000011010101101100000000001000; --     and $13, $11, $12

0132 : 00000010110101101101000000000100; --     sub $11, $11, $13

0133 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0134 : 00000010100100000000000110010000; --     sll $10, $8, 3

0135 : 00000010100101000111000000000000; --     add $10, $10, $7

0136 : 00111010110101000000000000000000; --     sw $11, 0($10)

0137 : 00111010100000000000000001100100; --     sw $10, 100($0)

0138 : 00101010100000000000000000000101; --     addi $10, $0, 5

0139 : 00010010100100000000000000000001; --     bne $10, $8, 1

0140 : 00001000000000000000000010001110; --     j blackPawnYSub2Check

0141 : 00001000000000000000000010100100; --     j blackPawnLeftDiagCheck

0142 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0143 : 00101010000100011111111111111110; --     addi $8, $8, -2

0144 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0145 : 00010010010000000000000000000001; --     bne $9, $0, 1

0146 : 00001000000000000000000010100100; --     j blackPawnLeftDiagCheck

0147 : 00000010100100000000000110010000; --     sll $10, $8, 3

0148 : 00000010100101000111000000000000; --     add $10, $10, $7

0149 : 01000010110101000000000000000000; --     lw $11, 0($10)

0150 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0151 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0152 : 00010011000000000000000000000001; --     bne $12, $0, 1

0153 : 00010010100000000000000000000001; --     bne $10, $0, 1

0154 : 00001000000000000000000010100100; --     j blackPawnLeftDiagCheck

0155 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0156 : 00000011010101101100000000001000; --     and $13, $11, $12

0157 : 00000010110101101101000000000100; --     sub $11, $11, $13

0158 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0159 : 00000010100100000000000110010000; --     sll $10, $8, 3

0160 : 00000010100101000111000000000000; --     add $10, $10, $7

0161 : 00111010110101000000000000000000; --     sw $11, 0($10)

0162 : 00111010100000000000000001100101; --     sw $10, 101($0)

0163 : 00001000000000000000000010100100; --     j blackPawnLeftDiagCheck

0164 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0165 : 00101010000100011111111111111111; --     addi $8, $8, -1

0166 : 00101001110011111111111111111111; --     addi $7, $7, -1

0167 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0168 : 00010010010000000000000000000001; --     bne $9, $0, 1

0169 : 00001000000000000000000010111010; --     j blackPawnRightDiagCheck

0170 : 00000010100100000000000110010000; --     sll $10, $8, 3

0171 : 00000010100101000111000000000000; --     add $10, $10, $7

0172 : 01000010110101000000000000000000; --     lw $11, 0($10)

0173 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0174 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0175 : 00010011000000000000000000000001; --     bne $12, $0, 1

0176 : 00001000000000000000000010111010; --     j blackPawnRightDiagCheck

0177 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0178 : 00000011010101101100000000001000; --     and $13, $11, $12

0179 : 00000010110101101101000000000100; --     sub $11, $11, $13

0180 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0181 : 00000010100100000000000110010000; --     sll $10, $8, 3

0182 : 00000010100101000111000000000000; --     add $10, $10, $7

0183 : 00111010110101000000000000000000; --     sw $11, 0($10)

0184 : 00111010100000000000000001100110; --     sw $10, 102($0)

0185 : 00001000000000000000000010111010; --     j blackPawnRightDiagCheck

0186 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0187 : 00101010000100011111111111111111; --     addi $8, $8, -1

0188 : 00101001110011100000000000000001; --     addi $7, $7, 1

0189 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0190 : 00010010010000000000000000000001; --     bne $9, $0, 1

0191 : 00001000000000000000000000000000; --     j 0

0192 : 00000010100100000000000110010000; --     sll $10, $8, 3

0193 : 00000010100101000111000000000000; --     add $10, $10, $7

0194 : 01000010110101000000000000000000; --     lw $11, 0($10)

0195 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0196 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0197 : 00010011000000000000000000000001; --     bne $12, $0, 1

0198 : 00001000000000000000000000000000; --     j 0

0199 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0200 : 00000011010101101100000000001000; --     and $13, $11, $12

0201 : 00000010110101101101000000000100; --     sub $11, $11, $13

0202 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0203 : 00000010100100000000000110010000; --     sll $10, $8, 3

0204 : 00000010100101000111000000000000; --     add $10, $10, $7

0205 : 00111010110101000000000000000000; --     sw $11, 0($10)

0206 : 00111010100000000000000001100111; --     sw $10, 103($0)

0207 : 00001000000000000000000000000000; --     j 0

0208 : 00001000000000000000000011010001; --     j whitePawnYAdd1Check

0209 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0210 : 00101010000100000000000000000001; --     addi $8, $8, 1

0211 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0212 : 00010010010000000000000000000001; --     bne $9, $0, 1

0213 : 00001000000000000000000100000000; --     j whitePawnLeftDiagCheck

0214 : 00000010100100000000000110010000; --     sll $10, $8, 3

0215 : 00000010100101000111000000000000; --     add $10, $10, $7

0216 : 01000010110101000000000000000000; --     lw $11, 0($10)

0217 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0218 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0219 : 00010011000000000000000000000001; --     bne $12, $0, 1

0220 : 00010010100000000000000000000001; --     bne $10, $0, 1

0221 : 00001000000000000000000100000000; --     j whitePawnLeftDiagCheck

0222 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0223 : 00000011010101101100000000001000; --     and $13, $11, $12

0224 : 00000010110101101101000000000100; --     sub $11, $11, $13

0225 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0226 : 00000010100100000000000110010000; --     sll $10, $8, 3

0227 : 00000010100101000111000000000000; --     add $10, $10, $7

0228 : 00111010110101000000000000000000; --     sw $11, 0($10)

0229 : 00111010100000000000000001100100; --     sw $10, 100($0)

0230 : 00101010100000000000000000000010; --     addi $10, $0, 2

0231 : 00010010100100000000000000000001; --     bne $10, $8, 1

0232 : 00001000000000000000000011101010; --     j whitePawnYAdd2Check

0233 : 00001000000000000000000100000000; --     j whitePawnLeftDiagCheck

0234 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0235 : 00101010000100000000000000000010; --     addi $8, $8, 2

0236 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0237 : 00010010010000000000000000000001; --     bne $9, $0, 1

0238 : 00001000000000000000000100000000; --     j whitePawnLeftDiagCheck

0239 : 00000010100100000000000110010000; --     sll $10, $8, 3

0240 : 00000010100101000111000000000000; --     add $10, $10, $7

0241 : 01000010110101000000000000000000; --     lw $11, 0($10)

0242 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0243 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0244 : 00010011000000000000000000000001; --     bne $12, $0, 1

0245 : 00010010100000000000000000000001; --     bne $10, $0, 1

0246 : 00001000000000000000000100000000; --     j whitePawnLeftDiagCheck

0247 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0248 : 00000011010101101100000000001000; --     and $13, $11, $12

0249 : 00000010110101101101000000000100; --     sub $11, $11, $13

0250 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0251 : 00000010100100000000000110010000; --     sll $10, $8, 3

0252 : 00000010100101000111000000000000; --     add $10, $10, $7

0253 : 00111010110101000000000000000000; --     sw $11, 0($10)

0254 : 00111010100000000000000001100101; --     sw $10, 101($0)

0255 : 00001000000000000000000100000000; --     j whitePawnLeftDiagCheck

0256 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0257 : 00101010000100000000000000000001; --     addi $8, $8, 1

0258 : 00101001110011111111111111111111; --     addi $7, $7, -1

0259 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0260 : 00010010010000000000000000000001; --     bne $9, $0, 1

0261 : 00001000000000000000000100010110; --     j whitePawnRightDiagCheck

0262 : 00000010100100000000000110010000; --     sll $10, $8, 3

0263 : 00000010100101000111000000000000; --     add $10, $10, $7

0264 : 01000010110101000000000000000000; --     lw $11, 0($10)

0265 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0266 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0267 : 00010011000000000000000000000001; --     bne $12, $0, 1

0268 : 00001000000000000000000100010110; --     j whitePawnRightDiagCheck

0269 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0270 : 00000011010101101100000000001000; --     and $13, $11, $12

0271 : 00000010110101101101000000000100; --     sub $11, $11, $13

0272 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0273 : 00000010100100000000000110010000; --     sll $10, $8, 3

0274 : 00000010100101000111000000000000; --     add $10, $10, $7

0275 : 00111010110101000000000000000000; --     sw $11, 0($10)

0276 : 00111010100000000000000001100110; --     sw $10, 102($0)

0277 : 00001000000000000000000100010110; --     j whitePawnRightDiagCheck

0278 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0279 : 00101010000100000000000000000001; --     addi $8, $8, 1

0280 : 00101001110011100000000000000001; --     addi $7, $7, 1

0281 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0282 : 00010010010000000000000000000001; --     bne $9, $0, 1

0283 : 00001000000000000000000000000000; --     j 0

0284 : 00000010100100000000000110010000; --     sll $10, $8, 3

0285 : 00000010100101000111000000000000; --     add $10, $10, $7

0286 : 01000010110101000000000000000000; --     lw $11, 0($10)

0287 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0288 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0289 : 00010011000000000000000000000001; --     bne $12, $0, 1

0290 : 00001000000000000000000000000000; --     j 0

0291 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0292 : 00000011010101101100000000001000; --     and $13, $11, $12

0293 : 00000010110101101101000000000100; --     sub $11, $11, $13

0294 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0295 : 00000010100100000000000110010000; --     sll $10, $8, 3

0296 : 00000010100101000111000000000000; --     add $10, $10, $7

0297 : 00111010110101000000000000000000; --     sw $11, 0($10)

0298 : 00111010100000000000000001100111; --     sw $10, 103($0)

0299 : 00001000000000000000000000000000; --     j 0

0300 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0301 : 00101001110011100000000000000001; --     addi $7, $7, 1

0302 : 00101010000100011111111111111111; --     addi $8, $8, -1

0303 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0304 : 00101100110000000000000000000001; --     addi $19, $0, 1

0305 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0306 : 00000010100100000000000110010000; --     sll $10, $8, 3

0307 : 00000010100101000111000000000000; --     add $10, $10, $7

0308 : 01000010110101000000000000000000; --     lw $11, 0($10)

0309 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0310 : 00000011010101101100000000001000; --     and $13, $11, $12

0311 : 00000010110101101101000000000100; --     sub $11, $11, $13

0312 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0313 : 00111010110101000000000000000000; --     sw $11, 0($10)

0314 : 00111010100000000000000001100100; --     sw $10, 100($0)

0315 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0316 : 00101001110011100000000000000001; --     addi $7, $7, 1

0317 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0318 : 00101100110000000000000000000001; --     addi $19, $0, 1

0319 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0320 : 00000010100100000000000110010000; --     sll $10, $8, 3

0321 : 00000010100101000111000000000000; --     add $10, $10, $7

0322 : 01000010110101000000000000000000; --     lw $11, 0($10)

0323 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0324 : 00000011010101101100000000001000; --     and $13, $11, $12

0325 : 00000010110101101101000000000100; --     sub $11, $11, $13

0326 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0327 : 00111010110101000000000000000000; --     sw $11, 0($10)

0328 : 00111010100000000000000001100101; --     sw $10, 101($0)

0329 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0330 : 00101001110011100000000000000001; --     addi $7, $7, 1

0331 : 00101010000100000000000000000001; --     addi $8, $8, 1

0332 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0333 : 00101100110000000000000000000001; --     addi $19, $0, 1

0334 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0335 : 00000010100100000000000110010000; --     sll $10, $8, 3

0336 : 00000010100101000111000000000000; --     add $10, $10, $7

0337 : 01000010110101000000000000000000; --     lw $11, 0($10)

0338 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0339 : 00000011010101101100000000001000; --     and $13, $11, $12

0340 : 00000010110101101101000000000100; --     sub $11, $11, $13

0341 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0342 : 00111010110101000000000000000000; --     sw $11, 0($10)

0343 : 00111010100000000000000001100110; --     sw $10, 102($0)

0344 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0345 : 00101010000100011111111111111111; --     addi $8, $8, -1

0346 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0347 : 00101100110000000000000000000001; --     addi $19, $0, 1

0348 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0349 : 00000010100100000000000110010000; --     sll $10, $8, 3

0350 : 00000010100101000111000000000000; --     add $10, $10, $7

0351 : 01000010110101000000000000000000; --     lw $11, 0($10)

0352 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0353 : 00000011010101101100000000001000; --     and $13, $11, $12

0354 : 00000010110101101101000000000100; --     sub $11, $11, $13

0355 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0356 : 00111010110101000000000000000000; --     sw $11, 0($10)

0357 : 00111010100000000000000001100111; --     sw $10, 103($0)

0358 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0359 : 00101010000100000000000000000001; --     addi $8, $8, 1

0360 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0361 : 00101100110000000000000000000001; --     addi $19, $0, 1

0362 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0363 : 00000010100100000000000110010000; --     sll $10, $8, 3

0364 : 00000010100101000111000000000000; --     add $10, $10, $7

0365 : 01000010110101000000000000000000; --     lw $11, 0($10)

0366 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0367 : 00000011010101101100000000001000; --     and $13, $11, $12

0368 : 00000010110101101101000000000100; --     sub $11, $11, $13

0369 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0370 : 00111010110101000000000000000000; --     sw $11, 0($10)

0371 : 00111010100000000000000001101000; --     sw $10, 104($0)

0372 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0373 : 00101001110011111111111111111111; --     addi $7, $7, -1

0374 : 00101010000100011111111111111111; --     addi $8, $8, -1

0375 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0376 : 00101100110000000000000000000001; --     addi $19, $0, 1

0377 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0378 : 00000010100100000000000110010000; --     sll $10, $8, 3

0379 : 00000010100101000111000000000000; --     add $10, $10, $7

0380 : 01000010110101000000000000000000; --     lw $11, 0($10)

0381 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0382 : 00000011010101101100000000001000; --     and $13, $11, $12

0383 : 00000010110101101101000000000100; --     sub $11, $11, $13

0384 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0385 : 00111010110101000000000000000000; --     sw $11, 0($10)

0386 : 00111010100000000000000001101001; --     sw $10, 105($0)

0387 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0388 : 00101001110011111111111111111111; --     addi $7, $7, -1

0389 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0390 : 00101100110000000000000000000001; --     addi $19, $0, 1

0391 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0392 : 00000010100100000000000110010000; --     sll $10, $8, 3

0393 : 00000010100101000111000000000000; --     add $10, $10, $7

0394 : 01000010110101000000000000000000; --     lw $11, 0($10)

0395 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0396 : 00000011010101101100000000001000; --     and $13, $11, $12

0397 : 00000010110101101101000000000100; --     sub $11, $11, $13

0398 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0399 : 00111010110101000000000000000000; --     sw $11, 0($10)

0400 : 00111010100000000000000001101010; --     sw $10, 106($0)

0401 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0402 : 00101001110011111111111111111111; --     addi $7, $7, -1

0403 : 00101010000100000000000000000001; --     addi $8, $8, 1

0404 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0405 : 00101100110000000000000000000001; --     addi $19, $0, 1

0406 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0407 : 00000010100100000000000110010000; --     sll $10, $8, 3

0408 : 00000010100101000111000000000000; --     add $10, $10, $7

0409 : 01000010110101000000000000000000; --     lw $11, 0($10)

0410 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0411 : 00000011010101101100000000001000; --     and $13, $11, $12

0412 : 00000010110101101101000000000100; --     sub $11, $11, $13

0413 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0414 : 00111010110101000000000000000000; --     sw $11, 0($10)

0415 : 00111010100000000000000001101011; --     sw $10, 107($0)

0416 : 00001000000000000000000000000000; --     j 0

0417 : 00101001100000000000000001100100; --     addi $6, $0, 100

0418 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0419 : 00101001110011100000000000000001; --     addi $7, $7, 1

0420 : 00001000000000000000000110100101; --     j startLoopRookXAdd1

0421 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0422 : 00010010010000000000000000000001; --     bne $9, $0, 1

0423 : 00001000000000000000000110111000; --     j endLoopRookXAdd1

0424 : 00000010100100000000000110010000; --     sll $10, $8, 3

0425 : 00000010100101000111000000000000; --     add $10, $10, $7

0426 : 01000010110101000000000000000000; --     lw $11, 0($10)

0427 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0428 : 00000011010101101100000000001000; --     and $13, $11, $12

0429 : 00000010110101101101000000000100; --     sub $11, $11, $13

0430 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0431 : 00111010110101000000000000000000; --     sw $11, 0($10)

0432 : 00111010100011000000000000000000; --     sw $10, 0($6)

0433 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0434 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0435 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0436 : 00010011000000000000000000000010; --     bne $12, $0, 2

0437 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0438 : 00001000000000000000000110100101; --     j startLoopRookXAdd1 #end loooooop

0439 : 00001000000000000000000110111000; --     j endLoopRookXAdd1

0440 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0441 : 00101001110011111111111111111111; --     addi $7, $7, -1

0442 : 00001000000000000000000110111011; --     j startLoopRookXSub1

0443 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0444 : 00010010010000000000000000000001; --     bne $9, $0, 1

0445 : 00001000000000000000000111001110; --     j endLoopRookXSub1

0446 : 00000010100100000000000110010000; --     sll $10, $8, 3

0447 : 00000010100101000111000000000000; --     add $10, $10, $7

0448 : 01000010110101000000000000000000; --     lw $11, 0($10)

0449 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0450 : 00000011010101101100000000001000; --     and $13, $11, $12

0451 : 00000010110101101101000000000100; --     sub $11, $11, $13

0452 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0453 : 00111010110101000000000000000000; --     sw $11, 0($10)

0454 : 00111010100011000000000000000000; --     sw $10, 0($6)

0455 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0456 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0457 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0458 : 00010011000000000000000000000010; --     bne $12, $0, 2

0459 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0460 : 00001000000000000000000110111011; --     j startLoopRookXSub1 #end loooooop

0461 : 00001000000000000000000111001110; --     j endLoopRookXSub1

0462 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0463 : 00101010000100000000000000000001; --     addi $8, $8, 1

0464 : 00001000000000000000000111010001; --     j startLoopRookYAdd1

0465 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0466 : 00010010010000000000000000000001; --     bne $9, $0, 1

0467 : 00001000000000000000000111100100; --     j endLoopRookYAdd1

0468 : 00000010100100000000000110010000; --     sll $10, $8, 3

0469 : 00000010100101000111000000000000; --     add $10, $10, $7

0470 : 01000010110101000000000000000000; --     lw $11, 0($10)

0471 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0472 : 00000011010101101100000000001000; --     and $13, $11, $12

0473 : 00000010110101101101000000000100; --     sub $11, $11, $13

0474 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0475 : 00111010110101000000000000000000; --     sw $11, 0($10)

0476 : 00111010100011000000000000000000; --     sw $10, 0($6)

0477 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0478 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0479 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0480 : 00010011000000000000000000000010; --     bne $12, $0, 2

0481 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0482 : 00001000000000000000000111010001; --     j startLoopRookYAdd1 #end loooooop

0483 : 00001000000000000000000111100100; --     j endLoopRookYAdd1

0484 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0485 : 00101010000100011111111111111111; --     addi $8, $8, -1

0486 : 00001000000000000000000111100111; --     j startLoopRookYSub1

0487 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0488 : 00010010010000000000000000000001; --     bne $9, $0, 1

0489 : 00001000000000000000000111111010; --     j endLoopRookYSub1

0490 : 00000010100100000000000110010000; --     sll $10, $8, 3

0491 : 00000010100101000111000000000000; --     add $10, $10, $7

0492 : 01000010110101000000000000000000; --     lw $11, 0($10)

0493 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0494 : 00000011010101101100000000001000; --     and $13, $11, $12

0495 : 00000010110101101101000000000100; --     sub $11, $11, $13

0496 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0497 : 00111010110101000000000000000000; --     sw $11, 0($10)

0498 : 00111010100011000000000000000000; --     sw $10, 0($6)

0499 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0500 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0501 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0502 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0503 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0504 : 00001000000000000000000111100111; --     j startLoopRookYSub1 #end loooooop

0505 : 00001000000000000000000111111010; --     j endLoopRookYSub1

0506 : 00001000000000000000000000000000; --     j 0

0507 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0508 : 00101001110011100000000000000001; --     addi $7, $7, 1

0509 : 00101010000100000000000000000010; --     addi $8, $8, 2

0510 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0511 : 00101100110000000000000000000001; --     addi $19, $0, 1

0512 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0513 : 00000010100100000000000110010000; --     sll $10, $8, 3

0514 : 00000010100101000111000000000000; --     add $10, $10, $7

0515 : 01000010110101000000000000000000; --     lw $11, 0($10)

0516 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0517 : 00000011010101101100000000001000; --     and $13, $11, $12

0518 : 00000010110101101101000000000100; --     sub $11, $11, $13

0519 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0520 : 00111010110101000000000000000000; --     sw $11, 0($10)

0521 : 00111010100000000000000001100100; --     sw $10, 100($0)

0522 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0523 : 00101001110011100000000000000001; --     addi $7, $7, 1

0524 : 00101010000100011111111111111110; --     addi $8, $8, -2

0525 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0526 : 00101100110000000000000000000001; --     addi $19, $0, 1

0527 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0528 : 00000010100100000000000110010000; --     sll $10, $8, 3

0529 : 00000010100101000111000000000000; --     add $10, $10, $7

0530 : 01000010110101000000000000000000; --     lw $11, 0($10)

0531 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0532 : 00000011010101101100000000001000; --     and $13, $11, $12

0533 : 00000010110101101101000000000100; --     sub $11, $11, $13

0534 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0535 : 00111010110101000000000000000000; --     sw $11, 0($10)

0536 : 00111010100000000000000001100101; --     sw $10, 101($0)

0537 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0538 : 00101001110011111111111111111111; --     addi $7, $7, -1

0539 : 00101010000100000000000000000010; --     addi $8, $8, 2

0540 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0541 : 00101100110000000000000000000001; --     addi $19, $0, 1

0542 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0543 : 00000010100100000000000110010000; --     sll $10, $8, 3

0544 : 00000010100101000111000000000000; --     add $10, $10, $7

0545 : 01000010110101000000000000000000; --     lw $11, 0($10)

0546 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0547 : 00000011010101101100000000001000; --     and $13, $11, $12

0548 : 00000010110101101101000000000100; --     sub $11, $11, $13

0549 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0550 : 00111010110101000000000000000000; --     sw $11, 0($10)

0551 : 00111010100000000000000001100110; --     sw $10, 102($0)

0552 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0553 : 00101001110011111111111111111111; --     addi $7, $7, -1

0554 : 00101010000100011111111111111110; --     addi $8, $8, -2

0555 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0556 : 00101100110000000000000000000001; --     addi $19, $0, 1

0557 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0558 : 00000010100100000000000110010000; --     sll $10, $8, 3

0559 : 00000010100101000111000000000000; --     add $10, $10, $7

0560 : 01000010110101000000000000000000; --     lw $11, 0($10)

0561 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0562 : 00000011010101101100000000001000; --     and $13, $11, $12

0563 : 00000010110101101101000000000100; --     sub $11, $11, $13

0564 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0565 : 00111010110101000000000000000000; --     sw $11, 0($10)

0566 : 00111010100000000000000001100111; --     sw $10, 103($0)

0567 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0568 : 00101001110011100000000000000010; --     addi $7, $7, 2

0569 : 00101010000100000000000000000001; --     addi $8, $8, 1

0570 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0571 : 00101100110000000000000000000001; --     addi $19, $0, 1

0572 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0573 : 00000010100100000000000110010000; --     sll $10, $8, 3

0574 : 00000010100101000111000000000000; --     add $10, $10, $7

0575 : 01000010110101000000000000000000; --     lw $11, 0($10)

0576 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0577 : 00000011010101101100000000001000; --     and $13, $11, $12

0578 : 00000010110101101101000000000100; --     sub $11, $11, $13

0579 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0580 : 00111010110101000000000000000000; --     sw $11, 0($10)

0581 : 00111010100000000000000001101000; --     sw $10, 104($0)

0582 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0583 : 00101001110011100000000000000010; --     addi $7, $7, 2

0584 : 00101010000100011111111111111111; --     addi $8, $8, -1

0585 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0586 : 00101100110000000000000000000001; --     addi $19, $0, 1

0587 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0588 : 00000010100100000000000110010000; --     sll $10, $8, 3

0589 : 00000010100101000111000000000000; --     add $10, $10, $7

0590 : 01000010110101000000000000000000; --     lw $11, 0($10)

0591 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0592 : 00000011010101101100000000001000; --     and $13, $11, $12

0593 : 00000010110101101101000000000100; --     sub $11, $11, $13

0594 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0595 : 00111010110101000000000000000000; --     sw $11, 0($10)

0596 : 00111010100000000000000001101001; --     sw $10, 105($0)

0597 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0598 : 00101001110011111111111111111110; --     addi $7, $7, -2

0599 : 00101010000100000000000000000001; --     addi $8, $8, 1

0600 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0601 : 00101100110000000000000000000001; --     addi $19, $0, 1

0602 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0603 : 00000010100100000000000110010000; --     sll $10, $8, 3

0604 : 00000010100101000111000000000000; --     add $10, $10, $7

0605 : 01000010110101000000000000000000; --     lw $11, 0($10)

0606 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0607 : 00000011010101101100000000001000; --     and $13, $11, $12

0608 : 00000010110101101101000000000100; --     sub $11, $11, $13

0609 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0610 : 00111010110101000000000000000000; --     sw $11, 0($10)

0611 : 00111010100000000000000001101010; --     sw $10, 106($0)

0612 : 00011000000000000000001001110100; --     jal parseXY # parses $1 to make $7=x and $8=y

0613 : 00101001110011111111111111111110; --     addi $7, $7, -2

0614 : 00101010000100011111111111111111; --     addi $8, $8, -1

0615 : 00011000000000000000001001111010; --     jal validateDestination #writes to $9 if valid move

0616 : 00101100110000000000000000000001; --     addi $19, $0, 1

0617 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0618 : 00000010100100000000000110010000; --     sll $10, $8, 3

0619 : 00000010100101000111000000000000; --     add $10, $10, $7

0620 : 01000010110101000000000000000000; --     lw $11, 0($10)

0621 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0622 : 00000011010101101100000000001000; --     and $13, $11, $12

0623 : 00000010110101101101000000000100; --     sub $11, $11, $13

0624 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0625 : 00111010110101000000000000000000; --     sw $11, 0($10)

0626 : 00111010100000000000000001101011; --     sw $10, 107($0)

0627 : 00001000000000000000000000000000; --     j 0

0628 : 00101011000000000000000000000111; --     addi $12, $0, 7 #lsb x mask 000111

0629 : 00101011010000000000000000111000; --     addi $13, $0, 56 #lsb y mask 111000

0630 : 00000001110000101100000000001000; --     and $7, $1, $12

0631 : 00000010000000101101000000001000; --     and $8, $1, $13

0632 : 00000010000100000000000110010100; --     sra $8, $8, 3

0633 : 00100111110000000000000000000000; --     jr $31

0634 : 00101010100000000000000000000001; --     addi $10 $0 1

0635 : 00110001110000000000000000000001; --     blt $7 $0 1

0636 : 00010000000101000000000000000010; --     bne $0 $10 2

0637 : 00101010010000000000000000000000; --     addi $9 $0 0

0638 : 00100111110000000000000000000000; --     jr $31

0639 : 00101010100000000000000000000111; --     addi $10 $0 7

0640 : 00110010100011100000000000000001; --     blt $10 $7 1

0641 : 00010000000101000000000000000010; --     bne $0 $10 2

0642 : 00101010010000000000000000000000; --     addi $9 $0 0

0643 : 00100111110000000000000000000000; --     jr $31

0644 : 00101010100000000000000000000001; --     addi $10 $0 1

0645 : 00110010000000000000000000000001; --     blt $8 $0 1

0646 : 00010000000101000000000000000010; --     bne $0 $10 2

0647 : 00101010010000000000000000000000; --     addi $9 $0 0

0648 : 00100111110000000000000000000000; --     jr $31

0649 : 00101010100000000000000000000111; --     addi $10 $0 7

0650 : 00110010100100000000000000000001; --     blt $10 $8 1

0651 : 00010000000101000000000000000010; --     bne $0 $10 2

0652 : 00101010010000000000000000000000; --     addi $9 $0 0

0653 : 00100111110000000000000000000000; --     jr $31

0654 : 00101010100000000000000000000001; --     addi $10, $0, 1

0655 : 00000010110101011110000000001000; --     and $11, $10, $30

0656 : 00000011000100000000000110010000; --     sll $12 $8 3

0657 : 00000011000110000111000000000000; --     add $12 $12 $7

0658 : 01000011010110000000000000000000; --     lw $13 0($12)

0659 : 00101011110000000000000000001110; --     addi $15 $0 14 #piece mask

0660 : 00000011100110101111000000001000; --     and $14 $13 $15

0661 : 00010011100000000000000000000010; --     bne $14 $0 2

0662 : 00101010010000000000000000000001; --     addi $9 $0 1

0663 : 00100111110000000000000000000000; --     jr $31

0664 : 00000011100110101010000000001000; --     and $14 $13 $10

0665 : 00010011100101100000000000000010; --     bne $14, $11, 2

0666 : 00101010010000000000000000000000; --     addi $9 $0 0

0667 : 00100111110000000000000000000000; --     jr $31

0668 : 00101010010000000000000000000001; --     addi $9 $0 1

0669 : 00100111110000000000000000000000; --     jr $31

0670 : 01000010100000000000000001100100; --     lw $10 100($0)

0671 : 00010010100001000000000000000001; --     bne $10, $2, 1

0672 : 00001000000000000000001101001100; --     j handle_valid

0673 : 01000010100000000000000001100101; --     lw $10 101($0)

0674 : 00010010100001000000000000000001; --     bne $10, $2, 1

0675 : 00001000000000000000001101001100; --     j handle_valid

0676 : 01000010100000000000000001100110; --     lw $10 102($0)

0677 : 00010010100001000000000000000001; --     bne $10, $2, 1

0678 : 00001000000000000000001101001100; --     j handle_valid

0679 : 01000010100000000000000001100111; --     lw $10 103($0)

0680 : 00010010100001000000000000000001; --     bne $10, $2, 1

0681 : 00001000000000000000001101001100; --     j handle_valid

0682 : 01000010100000000000000001101000; --     lw $10 104($0)

0683 : 00010010100001000000000000000001; --     bne $10, $2, 1

0684 : 00001000000000000000001101001100; --     j handle_valid

0685 : 01000010100000000000000001101001; --     lw $10 105($0)

0686 : 00010010100001000000000000000001; --     bne $10, $2, 1

0687 : 00001000000000000000001101001100; --     j handle_valid

0688 : 01000010100000000000000001101010; --     lw $10 106($0)

0689 : 00010010100001000000000000000001; --     bne $10, $2, 1

0690 : 00001000000000000000001101001100; --     j handle_valid

0691 : 01000010100000000000000001101011; --     lw $10 107($0)

0692 : 00010010100001000000000000000001; --     bne $10, $2, 1

0693 : 00001000000000000000001101001100; --     j handle_valid

0694 : 01000010100000000000000001101100; --     lw $10 108($0)

0695 : 00010010100001000000000000000001; --     bne $10, $2, 1

0696 : 00001000000000000000001101001100; --     j handle_valid

0697 : 01000010100000000000000001101101; --     lw $10 109($0)

0698 : 00010010100001000000000000000001; --     bne $10, $2, 1

0699 : 00001000000000000000001101001100; --     j handle_valid

0700 : 01000010100000000000000001101110; --     lw $10 110($0)

0701 : 00010010100001000000000000000001; --     bne $10, $2, 1

0702 : 00001000000000000000001101001100; --     j handle_valid

0703 : 01000010100000000000000001101111; --     lw $10 111($0)

0704 : 00010010100001000000000000000001; --     bne $10, $2, 1

0705 : 00001000000000000000001101001100; --     j handle_valid

0706 : 01000010100000000000000001110000; --     lw $10 112($0)

0707 : 00010010100001000000000000000001; --     bne $10, $2, 1

0708 : 00001000000000000000001101001100; --     j handle_valid

0709 : 01000010100000000000000001110001; --     lw $10 113($0)

0710 : 00010010100001000000000000000001; --     bne $10, $2, 1

0711 : 00001000000000000000001101001100; --     j handle_valid

0712 : 01000010100000000000000001110010; --     lw $10 114($0)

0713 : 00010010100001000000000000000001; --     bne $10, $2, 1

0714 : 00001000000000000000001101001100; --     j handle_valid

0715 : 01000010100000000000000001110011; --     lw $10 115($0)

0716 : 00010010100001000000000000000001; --     bne $10, $2, 1

0717 : 00001000000000000000001101001100; --     j handle_valid

0718 : 01000010100000000000000001110100; --     lw $10 116($0)

0719 : 00010010100001000000000000000001; --     bne $10, $2, 1

0720 : 00001000000000000000001101001100; --     j handle_valid

0721 : 01000010100000000000000001110101; --     lw $10 117($0)

0722 : 00010010100001000000000000000001; --     bne $10, $2, 1

0723 : 00001000000000000000001101001100; --     j handle_valid

0724 : 01000010100000000000000001110110; --     lw $10 118($0)

0725 : 00010010100001000000000000000001; --     bne $10, $2, 1

0726 : 00001000000000000000001101001100; --     j handle_valid

0727 : 01000010100000000000000001110111; --     lw $10 119($0)

0728 : 00010010100001000000000000000001; --     bne $10, $2, 1

0729 : 00001000000000000000001101001100; --     j handle_valid

0730 : 01000010100000000000000001111000; --     lw $10 120($0)

0731 : 00010010100001000000000000000001; --     bne $10, $2, 1

0732 : 00001000000000000000001101001100; --     j handle_valid

0733 : 01000010100000000000000001111001; --     lw $10 121($0)

0734 : 00010010100001000000000000000001; --     bne $10, $2, 1

0735 : 00001000000000000000001101001100; --     j handle_valid

0736 : 01000010100000000000000001111010; --     lw $10 122($0)

0737 : 00010010100001000000000000000001; --     bne $10, $2, 1

0738 : 00001000000000000000001101001100; --     j handle_valid

0739 : 01000010100000000000000001111011; --     lw $10 123($0)

0740 : 00010010100001000000000000000001; --     bne $10, $2, 1

0741 : 00001000000000000000001101001100; --     j handle_valid

0742 : 01000010100000000000000001111100; --     lw $10 124($0)

0743 : 00010010100001000000000000000001; --     bne $10, $2, 1

0744 : 00001000000000000000001101001100; --     j handle_valid

0745 : 01000010100000000000000001111101; --     lw $10 125($0)

0746 : 00010010100001000000000000000001; --     bne $10, $2, 1

0747 : 00001000000000000000001101001100; --     j handle_valid

0748 : 01000010100000000000000001111110; --     lw $10 126($0)

0749 : 00010010100001000000000000000001; --     bne $10, $2, 1

0750 : 00001000000000000000001101001100; --     j handle_valid

0751 : 01000010100000000000000001111111; --     lw $10 127($0)

0752 : 00010010100001000000000000000001; --     bne $10, $2, 1

0753 : 00001000000000000000001101001100; --     j handle_valid

0754 : 00001000000000000000001011110011; --     j restoreColors

0755 : 00101010100000000000000000000000; --     addi $10, $0, 0 #iterator i

0756 : 00101010110000000000000001000000; --     addi $11, $0, 64 #upper loop bound

0757 : 00101011000000000000000000000001; --     addi $12, $0, 1 #lsb x mask 0001

0758 : 00101011010000000000000000001000; --     addi $13, $0, 8 #lsb y mask 1000

0759 : 00101011100000000000000011110000; --     addi $14, $0, 240 #square color mask 11110000

0760 : 00001000000000000000001011111001; --     j startLoopRestoreColors

0761 : 00010010100101100000000000000001; --     bne $10, $11, 1

0762 : 00001000000000000000001100001001; --     j endLoopRestoreColors

0763 : 01000011110101000000000000000000; --     lw $15, 0($10)

0764 : 00000100000111001111000000001000; --     and $16, $14, $15

0765 : 00000011110111110000000000000100; --     sub $15, $15, $16

0766 : 00000100010101001100000000001000; --     and $17, $10, $12

0767 : 00000100100101001101000000001000; --     and $18, $10, $13

0768 : 00000100101001000000000110010100; --     sra $18, $18, 3

0769 : 00000100111000110010000000000100; --     sub $19, $17, $18

0770 : 00010100110000000000000000000010; --     bne $19, $0, 2

0771 : 00101011110111100000000010000000; --     addi $15, $15, 128 #10000000

0772 : 00010011000000000000000000000001; --     bne $12, $0, 1 #just to skip running the write white sq part

0773 : 00101011110111100000000001000000; --     addi $15, $15, 64 #01000000

0774 : 00111011110101000000000000000000; --     sw $15, 0($10)

0775 : 00101010100101000000000000000001; --     addi $10, $10, 1 #i = i + 1

0776 : 00001000000000000000001011111001; --     j startLoopRestoreColors #end loooooop

0777 : 00101000010000000000000000000000; --     addi $1, $0, 0

0778 : 00101000100000000000000000000000; --     addi $2, $0, 0

0779 : 00101000110000000000000000000000; --     addi $3, $0, 0

0780 : 00101001000000000000000000000000; --     addi $4, $0, 0

0781 : 00101001010000000000000000000000; --     addi $5, $0, 0

0782 : 00101001100000000000000000000000; --     addi $6, $0, 0

0783 : 00101001110000000000000000000000; --     addi $7, $0, 0

0784 : 00101010000000000000000000000000; --     addi $8, $0, 0

0785 : 00101010010000000000000000000000; --     addi $9, $0, 0

0786 : 00101010100000000000000000000000; --     addi $10, $0, 0

0787 : 00101010110000000000000000000000; --     addi $11, $0, 0

0788 : 00101011000000000000000000000000; --     addi $12, $0, 0

0789 : 00101011010000000000000000000000; --     addi $13, $0, 0

0790 : 00101011100000000000000000000000; --     addi $14, $0, 0

0791 : 00101011110000000000000000000000; --     addi $15, $0, 0

0792 : 00101100000000000000000000000000; --     addi $16, $0, 0

0793 : 00101100010000000000000000000000; --     addi $17, $0, 0

0794 : 00101100100000000000000000000000; --     addi $18, $0, 0

0795 : 00101100110000000000000000000000; --     addi $19, $0, 0

0796 : 00101101000000000000000000000000; --     addi $20, $0, 0

0797 : 00101101010000000000000000000000; --     addi $21, $0, 0

0798 : 00101101100000000000000000000000; --     addi $22, $0, 0

0799 : 00101101110000000000000000000000; --     addi $23, $0, 0

0800 : 00101110000000000000000000000000; --     addi $24, $0, 0

0801 : 00101110010000000000000000000000; --     addi $25, $0, 0

0802 : 00101110100000000000000000000000; --     addi $26, $0, 0

0803 : 00101110110000000000000000000000; --     addi $27, $0, 0

0804 : 00101111000000000000000000000000; --     addi $28, $0, 0

0805 : 00101111010000000000000000000000; --     addi $29, $0, 0

0806 : 00101111100000000000000000000000; --     addi $30, $0, 0

0807 : 00101010100000011111111111111111; --     addi $10, $0, -1

0808 : 00111010100000000000000001000000; --     sw $10, 64($0)

0809 : 00111010100000000000000001000001; --     sw $10, 65($0)

0810 : 00101010100000011111111111111111; --     addi $10, $0, -1

0811 : 00111010100000000000000001100100; --     sw $10, 100($0)

0812 : 00111010100000000000000001100101; --     sw $10, 101($0)

0813 : 00111010100000000000000001100110; --     sw $10, 102($0)

0814 : 00111010100000000000000001100111; --     sw $10, 103($0)

0815 : 00111010100000000000000001101000; --     sw $10, 104($0)

0816 : 00111010100000000000000001101001; --     sw $10, 105($0)

0817 : 00111010100000000000000001101010; --     sw $10, 106($0)

0818 : 00111010100000000000000001101011; --     sw $10, 107($0)

0819 : 00111010100000000000000001101100; --     sw $10, 108($0)

0820 : 00111010100000000000000001101101; --     sw $10, 109($0)

0821 : 00111010100000000000000001101110; --     sw $10, 110($0)

0822 : 00111010100000000000000001101111; --     sw $10, 111($0)

0823 : 00111010100000000000000001110000; --     sw $10, 112($0)

0824 : 00111010100000000000000001110001; --     sw $10, 113($0)

0825 : 00111010100000000000000001110010; --     sw $10, 114($0)

0826 : 00111010100000000000000001110011; --     sw $10, 115($0)

0827 : 00111010100000000000000001110100; --     sw $10, 116($0)

0828 : 00111010100000000000000001110101; --     sw $10, 117($0)

0829 : 00111010100000000000000001110110; --     sw $10, 118($0)

0830 : 00111010100000000000000001110111; --     sw $10, 119($0)

0831 : 00111010100000000000000001111000; --     sw $10, 120($0)

0832 : 00111010100000000000000001111001; --     sw $10, 121($0)

0833 : 00111010100000000000000001111010; --     sw $10, 122($0)

0834 : 00111010100000000000000001111011; --     sw $10, 123($0)

0835 : 00111010100000000000000001111100; --     sw $10, 124($0)

0836 : 00111010100000000000000001111101; --     sw $10, 125($0)

0837 : 00111010100000000000000001111110; --     sw $10, 126($0)

0838 : 00111010100000000000000001111111; --     sw $10, 127($0)

0839 : 00111010100000000000000010000000; --     sw $10, 128($0)

0840 : 00111010100000000000000010000001; --     sw $10, 129($0)

0841 : 00111010100000000000000010000010; --     sw $10, 130($0)

0842 : 00111010100000000000000010000011; --     sw $10, 131($0)

0843 : 00001000000000000000000000000000; --     j 0

0844 : 00111000110001000000000000000000; --     sw $3, 0($2)

0845 : 00111000000000100000000000000000; --     sw $0, 0($1)

0846 : 00101010100000000000000000000001; --     addi $10 $0 1

0847 : 00000010110101011110000000001000; --     and $11, $10, $30

0848 : 00010010110000000000000000000010; --     bne $11, $0, 2

0849 : 00111010100000000000000001000010; --     sw $10, 66($0)

0850 : 00010010100000000000000000000001; --     bne $10, $0, 1

0851 : 00111000000000000000000001000010; --     sw $0, 66($0)

0852 : 00001000000000000000001011110011; --     j restoreColors

0853 : 00100111110000000000000000000000; --     jr $31

[0854..4095] : 00000000000000000000000000000000;
END;
