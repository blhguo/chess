DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00000000000000000000000000000000; -- nop

0001 : 00000000000000000000000000000000; -- nop

0002 : 00000000000000000000000000000000; -- nop

0003 : 00000000000000000000000000000000; -- nop

0004 : 00000000000000000000000000000000; -- nop

0005 : 00000000000000000000000000000000; -- nop

0006 : 00000000000000000000000000000000; -- nop

0007 : 00000000000000000000000000000000; -- nop

0008 : 00000000000000000000000000000000; -- nop

0009 : 01000000010000000000000001000000; -- lw $1, 64($0)

0010 : 01000000100000000000000001000001; -- lw $2, 65($0)

0011 : 01000010100000000000000001000011; -- lw $10, 67($0)

0012 : 01000011000000000000000001000100; -- lw $12, 68($0)

0013 : 00101010110000000000000000000001; -- addi $11 $0 1

0014 : 00000010100101001100000000000000; -- add $10 $10 $12

0015 : 00010010100101100000000000000001; -- bne $10 $11 1

0016 : 00001000000000000000010100001111; -- j reset

0017 : 00101010100000011111111111111111; -- addi $10 $0, -1

0018 : 00010000100101000000000000000001; -- bne $2, $10, 1

0019 : 00010010100000000000000000000001; -- bne $10, $0, 1

0020 : 00101010100000011111111111111111; -- addi $10 $0 -1

0021 : 00010010100000100000000000000110; -- bne $10, $1, 6

0022 : 01000000010000000000000001000101; -- lw $1 69($0)

0023 : 00010010100000100000000000000100; -- bne $10, $1, 4

0024 : 00101010100000011111111111111111; -- addi $10, $0, -1

0025 : 00111010100000000000000001000000; -- sw $10, 64($0)

0026 : 00111010100000000000000001000001; -- sw $10, 65($0)

0027 : 00001000000000000000000000000000; -- j 0

0028 : 00111000010000000000000001000000; -- sw $1 64($0)

0029 : 00010000100101000000000000000010; -- bne $2, $10, 2

0030 : 00101101000000000000000000000001; -- addi $20, $0, 1

0031 : 00010000001010000000000000000001; -- bne $0, $20, 1

0032 : 00101101000000000000000000000000; -- addi $20, $0, 0

0033 : 01000111100000000000000001000010; -- lw $30, 66($0)

0034 : 01000000110000100000000000000000; -- lw $3, 0($1)

0035 : 01000011010000000000000001000101; -- lw $13, 69($0)

0036 : 00111000010000000000000001000101; -- sw $1, 69($0)

0037 : 00010000010110100000000000000010; -- bne $1, $13, 2

0038 : 00101010100000000000000000000001; -- addi $10, $0, 1

0039 : 00010000000101000000000000000001; -- bne $0, $10, 1

0040 : 00001000000000000000010000101101; -- j restoreColors

0041 : 00101010100000000000000000001110; -- addi $10 $0 14

0042 : 00000010110101000011000000001000; -- and $11, $10, $3

0043 : 00010010110000000000000000000100; -- bne $11, $0, 4

0044 : 00101010100000011111111111111111; -- addi $10, $0, -1

0045 : 00111010100000000000000001000000; -- sw $10, 64($0)

0046 : 00111010100000000000000001000001; -- sw $10, 65($0)

0047 : 00001000000000000000000000000000; -- j 0

0048 : 00101010100000000000000000000001; -- addi $10 $0 1

0049 : 00000011000101000011000000001000; -- and $12, $10, $3

0050 : 00000011010101011110000000001000; -- and $13, $10, $30

0051 : 00010011000110100000000000000001; -- bne $12, $13, 1

0052 : 00010010100000000000000000000100; -- bne $10, $0, 4

0053 : 00101010100000011111111111111111; -- addi $10, $0, -1

0054 : 00111010100000000000000001000000; -- sw $10, 64($0)

0055 : 00111010100000000000000001000001; -- sw $10, 65($0)

0056 : 00001000000000000000000000000000; -- j 0

0057 : 00010101000000000000000000000001; -- bne $20 $0 1

0058 : 00001000000000000000000001001001; -- j handle2Valid

0059 : 00001000000000000000000001001011; -- j handle2InValid

0060 : 00001000000000000000000000000000; -- j 0

0061 : 00101100100000000000000001001001; --     addi $18, $0, 73

0062 : 00101100010000000000000000100100; --     addi $17, $0, 36

0063 : 00111100101000100000000000000000; --     sw $18, 0($17)

0064 : 00100111110000000000000000000000; --     jr $31

0065 : 00101100100000000000000001001001; --     addi $18, $0, 73

0066 : 00101100010000000000000000100101; --     addi $17, $0, 37

0067 : 00111100101000100000000000000000; --     sw $18, 0($17)

0068 : 00100111110000000000000000000000; --     jr $31

0069 : 00101100100000000000000001001001; --     addi $18, $0, 73

0070 : 00101100010000000000000000100110; --     addi $17, $0, 38

0071 : 00111100101000100000000000000000; --     sw $18, 0($17)

0072 : 00100111110000000000000000000000; --     jr $31

0073 : 01000001000001000000000000000000; --     lw $4, 0($2)

0074 : 00001000000000000000001111010110; --     j move

0075 : 01000010110000100000000000000000; --     lw $11, 0($1)

0076 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0077 : 00000011010101101100000000001000; --     and $13, $11, $12

0078 : 00000010110101101101000000000100; --     sub $11, $11, $13

0079 : 00101010110101100000000000110000; --     addi $11, $11, 48 #hazel sq color 00110000

0080 : 00111010110000100000000000000000; --     sw $11, 0($1)

0081 : 00101010100000000000000000001110; --     addi $10 $0 14

0082 : 00000010110101000011000000001000; --     and $11, $10, $3

0083 : 00000010110101100000000010010100; --     sra $11, $11, 1

0084 : 00101010100000011111111111111111; --     addi $10, $0, -1

0085 : 00111010100000000000000001100100; --     sw $10, 100($0)

0086 : 00111010100000000000000001100101; --     sw $10, 101($0)

0087 : 00111010100000000000000001100110; --     sw $10, 102($0)

0088 : 00111010100000000000000001100111; --     sw $10, 103($0)

0089 : 00111010100000000000000001101000; --     sw $10, 104($0)

0090 : 00111010100000000000000001101001; --     sw $10, 105($0)

0091 : 00111010100000000000000001101010; --     sw $10, 106($0)

0092 : 00111010100000000000000001101011; --     sw $10, 107($0)

0093 : 00111010100000000000000001101100; --     sw $10, 108($0)

0094 : 00111010100000000000000001101101; --     sw $10, 109($0)

0095 : 00111010100000000000000001101110; --     sw $10, 110($0)

0096 : 00111010100000000000000001101111; --     sw $10, 111($0)

0097 : 00111010100000000000000001110000; --     sw $10, 112($0)

0098 : 00111010100000000000000001110001; --     sw $10, 113($0)

0099 : 00111010100000000000000001110010; --     sw $10, 114($0)

0100 : 00111010100000000000000001110011; --     sw $10, 115($0)

0101 : 00111010100000000000000001110100; --     sw $10, 116($0)

0102 : 00111010100000000000000001110101; --     sw $10, 117($0)

0103 : 00111010100000000000000001110110; --     sw $10, 118($0)

0104 : 00111010100000000000000001110111; --     sw $10, 119($0)

0105 : 00111010100000000000000001111000; --     sw $10, 120($0)

0106 : 00111010100000000000000001111001; --     sw $10, 121($0)

0107 : 00111010100000000000000001111010; --     sw $10, 122($0)

0108 : 00111010100000000000000001111011; --     sw $10, 123($0)

0109 : 00111010100000000000000001111100; --     sw $10, 124($0)

0110 : 00111010100000000000000001111101; --     sw $10, 125($0)

0111 : 00111010100000000000000001111110; --     sw $10, 126($0)

0112 : 00111010100000000000000001111111; --     sw $10, 127($0)

0113 : 00111010100000000000000010000000; --     sw $10, 128($0)

0114 : 00111010100000000000000010000001; --     sw $10, 129($0)

0115 : 00111010100000000000000010000010; --     sw $10, 130($0)

0116 : 00111010100000000000000010000011; --     sw $10, 131($0)

0117 : 00101010100000000000000000000001; --     addi $10 $0 1

0118 : 00010010110101000000000000000001; --     bne $11 $10 1

0119 : 00001000000000000000001100110011; --     j handleKnight

0120 : 00101010100000000000000000000010; --     addi $10 $0 2

0121 : 00010010110101000000000000000001; --     bne $11 $10 1

0122 : 00001000000000000000001000000010; --     j handleKing

0123 : 00101010100000000000000000000011; --     addi $10 $0 3

0124 : 00010010110101000000000000000001; --     bne $11 $10 1

0125 : 00001000000000000000000010001000; --     j handleQueen

0126 : 00101010100000000000000000000100; --     addi $10 $0 4

0127 : 00010010110101000000000000000001; --     bne $11 $10 1

0128 : 00001000000000000000001001110111; --     j handleBishop

0129 : 00101010100000000000000000000101; --     addi $10 $0 5

0130 : 00010010110101000000000000000001; --     bne $11 $10 1

0131 : 00001000000000000000001011011001; --     j handleRook

0132 : 00101010100000000000000000000110; --     addi $10 $0 6

0133 : 00010010110101000000000000000001; --     bne $11 $10 1

0134 : 00001000000000000000000101000101; --     j handlePawn

0135 : 00001000000000000000000000000000; --     j 0

0136 : 00001000000000000000000010001001; --     j handleQueenDiag

0137 : 00101001100000000000000001100100; --     addi $6, $0, 100

0138 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0139 : 00101001110011100000000000000001; --     addi $7, $7, 1

0140 : 00101010000100000000000000000001; --     addi $8, $8, 1

0141 : 00001000000000000000000010001110; --     j startLoopQueenXAdd1YAdd1

0142 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0143 : 00010010010000000000000000000001; --     bne $9, $0, 1

0144 : 00001000000000000000000010100010; --     j endLoopQueenXAdd1YAdd1

0145 : 00000010100100000000000110010000; --     sll $10, $8, 3

0146 : 00000010100101000111000000000000; --     add $10, $10, $7

0147 : 01000010110101000000000000000000; --     lw $11, 0($10)

0148 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0149 : 00000011010101101100000000001000; --     and $13, $11, $12

0150 : 00000010110101101101000000000100; --     sub $11, $11, $13

0151 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0152 : 00111010110101000000000000000000; --     sw $11, 0($10)

0153 : 00111010100011000000000000000000; --     sw $10, 0($6)

0154 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0155 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0156 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0157 : 00010011000000000000000000000011; --     bne $12, $0, 3

0158 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0159 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0160 : 00001000000000000000000010001110; --     j startLoopQueenXAdd1YAdd1 #end loooooop

0161 : 00001000000000000000000010100010; --     j endLoopQueenXAdd1YAdd1

0162 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0163 : 00101001110011100000000000000001; --     addi $7, $7, 1

0164 : 00101010000100011111111111111111; --     addi $8, $8, -1

0165 : 00001000000000000000000010100110; --     j startLoopQueenXAdd1YSub1

0166 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0167 : 00010010010000000000000000000001; --     bne $9, $0, 1

0168 : 00001000000000000000000010111010; --     j endLoopQueenXAdd1YSub1

0169 : 00000010100100000000000110010000; --     sll $10, $8, 3

0170 : 00000010100101000111000000000000; --     add $10, $10, $7

0171 : 01000010110101000000000000000000; --     lw $11, 0($10)

0172 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0173 : 00000011010101101100000000001000; --     and $13, $11, $12

0174 : 00000010110101101101000000000100; --     sub $11, $11, $13

0175 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0176 : 00111010110101000000000000000000; --     sw $11, 0($10)

0177 : 00111010100011000000000000000000; --     sw $10, 0($6)

0178 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0179 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0180 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0181 : 00010011000000000000000000000011; --     bne $12, $0, 3

0182 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0183 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0184 : 00001000000000000000000010100110; --     j startLoopQueenXAdd1YSub1 #end loooooop

0185 : 00001000000000000000000010111010; --     j endLoopQueenXAdd1YSub1

0186 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0187 : 00101001110011111111111111111111; --     addi $7, $7, -1

0188 : 00101010000100000000000000000001; --     addi $8, $8, 1

0189 : 00001000000000000000000010111110; --     j startLoopQueenXSub1YAdd1

0190 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0191 : 00010010010000000000000000000001; --     bne $9, $0, 1

0192 : 00001000000000000000000011010010; --     j endLoopQueenXSub1YAdd1

0193 : 00000010100100000000000110010000; --     sll $10, $8, 3

0194 : 00000010100101000111000000000000; --     add $10, $10, $7

0195 : 01000010110101000000000000000000; --     lw $11, 0($10)

0196 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0197 : 00000011010101101100000000001000; --     and $13, $11, $12

0198 : 00000010110101101101000000000100; --     sub $11, $11, $13

0199 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0200 : 00111010110101000000000000000000; --     sw $11, 0($10)

0201 : 00111010100011000000000000000000; --     sw $10, 0($6)

0202 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0203 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0204 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0205 : 00010011000000000000000000000011; --     bne $12, $0, 3

0206 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0207 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0208 : 00001000000000000000000010111110; --     j startLoopQueenXSub1YAdd1 #end loooooop

0209 : 00001000000000000000000011010010; --     j endLoopQueenXSub1YAdd1

0210 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0211 : 00101001110011111111111111111111; --     addi $7, $7, -1

0212 : 00101010000100011111111111111111; --     addi $8, $8, -1

0213 : 00001000000000000000000011010110; --     j startLoopQueenXSub1YSub1

0214 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0215 : 00010010010000000000000000000001; --     bne $9, $0, 1

0216 : 00001000000000000000000011101010; --     j endLoopQueenXSub1YSub1

0217 : 00000010100100000000000110010000; --     sll $10, $8, 3

0218 : 00000010100101000111000000000000; --     add $10, $10, $7

0219 : 01000010110101000000000000000000; --     lw $11, 0($10)

0220 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0221 : 00000011010101101100000000001000; --     and $13, $11, $12

0222 : 00000010110101101101000000000100; --     sub $11, $11, $13

0223 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0224 : 00111010110101000000000000000000; --     sw $11, 0($10)

0225 : 00111010100011000000000000000000; --     sw $10, 0($6)

0226 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0227 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0228 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0229 : 00010011000000000000000000000011; --     bne $12, $0, 3

0230 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0231 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0232 : 00001000000000000000000011010110; --     j startLoopQueenXSub1YSub1 #end loooooop

0233 : 00001000000000000000000011101010; --     j endLoopQueenXSub1YSub1

0234 : 00001000000000000000000011101011; --     j handleQueenStraight

0235 : 00101001100000000000000001110010; --     addi $6, $0, 114

0236 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0237 : 00101001110011100000000000000001; --     addi $7, $7, 1

0238 : 00001000000000000000000011101111; --     j startLoopQueenXAdd1

0239 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0240 : 00010010010000000000000000000001; --     bne $9, $0, 1

0241 : 00001000000000000000000100000010; --     j endLoopQueenXAdd1

0242 : 00000010100100000000000110010000; --     sll $10, $8, 3

0243 : 00000010100101000111000000000000; --     add $10, $10, $7

0244 : 01000010110101000000000000000000; --     lw $11, 0($10)

0245 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0246 : 00000011010101101100000000001000; --     and $13, $11, $12

0247 : 00000010110101101101000000000100; --     sub $11, $11, $13

0248 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0249 : 00111010110101000000000000000000; --     sw $11, 0($10)

0250 : 00111010100011000000000000000000; --     sw $10, 0($6)

0251 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0252 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0253 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0254 : 00010011000000000000000000000010; --     bne $12, $0, 2

0255 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0256 : 00001000000000000000000011101111; --     j startLoopQueenXAdd1 #end loooooop

0257 : 00001000000000000000000100000010; --     j endLoopQueenXAdd1

0258 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0259 : 00101001110011111111111111111111; --     addi $7, $7, -1

0260 : 00001000000000000000000100000101; --     j startLoopQueenXSub1

0261 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0262 : 00010010010000000000000000000001; --     bne $9, $0, 1

0263 : 00001000000000000000000100011000; --     j endLoopQueenXSub1

0264 : 00000010100100000000000110010000; --     sll $10, $8, 3

0265 : 00000010100101000111000000000000; --     add $10, $10, $7

0266 : 01000010110101000000000000000000; --     lw $11, 0($10)

0267 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0268 : 00000011010101101100000000001000; --     and $13, $11, $12

0269 : 00000010110101101101000000000100; --     sub $11, $11, $13

0270 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0271 : 00111010110101000000000000000000; --     sw $11, 0($10)

0272 : 00111010100011000000000000000000; --     sw $10, 0($6)

0273 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0274 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0275 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0276 : 00010011000000000000000000000010; --     bne $12, $0, 2

0277 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0278 : 00001000000000000000000100000101; --     j startLoopQueenXSub1 #end loooooop

0279 : 00001000000000000000000100011000; --     j endLoopQueenXSub1

0280 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0281 : 00101010000100000000000000000001; --     addi $8, $8, 1

0282 : 00001000000000000000000100011011; --     j startLoopQueenYAdd1

0283 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0284 : 00010010010000000000000000000001; --     bne $9, $0, 1

0285 : 00001000000000000000000100101110; --     j endLoopQueenYAdd1

0286 : 00000010100100000000000110010000; --     sll $10, $8, 3

0287 : 00000010100101000111000000000000; --     add $10, $10, $7

0288 : 01000010110101000000000000000000; --     lw $11, 0($10)

0289 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0290 : 00000011010101101100000000001000; --     and $13, $11, $12

0291 : 00000010110101101101000000000100; --     sub $11, $11, $13

0292 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0293 : 00111010110101000000000000000000; --     sw $11, 0($10)

0294 : 00111010100011000000000000000000; --     sw $10, 0($6)

0295 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0296 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0297 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0298 : 00010011000000000000000000000010; --     bne $12, $0, 2

0299 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0300 : 00001000000000000000000100011011; --     j startLoopQueenYAdd1 #end loooooop

0301 : 00001000000000000000000100101110; --     j endLoopQueenYAdd1

0302 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0303 : 00101010000100011111111111111111; --     addi $8, $8, -1

0304 : 00001000000000000000000100110001; --     j startLoopQueenYSub1

0305 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0306 : 00010010010000000000000000000001; --     bne $9, $0, 1

0307 : 00001000000000000000000101000100; --     j endLoopQueenYSub1

0308 : 00000010100100000000000110010000; --     sll $10, $8, 3

0309 : 00000010100101000111000000000000; --     add $10, $10, $7

0310 : 01000010110101000000000000000000; --     lw $11, 0($10)

0311 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0312 : 00000011010101101100000000001000; --     and $13, $11, $12

0313 : 00000010110101101101000000000100; --     sub $11, $11, $13

0314 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0315 : 00111010110101000000000000000000; --     sw $11, 0($10)

0316 : 00111010100011000000000000000000; --     sw $10, 0($6)

0317 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0318 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0319 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0320 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0321 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0322 : 00001000000000000000000100110001; --     j startLoopQueenYSub1 #end loooooop

0323 : 00001000000000000000000101000100; --     j endLoopQueenYSub1

0324 : 00001000000000000000000000000000; --     j 0

0325 : 00101010100000000000000000000001; --     addi $10, $0, 1

0326 : 00000010110101011110000000001000; --     and $11, $10, $30

0327 : 00010010110000000000000000000001; --     bne $11, $0, 1

0328 : 00001000000000000000000110100110; --     j whitePawnCheck

0329 : 00001000000000000000000101001010; --     j blackPawnCheck

0330 : 00001000000000000000000101001011; --     j blackPawnCheckSub1

0331 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0332 : 00101010000100011111111111111111; --     addi $8, $8, -1

0333 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0334 : 00010010010000000000000000000001; --     bne $9, $0, 1

0335 : 00001000000000000000000101111010; --     j blackPawnLeftDiagCheck

0336 : 00000010100100000000000110010000; --     sll $10, $8, 3

0337 : 00000010100101000111000000000000; --     add $10, $10, $7

0338 : 01000010110101000000000000000000; --     lw $11, 0($10)

0339 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0340 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0341 : 00010011000000000000000000000001; --     bne $12, $0, 1

0342 : 00010010100000000000000000000001; --     bne $10, $0, 1

0343 : 00001000000000000000000101111010; --     j blackPawnLeftDiagCheck

0344 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0345 : 00000011010101101100000000001000; --     and $13, $11, $12

0346 : 00000010110101101101000000000100; --     sub $11, $11, $13

0347 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0348 : 00000010100100000000000110010000; --     sll $10, $8, 3

0349 : 00000010100101000111000000000000; --     add $10, $10, $7

0350 : 00111010110101000000000000000000; --     sw $11, 0($10)

0351 : 00111010100000000000000001100100; --     sw $10, 100($0)

0352 : 00101010100000000000000000000101; --     addi $10, $0, 5

0353 : 00010010100100000000000000000001; --     bne $10, $8, 1

0354 : 00001000000000000000000101100100; --     j blackPawnYSub2Check

0355 : 00001000000000000000000101111010; --     j blackPawnLeftDiagCheck

0356 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0357 : 00101010000100011111111111111110; --     addi $8, $8, -2

0358 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0359 : 00010010010000000000000000000001; --     bne $9, $0, 1

0360 : 00001000000000000000000101111010; --     j blackPawnLeftDiagCheck

0361 : 00000010100100000000000110010000; --     sll $10, $8, 3

0362 : 00000010100101000111000000000000; --     add $10, $10, $7

0363 : 01000010110101000000000000000000; --     lw $11, 0($10)

0364 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0365 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0366 : 00010011000000000000000000000001; --     bne $12, $0, 1

0367 : 00010010100000000000000000000001; --     bne $10, $0, 1

0368 : 00001000000000000000000101111010; --     j blackPawnLeftDiagCheck

0369 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0370 : 00000011010101101100000000001000; --     and $13, $11, $12

0371 : 00000010110101101101000000000100; --     sub $11, $11, $13

0372 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0373 : 00000010100100000000000110010000; --     sll $10, $8, 3

0374 : 00000010100101000111000000000000; --     add $10, $10, $7

0375 : 00111010110101000000000000000000; --     sw $11, 0($10)

0376 : 00111010100000000000000001100101; --     sw $10, 101($0)

0377 : 00001000000000000000000101111010; --     j blackPawnLeftDiagCheck

0378 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0379 : 00101010000100011111111111111111; --     addi $8, $8, -1

0380 : 00101001110011111111111111111111; --     addi $7, $7, -1

0381 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0382 : 00010010010000000000000000000001; --     bne $9, $0, 1

0383 : 00001000000000000000000110010000; --     j blackPawnRightDiagCheck

0384 : 00000010100100000000000110010000; --     sll $10, $8, 3

0385 : 00000010100101000111000000000000; --     add $10, $10, $7

0386 : 01000010110101000000000000000000; --     lw $11, 0($10)

0387 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0388 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0389 : 00010011000000000000000000000001; --     bne $12, $0, 1

0390 : 00001000000000000000000110010000; --     j blackPawnRightDiagCheck

0391 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0392 : 00000011010101101100000000001000; --     and $13, $11, $12

0393 : 00000010110101101101000000000100; --     sub $11, $11, $13

0394 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0395 : 00000010100100000000000110010000; --     sll $10, $8, 3

0396 : 00000010100101000111000000000000; --     add $10, $10, $7

0397 : 00111010110101000000000000000000; --     sw $11, 0($10)

0398 : 00111010100000000000000001100110; --     sw $10, 102($0)

0399 : 00001000000000000000000110010000; --     j blackPawnRightDiagCheck

0400 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0401 : 00101010000100011111111111111111; --     addi $8, $8, -1

0402 : 00101001110011100000000000000001; --     addi $7, $7, 1

0403 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0404 : 00010010010000000000000000000001; --     bne $9, $0, 1

0405 : 00001000000000000000000000000000; --     j 0

0406 : 00000010100100000000000110010000; --     sll $10, $8, 3

0407 : 00000010100101000111000000000000; --     add $10, $10, $7

0408 : 01000010110101000000000000000000; --     lw $11, 0($10)

0409 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0410 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0411 : 00010011000000000000000000000001; --     bne $12, $0, 1

0412 : 00001000000000000000000000000000; --     j 0

0413 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0414 : 00000011010101101100000000001000; --     and $13, $11, $12

0415 : 00000010110101101101000000000100; --     sub $11, $11, $13

0416 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0417 : 00000010100100000000000110010000; --     sll $10, $8, 3

0418 : 00000010100101000111000000000000; --     add $10, $10, $7

0419 : 00111010110101000000000000000000; --     sw $11, 0($10)

0420 : 00111010100000000000000001100111; --     sw $10, 103($0)

0421 : 00001000000000000000000000000000; --     j 0

0422 : 00001000000000000000000110100111; --     j whitePawnYAdd1Check

0423 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0424 : 00101010000100000000000000000001; --     addi $8, $8, 1

0425 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0426 : 00010010010000000000000000000001; --     bne $9, $0, 1

0427 : 00001000000000000000000111010110; --     j whitePawnLeftDiagCheck

0428 : 00000010100100000000000110010000; --     sll $10, $8, 3

0429 : 00000010100101000111000000000000; --     add $10, $10, $7

0430 : 01000010110101000000000000000000; --     lw $11, 0($10)

0431 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0432 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0433 : 00010011000000000000000000000001; --     bne $12, $0, 1

0434 : 00010010100000000000000000000001; --     bne $10, $0, 1

0435 : 00001000000000000000000111010110; --     j whitePawnLeftDiagCheck

0436 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0437 : 00000011010101101100000000001000; --     and $13, $11, $12

0438 : 00000010110101101101000000000100; --     sub $11, $11, $13

0439 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0440 : 00000010100100000000000110010000; --     sll $10, $8, 3

0441 : 00000010100101000111000000000000; --     add $10, $10, $7

0442 : 00111010110101000000000000000000; --     sw $11, 0($10)

0443 : 00111010100000000000000001100100; --     sw $10, 100($0)

0444 : 00101010100000000000000000000010; --     addi $10, $0, 2

0445 : 00010010100100000000000000000001; --     bne $10, $8, 1

0446 : 00001000000000000000000111000000; --     j whitePawnYAdd2Check

0447 : 00001000000000000000000111010110; --     j whitePawnLeftDiagCheck

0448 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0449 : 00101010000100000000000000000010; --     addi $8, $8, 2

0450 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0451 : 00010010010000000000000000000001; --     bne $9, $0, 1

0452 : 00001000000000000000000111010110; --     j whitePawnLeftDiagCheck

0453 : 00000010100100000000000110010000; --     sll $10, $8, 3

0454 : 00000010100101000111000000000000; --     add $10, $10, $7

0455 : 01000010110101000000000000000000; --     lw $11, 0($10)

0456 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0457 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0458 : 00010011000000000000000000000001; --     bne $12, $0, 1

0459 : 00010010100000000000000000000001; --     bne $10, $0, 1

0460 : 00001000000000000000000111010110; --     j whitePawnLeftDiagCheck

0461 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0462 : 00000011010101101100000000001000; --     and $13, $11, $12

0463 : 00000010110101101101000000000100; --     sub $11, $11, $13

0464 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0465 : 00000010100100000000000110010000; --     sll $10, $8, 3

0466 : 00000010100101000111000000000000; --     add $10, $10, $7

0467 : 00111010110101000000000000000000; --     sw $11, 0($10)

0468 : 00111010100000000000000001100101; --     sw $10, 101($0)

0469 : 00001000000000000000000111010110; --     j whitePawnLeftDiagCheck

0470 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0471 : 00101010000100000000000000000001; --     addi $8, $8, 1

0472 : 00101001110011111111111111111111; --     addi $7, $7, -1

0473 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0474 : 00010010010000000000000000000001; --     bne $9, $0, 1

0475 : 00001000000000000000000111101100; --     j whitePawnRightDiagCheck

0476 : 00000010100100000000000110010000; --     sll $10, $8, 3

0477 : 00000010100101000111000000000000; --     add $10, $10, $7

0478 : 01000010110101000000000000000000; --     lw $11, 0($10)

0479 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0480 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0481 : 00010011000000000000000000000001; --     bne $12, $0, 1

0482 : 00001000000000000000000111101100; --     j whitePawnRightDiagCheck

0483 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0484 : 00000011010101101100000000001000; --     and $13, $11, $12

0485 : 00000010110101101101000000000100; --     sub $11, $11, $13

0486 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0487 : 00000010100100000000000110010000; --     sll $10, $8, 3

0488 : 00000010100101000111000000000000; --     add $10, $10, $7

0489 : 00111010110101000000000000000000; --     sw $11, 0($10)

0490 : 00111010100000000000000001100110; --     sw $10, 102($0)

0491 : 00001000000000000000000111101100; --     j whitePawnRightDiagCheck

0492 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0493 : 00101010000100000000000000000001; --     addi $8, $8, 1

0494 : 00101001110011100000000000000001; --     addi $7, $7, 1

0495 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0496 : 00010010010000000000000000000001; --     bne $9, $0, 1

0497 : 00001000000000000000000000000000; --     j 0

0498 : 00000010100100000000000110010000; --     sll $10, $8, 3

0499 : 00000010100101000111000000000000; --     add $10, $10, $7

0500 : 01000010110101000000000000000000; --     lw $11, 0($10)

0501 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0502 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0503 : 00010011000000000000000000000001; --     bne $12, $0, 1

0504 : 00001000000000000000000000000000; --     j 0

0505 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0506 : 00000011010101101100000000001000; --     and $13, $11, $12

0507 : 00000010110101101101000000000100; --     sub $11, $11, $13

0508 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0509 : 00000010100100000000000110010000; --     sll $10, $8, 3

0510 : 00000010100101000111000000000000; --     add $10, $10, $7

0511 : 00111010110101000000000000000000; --     sw $11, 0($10)

0512 : 00111010100000000000000001100111; --     sw $10, 103($0)

0513 : 00001000000000000000000000000000; --     j 0

0514 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0515 : 00101001110011100000000000000001; --     addi $7, $7, 1

0516 : 00101010000100011111111111111111; --     addi $8, $8, -1

0517 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0518 : 00101100110000000000000000000001; --     addi $19, $0, 1

0519 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0520 : 00000010100100000000000110010000; --     sll $10, $8, 3

0521 : 00000010100101000111000000000000; --     add $10, $10, $7

0522 : 01000010110101000000000000000000; --     lw $11, 0($10)

0523 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0524 : 00000011010101101100000000001000; --     and $13, $11, $12

0525 : 00000010110101101101000000000100; --     sub $11, $11, $13

0526 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0527 : 00111010110101000000000000000000; --     sw $11, 0($10)

0528 : 00111010100000000000000001100100; --     sw $10, 100($0)

0529 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0530 : 00101001110011100000000000000001; --     addi $7, $7, 1

0531 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0532 : 00101100110000000000000000000001; --     addi $19, $0, 1

0533 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0534 : 00000010100100000000000110010000; --     sll $10, $8, 3

0535 : 00000010100101000111000000000000; --     add $10, $10, $7

0536 : 01000010110101000000000000000000; --     lw $11, 0($10)

0537 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0538 : 00000011010101101100000000001000; --     and $13, $11, $12

0539 : 00000010110101101101000000000100; --     sub $11, $11, $13

0540 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0541 : 00111010110101000000000000000000; --     sw $11, 0($10)

0542 : 00111010100000000000000001100101; --     sw $10, 101($0)

0543 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0544 : 00101001110011100000000000000001; --     addi $7, $7, 1

0545 : 00101010000100000000000000000001; --     addi $8, $8, 1

0546 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0547 : 00101100110000000000000000000001; --     addi $19, $0, 1

0548 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0549 : 00000010100100000000000110010000; --     sll $10, $8, 3

0550 : 00000010100101000111000000000000; --     add $10, $10, $7

0551 : 01000010110101000000000000000000; --     lw $11, 0($10)

0552 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0553 : 00000011010101101100000000001000; --     and $13, $11, $12

0554 : 00000010110101101101000000000100; --     sub $11, $11, $13

0555 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0556 : 00111010110101000000000000000000; --     sw $11, 0($10)

0557 : 00111010100000000000000001100110; --     sw $10, 102($0)

0558 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0559 : 00101010000100011111111111111111; --     addi $8, $8, -1

0560 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0561 : 00101100110000000000000000000001; --     addi $19, $0, 1

0562 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0563 : 00000010100100000000000110010000; --     sll $10, $8, 3

0564 : 00000010100101000111000000000000; --     add $10, $10, $7

0565 : 01000010110101000000000000000000; --     lw $11, 0($10)

0566 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0567 : 00000011010101101100000000001000; --     and $13, $11, $12

0568 : 00000010110101101101000000000100; --     sub $11, $11, $13

0569 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0570 : 00111010110101000000000000000000; --     sw $11, 0($10)

0571 : 00111010100000000000000001100111; --     sw $10, 103($0)

0572 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0573 : 00101010000100000000000000000001; --     addi $8, $8, 1

0574 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0575 : 00101100110000000000000000000001; --     addi $19, $0, 1

0576 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0577 : 00000010100100000000000110010000; --     sll $10, $8, 3

0578 : 00000010100101000111000000000000; --     add $10, $10, $7

0579 : 01000010110101000000000000000000; --     lw $11, 0($10)

0580 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0581 : 00000011010101101100000000001000; --     and $13, $11, $12

0582 : 00000010110101101101000000000100; --     sub $11, $11, $13

0583 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0584 : 00111010110101000000000000000000; --     sw $11, 0($10)

0585 : 00111010100000000000000001101000; --     sw $10, 104($0)

0586 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0587 : 00101001110011111111111111111111; --     addi $7, $7, -1

0588 : 00101010000100011111111111111111; --     addi $8, $8, -1

0589 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0590 : 00101100110000000000000000000001; --     addi $19, $0, 1

0591 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0592 : 00000010100100000000000110010000; --     sll $10, $8, 3

0593 : 00000010100101000111000000000000; --     add $10, $10, $7

0594 : 01000010110101000000000000000000; --     lw $11, 0($10)

0595 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0596 : 00000011010101101100000000001000; --     and $13, $11, $12

0597 : 00000010110101101101000000000100; --     sub $11, $11, $13

0598 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0599 : 00111010110101000000000000000000; --     sw $11, 0($10)

0600 : 00111010100000000000000001101001; --     sw $10, 105($0)

0601 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0602 : 00101001110011111111111111111111; --     addi $7, $7, -1

0603 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0604 : 00101100110000000000000000000001; --     addi $19, $0, 1

0605 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0606 : 00000010100100000000000110010000; --     sll $10, $8, 3

0607 : 00000010100101000111000000000000; --     add $10, $10, $7

0608 : 01000010110101000000000000000000; --     lw $11, 0($10)

0609 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0610 : 00000011010101101100000000001000; --     and $13, $11, $12

0611 : 00000010110101101101000000000100; --     sub $11, $11, $13

0612 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0613 : 00111010110101000000000000000000; --     sw $11, 0($10)

0614 : 00111010100000000000000001101010; --     sw $10, 106($0)

0615 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0616 : 00101001110011111111111111111111; --     addi $7, $7, -1

0617 : 00101010000100000000000000000001; --     addi $8, $8, 1

0618 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0619 : 00101100110000000000000000000001; --     addi $19, $0, 1

0620 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0621 : 00000010100100000000000110010000; --     sll $10, $8, 3

0622 : 00000010100101000111000000000000; --     add $10, $10, $7

0623 : 01000010110101000000000000000000; --     lw $11, 0($10)

0624 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0625 : 00000011010101101100000000001000; --     and $13, $11, $12

0626 : 00000010110101101101000000000100; --     sub $11, $11, $13

0627 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0628 : 00111010110101000000000000000000; --     sw $11, 0($10)

0629 : 00111010100000000000000001101011; --     sw $10, 107($0)

0630 : 00001000000000000000000000000000; --     j 0

0631 : 00101001100000000000000001100100; --     addi $6, $0, 100

0632 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0633 : 00101001110011100000000000000001; --     addi $7, $7, 1

0634 : 00101010000100000000000000000001; --     addi $8, $8, 1

0635 : 00001000000000000000001001111100; --     j startLoopBishopXAdd1YAdd1

0636 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0637 : 00010010010000000000000000000001; --     bne $9, $0, 1

0638 : 00001000000000000000001010010000; --     j endLoopBishopXAdd1YAdd1

0639 : 00000010100100000000000110010000; --     sll $10, $8, 3

0640 : 00000010100101000111000000000000; --     add $10, $10, $7

0641 : 01000010110101000000000000000000; --     lw $11, 0($10)

0642 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0643 : 00000011010101101100000000001000; --     and $13, $11, $12

0644 : 00000010110101101101000000000100; --     sub $11, $11, $13

0645 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0646 : 00111010110101000000000000000000; --     sw $11, 0($10)

0647 : 00111010100011000000000000000000; --     sw $10, 0($6)

0648 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0649 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0650 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0651 : 00010011000000000000000000000011; --     bne $12, $0, 3

0652 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0653 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0654 : 00001000000000000000001001111100; --     j startLoopBishopXAdd1YAdd1 #end loooooop

0655 : 00001000000000000000001010010000; --     j endLoopBishopXAdd1YAdd1

0656 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0657 : 00101001110011100000000000000001; --     addi $7, $7, 1

0658 : 00101010000100011111111111111111; --     addi $8, $8, -1

0659 : 00001000000000000000001010010100; --     j startLoopBishopXAdd1YSub1

0660 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0661 : 00010010010000000000000000000001; --     bne $9, $0, 1

0662 : 00001000000000000000001010101000; --     j endLoopBishopXAdd1YSub1

0663 : 00000010100100000000000110010000; --     sll $10, $8, 3

0664 : 00000010100101000111000000000000; --     add $10, $10, $7

0665 : 01000010110101000000000000000000; --     lw $11, 0($10)

0666 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0667 : 00000011010101101100000000001000; --     and $13, $11, $12

0668 : 00000010110101101101000000000100; --     sub $11, $11, $13

0669 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0670 : 00111010110101000000000000000000; --     sw $11, 0($10)

0671 : 00111010100011000000000000000000; --     sw $10, 0($6)

0672 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0673 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0674 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0675 : 00010011000000000000000000000011; --     bne $12, $0, 3

0676 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0677 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0678 : 00001000000000000000001010010100; --     j startLoopBishopXAdd1YSub1 #end loooooop

0679 : 00001000000000000000001010101000; --     j endLoopBishopXAdd1YSub1

0680 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0681 : 00101001110011111111111111111111; --     addi $7, $7, -1

0682 : 00101010000100000000000000000001; --     addi $8, $8, 1

0683 : 00001000000000000000001010101100; --     j startLoopBishopXSub1YAdd1

0684 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0685 : 00010010010000000000000000000001; --     bne $9, $0, 1

0686 : 00001000000000000000001011000000; --     j endLoopBishopXSub1YAdd1

0687 : 00000010100100000000000110010000; --     sll $10, $8, 3

0688 : 00000010100101000111000000000000; --     add $10, $10, $7

0689 : 01000010110101000000000000000000; --     lw $11, 0($10)

0690 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0691 : 00000011010101101100000000001000; --     and $13, $11, $12

0692 : 00000010110101101101000000000100; --     sub $11, $11, $13

0693 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0694 : 00111010110101000000000000000000; --     sw $11, 0($10)

0695 : 00111010100011000000000000000000; --     sw $10, 0($6)

0696 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0697 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0698 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0699 : 00010011000000000000000000000011; --     bne $12, $0, 3

0700 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0701 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0702 : 00001000000000000000001010101100; --     j startLoopBishopXSub1YAdd1 #end loooooop

0703 : 00001000000000000000001011000000; --     j endLoopBishopXSub1YAdd1

0704 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0705 : 00101001110011111111111111111111; --     addi $7, $7, -1

0706 : 00101010000100011111111111111111; --     addi $8, $8, -1

0707 : 00001000000000000000001011000100; --     j startLoopBishopXSub1YSub1

0708 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0709 : 00010010010000000000000000000001; --     bne $9, $0, 1

0710 : 00001000000000000000001011011000; --     j endLoopBishopXSub1YSub1

0711 : 00000010100100000000000110010000; --     sll $10, $8, 3

0712 : 00000010100101000111000000000000; --     add $10, $10, $7

0713 : 01000010110101000000000000000000; --     lw $11, 0($10)

0714 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0715 : 00000011010101101100000000001000; --     and $13, $11, $12

0716 : 00000010110101101101000000000100; --     sub $11, $11, $13

0717 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0718 : 00111010110101000000000000000000; --     sw $11, 0($10)

0719 : 00111010100011000000000000000000; --     sw $10, 0($6)

0720 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0721 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0722 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0723 : 00010011000000000000000000000011; --     bne $12, $0, 3

0724 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0725 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0726 : 00001000000000000000001011000100; --     j startLoopBishopXSub1YSub1 #end loooooop

0727 : 00001000000000000000001011011000; --     j endLoopBishopXSub1YSub1

0728 : 00001000000000000000000000000000; --     j 0

0729 : 00101001100000000000000001100100; --     addi $6, $0, 100

0730 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0731 : 00101001110011100000000000000001; --     addi $7, $7, 1

0732 : 00001000000000000000001011011101; --     j startLoopRookXAdd1

0733 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0734 : 00010010010000000000000000000001; --     bne $9, $0, 1

0735 : 00001000000000000000001011110000; --     j endLoopRookXAdd1

0736 : 00000010100100000000000110010000; --     sll $10, $8, 3

0737 : 00000010100101000111000000000000; --     add $10, $10, $7

0738 : 01000010110101000000000000000000; --     lw $11, 0($10)

0739 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0740 : 00000011010101101100000000001000; --     and $13, $11, $12

0741 : 00000010110101101101000000000100; --     sub $11, $11, $13

0742 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0743 : 00111010110101000000000000000000; --     sw $11, 0($10)

0744 : 00111010100011000000000000000000; --     sw $10, 0($6)

0745 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0746 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0747 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0748 : 00010011000000000000000000000010; --     bne $12, $0, 2

0749 : 00101001110011100000000000000001; --     addi $7, $7, 1 #x = x + 1

0750 : 00001000000000000000001011011101; --     j startLoopRookXAdd1 #end loooooop

0751 : 00001000000000000000001011110000; --     j endLoopRookXAdd1

0752 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0753 : 00101001110011111111111111111111; --     addi $7, $7, -1

0754 : 00001000000000000000001011110011; --     j startLoopRookXSub1

0755 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0756 : 00010010010000000000000000000001; --     bne $9, $0, 1

0757 : 00001000000000000000001100000110; --     j endLoopRookXSub1

0758 : 00000010100100000000000110010000; --     sll $10, $8, 3

0759 : 00000010100101000111000000000000; --     add $10, $10, $7

0760 : 01000010110101000000000000000000; --     lw $11, 0($10)

0761 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0762 : 00000011010101101100000000001000; --     and $13, $11, $12

0763 : 00000010110101101101000000000100; --     sub $11, $11, $13

0764 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0765 : 00111010110101000000000000000000; --     sw $11, 0($10)

0766 : 00111010100011000000000000000000; --     sw $10, 0($6)

0767 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0768 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0769 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0770 : 00010011000000000000000000000010; --     bne $12, $0, 2

0771 : 00101001110011111111111111111111; --     addi $7, $7, -1 #x = x - 1

0772 : 00001000000000000000001011110011; --     j startLoopRookXSub1 #end loooooop

0773 : 00001000000000000000001100000110; --     j endLoopRookXSub1

0774 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0775 : 00101010000100000000000000000001; --     addi $8, $8, 1

0776 : 00001000000000000000001100001001; --     j startLoopRookYAdd1

0777 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0778 : 00010010010000000000000000000001; --     bne $9, $0, 1

0779 : 00001000000000000000001100011100; --     j endLoopRookYAdd1

0780 : 00000010100100000000000110010000; --     sll $10, $8, 3

0781 : 00000010100101000111000000000000; --     add $10, $10, $7

0782 : 01000010110101000000000000000000; --     lw $11, 0($10)

0783 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0784 : 00000011010101101100000000001000; --     and $13, $11, $12

0785 : 00000010110101101101000000000100; --     sub $11, $11, $13

0786 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0787 : 00111010110101000000000000000000; --     sw $11, 0($10)

0788 : 00111010100011000000000000000000; --     sw $10, 0($6)

0789 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0790 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0791 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0792 : 00010011000000000000000000000010; --     bne $12, $0, 2

0793 : 00101010000100000000000000000001; --     addi $8, $8, 1 #y = y + 1

0794 : 00001000000000000000001100001001; --     j startLoopRookYAdd1 #end loooooop

0795 : 00001000000000000000001100011100; --     j endLoopRookYAdd1

0796 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0797 : 00101010000100011111111111111111; --     addi $8, $8, -1

0798 : 00001000000000000000001100011111; --     j startLoopRookYSub1

0799 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0800 : 00010010010000000000000000000001; --     bne $9, $0, 1

0801 : 00001000000000000000001100110010; --     j endLoopRookYSub1

0802 : 00000010100100000000000110010000; --     sll $10, $8, 3

0803 : 00000010100101000111000000000000; --     add $10, $10, $7

0804 : 01000010110101000000000000000000; --     lw $11, 0($10)

0805 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0806 : 00000011010101101100000000001000; --     and $13, $11, $12

0807 : 00000010110101101101000000000100; --     sub $11, $11, $13

0808 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0809 : 00111010110101000000000000000000; --     sw $11, 0($10)

0810 : 00111010100011000000000000000000; --     sw $10, 0($6)

0811 : 00101001100011000000000000000001; --     addi $6, $6, 1 #addr = addr + 1

0812 : 00101010100000000000000000001110; --     addi $10, $0, 14 #piece mask stored in $10 = 1110

0813 : 00000011000101101010000000001000; --     and $12, $11, $10 # store the non shifted piece info in $12

0814 : 00010011000000000000000000000010; --     bne $12, $0, 2 

0815 : 00101010000100011111111111111111; --     addi $8, $8, -1 #y = y - 1

0816 : 00001000000000000000001100011111; --     j startLoopRookYSub1 #end loooooop

0817 : 00001000000000000000001100110010; --     j endLoopRookYSub1

0818 : 00001000000000000000000000000000; --     j 0

0819 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0820 : 00101001110011100000000000000001; --     addi $7, $7, 1

0821 : 00101010000100000000000000000010; --     addi $8, $8, 2

0822 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0823 : 00101100110000000000000000000001; --     addi $19, $0, 1

0824 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0825 : 00000010100100000000000110010000; --     sll $10, $8, 3

0826 : 00000010100101000111000000000000; --     add $10, $10, $7

0827 : 01000010110101000000000000000000; --     lw $11, 0($10)

0828 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0829 : 00000011010101101100000000001000; --     and $13, $11, $12

0830 : 00000010110101101101000000000100; --     sub $11, $11, $13

0831 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0832 : 00111010110101000000000000000000; --     sw $11, 0($10)

0833 : 00111010100000000000000001100100; --     sw $10, 100($0)

0834 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0835 : 00101001110011100000000000000001; --     addi $7, $7, 1

0836 : 00101010000100011111111111111110; --     addi $8, $8, -2

0837 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0838 : 00101100110000000000000000000001; --     addi $19, $0, 1

0839 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0840 : 00000010100100000000000110010000; --     sll $10, $8, 3

0841 : 00000010100101000111000000000000; --     add $10, $10, $7

0842 : 01000010110101000000000000000000; --     lw $11, 0($10)

0843 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0844 : 00000011010101101100000000001000; --     and $13, $11, $12

0845 : 00000010110101101101000000000100; --     sub $11, $11, $13

0846 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0847 : 00111010110101000000000000000000; --     sw $11, 0($10)

0848 : 00111010100000000000000001100101; --     sw $10, 101($0)

0849 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0850 : 00101001110011111111111111111111; --     addi $7, $7, -1

0851 : 00101010000100000000000000000010; --     addi $8, $8, 2

0852 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0853 : 00101100110000000000000000000001; --     addi $19, $0, 1

0854 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0855 : 00000010100100000000000110010000; --     sll $10, $8, 3

0856 : 00000010100101000111000000000000; --     add $10, $10, $7

0857 : 01000010110101000000000000000000; --     lw $11, 0($10)

0858 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0859 : 00000011010101101100000000001000; --     and $13, $11, $12

0860 : 00000010110101101101000000000100; --     sub $11, $11, $13

0861 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0862 : 00111010110101000000000000000000; --     sw $11, 0($10)

0863 : 00111010100000000000000001100110; --     sw $10, 102($0)

0864 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0865 : 00101001110011111111111111111111; --     addi $7, $7, -1

0866 : 00101010000100011111111111111110; --     addi $8, $8, -2

0867 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0868 : 00101100110000000000000000000001; --     addi $19, $0, 1

0869 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0870 : 00000010100100000000000110010000; --     sll $10, $8, 3

0871 : 00000010100101000111000000000000; --     add $10, $10, $7

0872 : 01000010110101000000000000000000; --     lw $11, 0($10)

0873 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0874 : 00000011010101101100000000001000; --     and $13, $11, $12

0875 : 00000010110101101101000000000100; --     sub $11, $11, $13

0876 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0877 : 00111010110101000000000000000000; --     sw $11, 0($10)

0878 : 00111010100000000000000001100111; --     sw $10, 103($0)

0879 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0880 : 00101001110011100000000000000010; --     addi $7, $7, 2

0881 : 00101010000100000000000000000001; --     addi $8, $8, 1

0882 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0883 : 00101100110000000000000000000001; --     addi $19, $0, 1

0884 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0885 : 00000010100100000000000110010000; --     sll $10, $8, 3

0886 : 00000010100101000111000000000000; --     add $10, $10, $7

0887 : 01000010110101000000000000000000; --     lw $11, 0($10)

0888 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0889 : 00000011010101101100000000001000; --     and $13, $11, $12

0890 : 00000010110101101101000000000100; --     sub $11, $11, $13

0891 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0892 : 00111010110101000000000000000000; --     sw $11, 0($10)

0893 : 00111010100000000000000001101000; --     sw $10, 104($0)

0894 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0895 : 00101001110011100000000000000010; --     addi $7, $7, 2

0896 : 00101010000100011111111111111111; --     addi $8, $8, -1

0897 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0898 : 00101100110000000000000000000001; --     addi $19, $0, 1

0899 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0900 : 00000010100100000000000110010000; --     sll $10, $8, 3

0901 : 00000010100101000111000000000000; --     add $10, $10, $7

0902 : 01000010110101000000000000000000; --     lw $11, 0($10)

0903 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0904 : 00000011010101101100000000001000; --     and $13, $11, $12

0905 : 00000010110101101101000000000100; --     sub $11, $11, $13

0906 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0907 : 00111010110101000000000000000000; --     sw $11, 0($10)

0908 : 00111010100000000000000001101001; --     sw $10, 105($0)

0909 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0910 : 00101001110011111111111111111110; --     addi $7, $7, -2

0911 : 00101010000100000000000000000001; --     addi $8, $8, 1

0912 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0913 : 00101100110000000000000000000001; --     addi $19, $0, 1

0914 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0915 : 00000010100100000000000110010000; --     sll $10, $8, 3

0916 : 00000010100101000111000000000000; --     add $10, $10, $7

0917 : 01000010110101000000000000000000; --     lw $11, 0($10)

0918 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0919 : 00000011010101101100000000001000; --     and $13, $11, $12

0920 : 00000010110101101101000000000100; --     sub $11, $11, $13

0921 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0922 : 00111010110101000000000000000000; --     sw $11, 0($10)

0923 : 00111010100000000000000001101010; --     sw $10, 106($0)

0924 : 00011000000000000000001110101100; --     jal parseXY # parses $1 to make $7=x and $8=y

0925 : 00101001110011111111111111111110; --     addi $7, $7, -2

0926 : 00101010000100011111111111111111; --     addi $8, $8, -1

0927 : 00011000000000000000001110110010; --     jal validateDestination #writes to $9 if valid move

0928 : 00101100110000000000000000000001; --     addi $19, $0, 1

0929 : 00010010011001100000000000001001; --     bne $9, $19, 9 #!!!!WARNING!!!!: this number is subject to change if the number of instr changes

0930 : 00000010100100000000000110010000; --     sll $10, $8, 3

0931 : 00000010100101000111000000000000; --     add $10, $10, $7

0932 : 01000010110101000000000000000000; --     lw $11, 0($10)

0933 : 00101011000000000000000011110000; --     addi $12, $0, 240 #square color mask 11110000

0934 : 00000011010101101100000000001000; --     and $13, $11, $12

0935 : 00000010110101101101000000000100; --     sub $11, $11, $13

0936 : 00101010110101100000000000010000; --     addi $11, $11, 16 #green sq color 00010000

0937 : 00111010110101000000000000000000; --     sw $11, 0($10)

0938 : 00111010100000000000000001101011; --     sw $10, 107($0)

0939 : 00001000000000000000000000000000; --     j 0

0940 : 00101011000000000000000000000111; --     addi $12, $0, 7 #lsb x mask 000111

0941 : 00101011010000000000000000111000; --     addi $13, $0, 56 #lsb y mask 111000

0942 : 00000001110000101100000000001000; --     and $7, $1, $12

0943 : 00000010000000101101000000001000; --     and $8, $1, $13

0944 : 00000010000100000000000110010100; --     sra $8, $8, 3

0945 : 00100111110000000000000000000000; --     jr $31

0946 : 00101010100000000000000000000001; --     addi $10 $0 1

0947 : 00110001110000000000000000000001; --     blt $7 $0 1

0948 : 00010000000101000000000000000010; --     bne $0 $10 2

0949 : 00101010010000000000000000000000; --     addi $9 $0 0

0950 : 00100111110000000000000000000000; --     jr $31

0951 : 00101010100000000000000000000111; --     addi $10 $0 7

0952 : 00110010100011100000000000000001; --     blt $10 $7 1

0953 : 00010000000101000000000000000010; --     bne $0 $10 2

0954 : 00101010010000000000000000000000; --     addi $9 $0 0

0955 : 00100111110000000000000000000000; --     jr $31

0956 : 00101010100000000000000000000001; --     addi $10 $0 1

0957 : 00110010000000000000000000000001; --     blt $8 $0 1

0958 : 00010000000101000000000000000010; --     bne $0 $10 2

0959 : 00101010010000000000000000000000; --     addi $9 $0 0

0960 : 00100111110000000000000000000000; --     jr $31

0961 : 00101010100000000000000000000111; --     addi $10 $0 7

0962 : 00110010100100000000000000000001; --     blt $10 $8 1

0963 : 00010000000101000000000000000010; --     bne $0 $10 2

0964 : 00101010010000000000000000000000; --     addi $9 $0 0

0965 : 00100111110000000000000000000000; --     jr $31

0966 : 00101010100000000000000000000001; --     addi $10, $0, 1

0967 : 00000010110101011110000000001000; --     and $11, $10, $30

0968 : 00000011000100000000000110010000; --     sll $12 $8 3

0969 : 00000011000110000111000000000000; --     add $12 $12 $7

0970 : 01000011010110000000000000000000; --     lw $13 0($12)

0971 : 00101011110000000000000000001110; --     addi $15 $0 14 #piece mask

0972 : 00000011100110101111000000001000; --     and $14 $13 $15

0973 : 00010011100000000000000000000010; --     bne $14 $0 2

0974 : 00101010010000000000000000000001; --     addi $9 $0 1

0975 : 00100111110000000000000000000000; --     jr $31

0976 : 00000011100110101010000000001000; --     and $14 $13 $10

0977 : 00010011100101100000000000000010; --     bne $14, $11, 2

0978 : 00101010010000000000000000000000; --     addi $9 $0 0

0979 : 00100111110000000000000000000000; --     jr $31

0980 : 00101010010000000000000000000001; --     addi $9 $0 1

0981 : 00100111110000000000000000000000; --     jr $31

0982 : 00101010100000011111111111111111; --     addi $10 $0 -1

0983 : 00111010100000000000000001000101; --     sw $10 69($0)

0984 : 01000010100000000000000001100100; --     lw $10 100($0)

0985 : 00010010100001000000000000000001; --     bne $10, $2, 1

0986 : 00001000000000000000010010100101; --     j handle_valid

0987 : 01000010100000000000000001100101; --     lw $10 101($0)

0988 : 00010010100001000000000000000001; --     bne $10, $2, 1

0989 : 00001000000000000000010010100101; --     j handle_valid

0990 : 01000010100000000000000001100110; --     lw $10 102($0)

0991 : 00010010100001000000000000000001; --     bne $10, $2, 1

0992 : 00001000000000000000010010100101; --     j handle_valid

0993 : 01000010100000000000000001100111; --     lw $10 103($0)

0994 : 00010010100001000000000000000001; --     bne $10, $2, 1

0995 : 00001000000000000000010010100101; --     j handle_valid

0996 : 01000010100000000000000001101000; --     lw $10 104($0)

0997 : 00010010100001000000000000000001; --     bne $10, $2, 1

0998 : 00001000000000000000010010100101; --     j handle_valid

0999 : 01000010100000000000000001101001; --     lw $10 105($0)

1000 : 00010010100001000000000000000001; --     bne $10, $2, 1

1001 : 00001000000000000000010010100101; --     j handle_valid

1002 : 01000010100000000000000001101010; --     lw $10 106($0)

1003 : 00010010100001000000000000000001; --     bne $10, $2, 1

1004 : 00001000000000000000010010100101; --     j handle_valid

1005 : 01000010100000000000000001101011; --     lw $10 107($0)

1006 : 00010010100001000000000000000001; --     bne $10, $2, 1

1007 : 00001000000000000000010010100101; --     j handle_valid

1008 : 01000010100000000000000001101100; --     lw $10 108($0)

1009 : 00010010100001000000000000000001; --     bne $10, $2, 1

1010 : 00001000000000000000010010100101; --     j handle_valid

1011 : 01000010100000000000000001101101; --     lw $10 109($0)

1012 : 00010010100001000000000000000001; --     bne $10, $2, 1

1013 : 00001000000000000000010010100101; --     j handle_valid

1014 : 01000010100000000000000001101110; --     lw $10 110($0)

1015 : 00010010100001000000000000000001; --     bne $10, $2, 1

1016 : 00001000000000000000010010100101; --     j handle_valid

1017 : 01000010100000000000000001101111; --     lw $10 111($0)

1018 : 00010010100001000000000000000001; --     bne $10, $2, 1

1019 : 00001000000000000000010010100101; --     j handle_valid

1020 : 01000010100000000000000001110000; --     lw $10 112($0)

1021 : 00010010100001000000000000000001; --     bne $10, $2, 1

1022 : 00001000000000000000010010100101; --     j handle_valid

1023 : 01000010100000000000000001110001; --     lw $10 113($0)

1024 : 00010010100001000000000000000001; --     bne $10, $2, 1

1025 : 00001000000000000000010010100101; --     j handle_valid

1026 : 01000010100000000000000001110010; --     lw $10 114($0)

1027 : 00010010100001000000000000000001; --     bne $10, $2, 1

1028 : 00001000000000000000010010100101; --     j handle_valid

1029 : 01000010100000000000000001110011; --     lw $10 115($0)

1030 : 00010010100001000000000000000001; --     bne $10, $2, 1

1031 : 00001000000000000000010010100101; --     j handle_valid

1032 : 01000010100000000000000001110100; --     lw $10 116($0)

1033 : 00010010100001000000000000000001; --     bne $10, $2, 1

1034 : 00001000000000000000010010100101; --     j handle_valid

1035 : 01000010100000000000000001110101; --     lw $10 117($0)

1036 : 00010010100001000000000000000001; --     bne $10, $2, 1

1037 : 00001000000000000000010010100101; --     j handle_valid

1038 : 01000010100000000000000001110110; --     lw $10 118($0)

1039 : 00010010100001000000000000000001; --     bne $10, $2, 1

1040 : 00001000000000000000010010100101; --     j handle_valid

1041 : 01000010100000000000000001110111; --     lw $10 119($0)

1042 : 00010010100001000000000000000001; --     bne $10, $2, 1

1043 : 00001000000000000000010010100101; --     j handle_valid

1044 : 01000010100000000000000001111000; --     lw $10 120($0)

1045 : 00010010100001000000000000000001; --     bne $10, $2, 1

1046 : 00001000000000000000010010100101; --     j handle_valid

1047 : 01000010100000000000000001111001; --     lw $10 121($0)

1048 : 00010010100001000000000000000001; --     bne $10, $2, 1

1049 : 00001000000000000000010010100101; --     j handle_valid

1050 : 01000010100000000000000001111010; --     lw $10 122($0)

1051 : 00010010100001000000000000000001; --     bne $10, $2, 1

1052 : 00001000000000000000010010100101; --     j handle_valid

1053 : 01000010100000000000000001111011; --     lw $10 123($0)

1054 : 00010010100001000000000000000001; --     bne $10, $2, 1

1055 : 00001000000000000000010010100101; --     j handle_valid

1056 : 01000010100000000000000001111100; --     lw $10 124($0)

1057 : 00010010100001000000000000000001; --     bne $10, $2, 1

1058 : 00001000000000000000010010100101; --     j handle_valid

1059 : 01000010100000000000000001111101; --     lw $10 125($0)

1060 : 00010010100001000000000000000001; --     bne $10, $2, 1

1061 : 00001000000000000000010010100101; --     j handle_valid

1062 : 01000010100000000000000001111110; --     lw $10 126($0)

1063 : 00010010100001000000000000000001; --     bne $10, $2, 1

1064 : 00001000000000000000010010100101; --     j handle_valid

1065 : 01000010100000000000000001111111; --     lw $10 127($0)

1066 : 00010010100001000000000000000001; --     bne $10, $2, 1

1067 : 00001000000000000000010010100101; --     j handle_valid

1068 : 00001000000000000000010000101101; --     j restoreColors

1069 : 00101010100000000000000000000000; --     addi $10, $0, 0 #iterator i

1070 : 00101010110000000000000001000000; --     addi $11, $0, 64 #upper loop bound

1071 : 00101011000000000000000000000001; --     addi $12, $0, 1 #lsb x mask 0001

1072 : 00101011010000000000000000001000; --     addi $13, $0, 8 #lsb y mask 1000

1073 : 00101011100000000000000011110000; --     addi $14, $0, 240 #square color mask 11110000

1074 : 00001000000000000000010000110011; --     j startLoopRestoreColors

1075 : 00010010100101100000000000000001; --     bne $10, $11, 1

1076 : 00001000000000000000010001000011; --     j endLoopRestoreColors

1077 : 01000011110101000000000000000000; --     lw $15, 0($10)

1078 : 00000100000111001111000000001000; --     and $16, $14, $15

1079 : 00000011110111110000000000000100; --     sub $15, $15, $16

1080 : 00000100010101001100000000001000; --     and $17, $10, $12

1081 : 00000100100101001101000000001000; --     and $18, $10, $13

1082 : 00000100101001000000000110010100; --     sra $18, $18, 3

1083 : 00000100111000110010000000000100; --     sub $19, $17, $18

1084 : 00010100110000000000000000000010; --     bne $19, $0, 2

1085 : 00101011110111100000000010000000; --     addi $15, $15, 128 #10000000

1086 : 00010011000000000000000000000001; --     bne $12, $0, 1 #just to skip running the write white sq part

1087 : 00101011110111100000000001000000; --     addi $15, $15, 64 #01000000

1088 : 00111011110101000000000000000000; --     sw $15, 0($10)

1089 : 00101010100101000000000000000001; --     addi $10, $10, 1 #i = i + 1

1090 : 00001000000000000000010000110011; --     j startLoopRestoreColors #end loooooop

1091 : 00101000010000000000000000000000; --     addi $1, $0, 0

1092 : 00101000100000000000000000000000; --     addi $2, $0, 0

1093 : 00101000110000000000000000000000; --     addi $3, $0, 0

1094 : 00101001000000000000000000000000; --     addi $4, $0, 0

1095 : 00101001010000000000000000000000; --     addi $5, $0, 0

1096 : 00101001100000000000000000000000; --     addi $6, $0, 0

1097 : 00101001110000000000000000000000; --     addi $7, $0, 0

1098 : 00101010000000000000000000000000; --     addi $8, $0, 0

1099 : 00101010010000000000000000000000; --     addi $9, $0, 0

1100 : 00101010100000000000000000000000; --     addi $10, $0, 0

1101 : 00101010110000000000000000000000; --     addi $11, $0, 0

1102 : 00101011000000000000000000000000; --     addi $12, $0, 0

1103 : 00101011010000000000000000000000; --     addi $13, $0, 0

1104 : 00101011100000000000000000000000; --     addi $14, $0, 0

1105 : 00101011110000000000000000000000; --     addi $15, $0, 0

1106 : 00101100000000000000000000000000; --     addi $16, $0, 0

1107 : 00101100010000000000000000000000; --     addi $17, $0, 0

1108 : 00101100100000000000000000000000; --     addi $18, $0, 0

1109 : 00101100110000000000000000000000; --     addi $19, $0, 0

1110 : 00101101000000000000000000000000; --     addi $20, $0, 0

1111 : 00101101010000000000000000000000; --     addi $21, $0, 0

1112 : 00101101100000000000000000000000; --     addi $22, $0, 0

1113 : 00101101110000000000000000000000; --     addi $23, $0, 0

1114 : 00101110000000000000000000000000; --     addi $24, $0, 0

1115 : 00101110010000000000000000000000; --     addi $25, $0, 0

1116 : 00101110100000000000000000000000; --     addi $26, $0, 0

1117 : 00101110110000000000000000000000; --     addi $27, $0, 0

1118 : 00101111000000000000000000000000; --     addi $28, $0, 0

1119 : 00101111010000000000000000000000; --     addi $29, $0, 0

1120 : 00101111100000000000000000000000; --     addi $30, $0, 0

1121 : 00101010100000011111111111111111; --     addi $10, $0, -1

1122 : 00111010100000000000000001000000; --     sw $10, 64($0)

1123 : 00111010100000000000000001000001; --     sw $10, 65($0)

1124 : 00101010100000011111111111111111; --     addi $10, $0, -1

1125 : 00111010100000000000000001100100; --     sw $10, 100($0)

1126 : 00111010100000000000000001100101; --     sw $10, 101($0)

1127 : 00111010100000000000000001100110; --     sw $10, 102($0)

1128 : 00111010100000000000000001100111; --     sw $10, 103($0)

1129 : 00111010100000000000000001101000; --     sw $10, 104($0)

1130 : 00111010100000000000000001101001; --     sw $10, 105($0)

1131 : 00111010100000000000000001101010; --     sw $10, 106($0)

1132 : 00111010100000000000000001101011; --     sw $10, 107($0)

1133 : 00111010100000000000000001101100; --     sw $10, 108($0)

1134 : 00111010100000000000000001101101; --     sw $10, 109($0)

1135 : 00111010100000000000000001101110; --     sw $10, 110($0)

1136 : 00111010100000000000000001101111; --     sw $10, 111($0)

1137 : 00111010100000000000000001110000; --     sw $10, 112($0)

1138 : 00111010100000000000000001110001; --     sw $10, 113($0)

1139 : 00111010100000000000000001110010; --     sw $10, 114($0)

1140 : 00111010100000000000000001110011; --     sw $10, 115($0)

1141 : 00111010100000000000000001110100; --     sw $10, 116($0)

1142 : 00111010100000000000000001110101; --     sw $10, 117($0)

1143 : 00111010100000000000000001110110; --     sw $10, 118($0)

1144 : 00111010100000000000000001110111; --     sw $10, 119($0)

1145 : 00111010100000000000000001111000; --     sw $10, 120($0)

1146 : 00111010100000000000000001111001; --     sw $10, 121($0)

1147 : 00111010100000000000000001111010; --     sw $10, 122($0)

1148 : 00111010100000000000000001111011; --     sw $10, 123($0)

1149 : 00111010100000000000000001111100; --     sw $10, 124($0)

1150 : 00111010100000000000000001111101; --     sw $10, 125($0)

1151 : 00111010100000000000000001111110; --     sw $10, 126($0)

1152 : 00111010100000000000000001111111; --     sw $10, 127($0)

1153 : 00111010100000000000000010000000; --     sw $10, 128($0)

1154 : 00111010100000000000000010000001; --     sw $10, 129($0)

1155 : 00111010100000000000000010000010; --     sw $10, 130($0)

1156 : 00111010100000000000000010000011; --     sw $10, 131($0)

1157 : 00001000000000000000000000000000; --     j 0

1158 : 00101010100000000000000000001110; --     addi $10 $0 14

1159 : 00000010100001101010000000001000; --     and $10 $3 $10

1160 : 00000010100101000000000010010100; --     sra $10 $10 1

1161 : 00101010110000000000000000000110; --     addi $11 $0 6

1162 : 00010010100101100000000000000001; --     bne $10 $11 1

1163 : 00010010110000000000000000000001; --     bne $11 $0 1

1164 : 00100111110000000000000000000000; --     jr $31

1165 : 00101010100000000000000000000001; --     addi $10 $0 1

1166 : 00000010100001101010000000001000; --     and $10 $3 $10

1167 : 00010010100000000000000000000001; --     bne $10 $0 1

1168 : 00001000000000000000010010011011; --     j promoteWhite

1169 : 00001000000000000000010010010010; --     j promoteBlack

1170 : 00101010100000000000000000111000; --     addi $10 $0 56

1171 : 00000010100101000010000000001000; --     and $10 $10 $2

1172 : 00000010100101000000000110010100; --     sra $10 $10 3

1173 : 00010010100000000000000000000100; --     bne $10 $0 4

1174 : 00101010100000000000000000001110; --     addi $10 $0 14

1175 : 00000010100001101010000000001000; --     and $10 $3 $10

1176 : 00000000110001101010000000000100; --     sub $3 $3 $10

1177 : 00101000110001100000000000000110; --     addi $3 $3 6

1178 : 00100111110000000000000000000000; --     jr $31

1179 : 00101010100000000000000000111000; --     addi $10 $0 56

1180 : 00000010100101000010000000001000; --     and $10 $10 $2

1181 : 00000010100101000000000110010100; --     sra $10 $10 3

1182 : 00101010110000000000000000000111; --     addi $11 $0 7

1183 : 00010010100101100000000000000100; --     bne $10 $11 4

1184 : 00101010100000000000000000001110; --     addi $10 $0 14

1185 : 00000010100001101010000000001000; --     and $10 $3 $10

1186 : 00000000110001101010000000000100; --     sub $3 $3 $10

1187 : 00101000110001100000000000000110; --     addi $3 $3 6

1188 : 00100111110000000000000000000000; --     jr $31

1189 : 00011000000000000000010010000110; --     jal promote

1190 : 00111000110001000000000000000000; --     sw $3, 0($2)

1191 : 00111000000000100000000000000000; --     sw $0, 0($1)

1192 : 00101010100000000000000000000001; --     addi $10, $0, 1

1193 : 00000010110101011110000000001000; --     and $11, $10, $30

1194 : 00000111101111001011000000000100; --     sub $30, $30, $11 # subtract current color

1195 : 00010010110000000000000000000001; --     bne $11, $0, 1

1196 : 00101111101111000000000000000001; --     addi $30, $30, 1 # add 1 to $30 to make it black

1197 : 00101011000000000000000000000001; --     addi $12, $0, 1 # default to a win

1198 : 00101010100000000000000000000000; --     addi $10, $0, 0 # address iterator $10 starts at 0

1199 : 00011000000000000000010010111010; --     jal startLoopCheckWin # writes $12 to 0 if opponent's king is found!

1200 : 00101010110000000000000000000001; --     addi $11, $0, 1

1201 : 00010011000101100000000000000001; --     bne $12, $11, 1#6#1 #WARNING: DEPENDENT ON CODE LENGTH

1202 : 00011000000000000000010010110101; --     jal markWin # this writes win status to register 30

1203 : 00111111100000000000000001000010; --     sw $30, 66($0) 

1204 : 00001000000000000000010000101101; --     j restoreColors

1205 : 00101010100000000000000000000010; --     addi $10, $0, 2 # win status mask

1206 : 00000010110101011110000000001000; --     and $11, $10, $30 # store current win status in $11

1207 : 00000111101111001011000000000100; --     sub $30, $30, $11 # subtract those status bits

1208 : 00101111101111000000000000000010; --     addi $30, $30, 2 # mark the status bits as win 0000...1x

1209 : 00100111110000000000000000000000; --     jr $31

1210 : 00101010110000000000000001000000; --     addi $11, $0, 64

1211 : 00010010100101100000000000000001; --     bne $10, $11, 1

1212 : 00001000000000000000010011001100; --     j endLoopCheckWin

1213 : 00101010110000000000000000000001; --     addi $11, $0, 1 # color mask

1214 : 00000011011111001011000000001000; --     and $13, $30, $11

1215 : 01000011100101000000000000000000; --     lw $14, 0($10)

1216 : 00101010110000000000000000001110; --     addi $11, $0, 14

1217 : 00000011110101101110000000001000; --     and $15, $11, $14

1218 : 00000011110111100000000010010100; --     sra $15, $15, 1

1219 : 00101010110000000000000000000001; --     addi $11, $0, 1

1220 : 00000100000101101110000000001000; --     and $16, $11, $14

1221 : 00101010110000000000000000000010; --     addi $11, $0, 2 #010 = king. 

1222 : 00010011110101100000000000000011; --     bne $15, $11, 3 #WARNING: bigger jump # of instrs dependent. If piece is not a king, go back to start of loop 

1223 : 00010100000110100000000000000010; --     bne $16, $13, 2 # if color is not equal to opponents color, go back to start of loop

1224 : 00101011000000000000000000000000; --     addi $12, $0, 0 # write 0 to $12

1225 : 00001000000000000000010011001100; --     j endLoopCheckWin

1226 : 00101010100101000000000000000001; --     addi $10, $10, 1 # i = i + 1

1227 : 00001000000000000000010010111010; --     j startLoopCheckWin

1228 : 00101010100000000000000000000001; --     addi $10 $0 1

1229 : 00010011000101000000000000000110; --     bne $12 $10 6#1

1230 : 00101010100000000000000000000001; --     addi $10, $0, 1 # color mask

1231 : 00000010110101011110000000001000; --     and $11, $10, $30 # store new color in 11

1232 : 00000010110101001011000000000100; --     sub $11, $10, $11 # store the flipped new color (our winner color) now in 11

1233 : 00000010110101100000000110010000; --     sll $11, $11, 3

1234 : 00000111101111001011000000000000; --     add $30, $30, $11

1235 : 00100111110000000000000000000000; --     jr $31

1236 : 00101010100000000000000000000100; --     addi $10 $0 4

1237 : 00000010110101011110000000001000; --     and $11 $10 $30

1238 : 00010010110000000000000000000001; --     bne $11 $0 1

1239 : 00100111110000000000000000000000; --     jr $31

1240 : 00101010100000000000000000000001; --     addi $10 $0 1

1241 : 00000100001111001010000000001000; --     and $16 $30 $10

1242 : 01000010100000000000000000011011; --     lw $10 27($0)

1243 : 00101010110000000000000000001110; --     addi $11, $0, 14

1244 : 00000011110101101010000000001000; --     and $15, $11, $10

1245 : 00000011110111100000000010010100; --     sra $15, $15, 1

1246 : 00101011100000000000000000000010; --     addi $14 $0 2

1247 : 00010011110111000000000000000111; --     bne $15 $14 7#5 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1248 : 00101010110000000000000000000001; --     addi $11, $0, 1

1249 : 00000011010101101010000000001000; --     and $13, $11, $10

1250 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1251 : 00000100001000000000000110010000; --     sll $16, $16, 3

1252 : 00000111101111010000000000000000; --     add $30, $30, $16

1253 : 00101011000000000000000000000001; --     addi $12 $0 1

1254 : 00100111110000000000000000000000; --     jr $31

1255 : 01000010100000000000000000011100; --     lw $10 28($0)

1256 : 00101010110000000000000000001110; --     addi $11, $0, 14

1257 : 00000011110101101010000000001000; --     and $15, $11, $10

1258 : 00000011110111100000000010010100; --     sra $15, $15, 1

1259 : 00101011100000000000000000000010; --     addi $14 $0 2

1260 : 00010011110111000000000000000111; --     bne $15 $14 7 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1261 : 00101010110000000000000000000001; --     addi $11, $0, 1

1262 : 00000011010101101010000000001000; --     and $13, $11, $10

1263 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1264 : 00000100001000000000000110010000; --     sll $16, $16, 3

1265 : 00000111101111010000000000000000; --     add $30, $30, $16

1266 : 00101011000000000000000000000001; --     addi $12 $0 1

1267 : 00100111110000000000000000000000; --     jr $31

1268 : 01000010100000000000000000100011; --     lw $10 35($0)

1269 : 00101010110000000000000000001110; --     addi $11, $0, 14

1270 : 00000011110101101010000000001000; --     and $15, $11, $10

1271 : 00000011110111100000000010010100; --     sra $15, $15, 1

1272 : 00101011100000000000000000000010; --     addi $14 $0 2

1273 : 00010011110111000000000000000111; --     bne $15 $14 7 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1274 : 00101010110000000000000000000001; --     addi $11, $0, 1

1275 : 00000011010101101010000000001000; --     and $13, $11, $10

1276 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1277 : 00000100001000000000000110010000; --     sll $16, $16, 3

1278 : 00000111101111010000000000000000; --     add $30, $30, $16

1279 : 00101011000000000000000000000001; --     addi $12 $0 1

1280 : 00100111110000000000000000000000; --     jr $31

1281 : 01000010100000000000000000100100; --     lw $10 36($0)

1282 : 00101010110000000000000000001110; --     addi $11, $0, 14

1283 : 00000011110101101010000000001000; --     and $15, $11, $10

1284 : 00000011110111100000000010010100; --     sra $15, $15, 1

1285 : 00101011100000000000000000000010; --     addi $14 $0 2

1286 : 00010011110111000000000000000111; --     bne $15 $14 7 #WARNING JUMP LENGTH VARIES WITH CODE DEPTH

1287 : 00101010110000000000000000000001; --     addi $11, $0, 1

1288 : 00000011010101101010000000001000; --     and $13, $11, $10

1289 : 00010011011000000000000000000100; --     bne $13 $16 4 #2

1290 : 00000100001000000000000110010000; --     sll $16, $16, 3

1291 : 00000111101111010000000000000000; --     add $30, $30, $16

1292 : 00101011000000000000000000000001; --     addi $12 $0 1

1293 : 00100111110000000000000000000000; --     jr $31

1294 : 00100111110000000000000000000000; --     jr $31

1295 : 00101010100000000000000011001000; --     addi $10 $0 200

1296 : 00101010110000000000000000000000; --     addi $11 $0 0

1297 : 00101011010000000000000001000000; --     addi $13 $0 64

1298 : 00001000000000000000010100010011; --     j startReset

1299 : 00010010110110100000000000000001; --     bne $11 $13 1

1300 : 00001000000000000000010100011010; --     j endReset

1301 : 01000011000101000000000000000000; --     lw $12 0($10)

1302 : 00111011000101100000000000000000; --     sw $12 0($11)

1303 : 00101010100101000000000000000001; --     addi $10 $10 1

1304 : 00101010110101100000000000000001; --     addi $11 $11 1

1305 : 00001000000000000000010100010011; --     j startReset

1306 : 00101010100000011111111111111111; --     addi $10 $0 -1

1307 : 00111010100000000000000001000101; --     sw $10 69($0)

1308 : 01000010100000000000000001000100; --     lw $10 68($0)

1309 : 00111000000000000000000001000011; --     sw $0 67($0)

1310 : 00010010100000000000000000000010; --     bne $10 $0 2

1311 : 00111000000000000000000001000010; --     sw $0 66($0)

1312 : 00001000000000000000010000101101; --     j restoreColors

1313 : 00111000000000000000000001000100; --     sw $0 68($0)

1314 : 00101010100000000000000000000100; --     addi $10 $0 4

1315 : 00111010100000000000000001000010; --     sw $10 66($0)

1316 : 00001000000000000000010000101101; --     j restoreColors

[1317..4095] : 00000000000000000000000000000000;
END;
